
include/openvswitch/automake.mk,278
openvswitchincludedir = $(includedir)/openvswitchopenvswitchincludedir1,0
openvswitchinclude_HEADERS = \openvswitchinclude_HEADERS2,50
nodist_include_openvswitch_libcxxtest_la_SOURCES = include/openvswitch/cxxtest.ccnodist_include_openvswitch_libcxxtest_la_SOURCES43,1507

include/openvswitch/compiler.h,3967
#define OPENVSWITCH_COMPILER_H OPENVSWITCH_COMPILER_H18,681
  #define __has_feature(__has_feature24,779
  #define __has_extension(__has_extension27,839
#define OVS_NO_RETURN OVS_NO_RETURN33,1039
#define OVS_NO_RETURN OVS_NO_RETURN35,1106
#define OVS_NO_RETURNOVS_NO_RETURN37,1155
#define OVS_UNUSED OVS_UNUSED41,1214
#define OVS_PRINTF_FORMAT(OVS_PRINTF_FORMAT42,1261
#define OVS_SCANF_FORMAT(OVS_SCANF_FORMAT43,1345
#define OVS_WARN_UNUSED_RESULT OVS_WARN_UNUSED_RESULT44,1427
#define OVS_LIKELY(OVS_LIKELY45,1498
#define OVS_UNLIKELY(OVS_UNLIKELY46,1563
#define OVS_UNUSEDOVS_UNUSED48,1636
#define OVS_PRINTF_FORMAT(OVS_PRINTF_FORMAT49,1655
#define OVS_SCANF_FORMAT(OVS_SCANF_FORMAT50,1692
#define OVS_WARN_UNUSED_RESULTOVS_WARN_UNUSED_RESULT51,1728
#define OVS_LIKELY(OVS_LIKELY52,1759
#define OVS_UNLIKELY(OVS_UNLIKELY53,1805
#define OVS_LOCKABLE OVS_LOCKABLE116,4341
#define OVS_REQ_RDLOCK(OVS_REQ_RDLOCK117,4388
#define OVS_ACQ_RDLOCK(OVS_ACQ_RDLOCK118,4468
#define OVS_REQ_WRLOCK(OVS_REQ_WRLOCK119,4547
#define OVS_ACQ_WRLOCK(OVS_ACQ_WRLOCK121,4636
#define OVS_REQUIRES(OVS_REQUIRES123,4724
#define OVS_ACQUIRES(OVS_ACQUIRES125,4811
#define OVS_TRY_WRLOCK(OVS_TRY_WRLOCK127,4897
#define OVS_TRY_RDLOCK(OVS_TRY_RDLOCK129,5033
#define OVS_TRY_LOCK(OVS_TRY_LOCK131,5162
#define OVS_GUARDED OVS_GUARDED133,5298
#define OVS_GUARDED_BY(OVS_GUARDED_BY134,5347
#define OVS_RELEASES(OVS_RELEASES135,5416
#define OVS_EXCLUDED(OVS_EXCLUDED136,5488
#define OVS_ACQ_BEFORE(OVS_ACQ_BEFORE137,5559
#define OVS_ACQ_AFTER(OVS_ACQ_AFTER138,5633
#define OVS_NO_THREAD_SAFETY_ANALYSIS OVS_NO_THREAD_SAFETY_ANALYSIS139,5705
#define OVS_LOCKABLEOVS_LOCKABLE142,5815
#define OVS_REQ_RDLOCK(OVS_REQ_RDLOCK143,5836
#define OVS_ACQ_RDLOCK(OVS_ACQ_RDLOCK144,5864
#define OVS_REQ_WRLOCK(OVS_REQ_WRLOCK145,5892
#define OVS_ACQ_WRLOCK(OVS_ACQ_WRLOCK146,5920
#define OVS_REQUIRES(OVS_REQUIRES147,5948
#define OVS_ACQUIRES(OVS_ACQUIRES148,5974
#define OVS_TRY_WRLOCK(OVS_TRY_WRLOCK149,6000
#define OVS_TRY_RDLOCK(OVS_TRY_RDLOCK150,6028
#define OVS_TRY_LOCK(OVS_TRY_LOCK151,6056
#define OVS_GUARDEDOVS_GUARDED152,6082
#define OVS_GUARDED_BY(OVS_GUARDED_BY153,6102
#define OVS_EXCLUDED(OVS_EXCLUDED154,6130
#define OVS_RELEASES(OVS_RELEASES155,6156
#define OVS_ACQ_BEFORE(OVS_ACQ_BEFORE156,6182
#define OVS_ACQ_AFTER(OVS_ACQ_AFTER157,6210
#define OVS_NO_THREAD_SAFETY_ANALYSISOVS_NO_THREAD_SAFETY_ANALYSIS158,6237
#define OVS_PACKED_ENUM OVS_PACKED_ENUM174,6990
#define HAVE_PACKED_ENUMHAVE_PACKED_ENUM175,7042
#define OVS_PACKED_ENUMOVS_PACKED_ENUM177,7073
#define OVS_PACKED(OVS_PACKED181,7122
#define OVS_PACKED(OVS_PACKED183,7186
#define OVS_ALIGNED_STRUCT(OVS_ALIGNED_STRUCT198,7758
#define OVS_ALIGNED_VAR(OVS_ALIGNED_VAR199,7832
#define OVS_ALIGNED_STRUCT(OVS_ALIGNED_STRUCT201,7893
#define OVS_ALIGNED_VAR(OVS_ALIGNED_VAR202,7960
#define CCALL CCALL213,8194
#define OVS_CONSTRUCTOR(OVS_CONSTRUCTOR215,8249
#define OVS_CONSTRUCTOR(OVS_CONSTRUCTOR220,8428
#define OVS_PREFETCH(OVS_PREFETCH232,8918
#define OVS_PREFETCH_WRITE(OVS_PREFETCH_WRITE233,8972
#define OVS_PREFETCH(OVS_PREFETCH235,9041
#define OVS_PREFETCH_WRITE(OVS_PREFETCH_WRITE236,9068
#define BUILD_ASSERT(BUILD_ASSERT244,9258
#define BUILD_ASSERT_DECL(BUILD_ASSERT_DECL245,9296
#define BUILD_ASSERT(BUILD_ASSERT247,9391
#define BUILD_ASSERT_DECL(BUILD_ASSERT_DECL248,9458
#define BUILD_ASSERT_DECL(BUILD_ASSERT_DECL251,9624
#define BUILD_ASSERT(BUILD_ASSERT252,9684
#define BUILD_ASSERT__(BUILD_ASSERT__254,9759
#define BUILD_ASSERT(BUILD_ASSERT256,9869
#define BUILD_ASSERT_DECL(BUILD_ASSERT_DECL257,9924
#define BUILD_ASSERT_GCCONLY(BUILD_ASSERT_GCCONLY262,10045
#define BUILD_ASSERT_DECL_GCCONLY(BUILD_ASSERT_DECL_GCCONLY263,10099
#define BUILD_ASSERT_GCCONLY(BUILD_ASSERT_GCCONLY265,10169
#define BUILD_ASSERT_DECL_GCCONLY(BUILD_ASSERT_DECL_GCCONLY266,10215

include/openvswitch/dynamic-string.h,464
#define OPENVSWITCH_DYNAMIC_STRING_H OPENVSWITCH_DYNAMIC_STRING_H18,681
struct ds {ds38,1330
    char *string;       /* Null-terminated string. */string39,1342
    size_t length;      /* Bytes used, not including null terminator. */length40,1396
    size_t allocated;   /* Bytes allocated, not including null terminator. */allocated41,1469
#define DS_EMPTY_INITIALIZER DS_EMPTY_INITIALIZER44,1551
ds_put_char(struct ds *ds, char c)ds_put_char87,3204

include/openvswitch/flow.h,5333
#define OPENVSWITCH_FLOW_H OPENVSWITCH_FLOW_H17,676
#define FLOW_WC_SEQ FLOW_WC_SEQ30,1054
#define FLOW_N_REGS FLOW_N_REGS33,1135
#define FLOW_N_XREGS FLOW_N_XREGS41,1427
#define FLOW_N_XXREGS FLOW_N_XXREGS47,1609
#define FLOW_DL_TYPE_NONE FLOW_DL_TYPE_NONE51,1764
#define FLOW_NW_FRAG_ANY FLOW_NW_FRAG_ANY54,1872
#define FLOW_NW_FRAG_LATER FLOW_NW_FRAG_LATER55,1935
#define FLOW_NW_FRAG_MASK FLOW_NW_FRAG_MASK56,2014
#define FLOW_MAX_MPLS_LABELS FLOW_MAX_MPLS_LABELS66,2353
#define FLOW_MAX_SAMPLE_NESTING FLOW_MAX_SAMPLE_NESTING69,2442
#define FLOW_MAX_VLAN_HEADERS FLOW_MAX_VLAN_HEADERS75,2630
#define LEGACY_MAX_VLAN_HEADERS LEGACY_MAX_VLAN_HEADERS79,2748
struct flow {flow100,3626
    struct flow_tnl tunnel;     /* Encapsulating tunnel parameters. */tunnel102,3659
    ovs_be64 metadata;          /* OpenFlow Metadata. */metadata103,3730
    uint32_t regs[FLOW_N_REGS]; /* Registers. */regs104,3787
    uint32_t skb_priority;      /* Packet priority for QoS. */skb_priority105,3836
    uint32_t pkt_mark;          /* Packet mark. */pkt_mark106,3899
    uint32_t dp_hash;           /* Datapath computed hash value. The exactdp_hash107,3950
    union flow_in_port in_port; /* Input port.*/in_port109,4104
    uint32_t recirc_id;         /* Must be exact match. */recirc_id110,4153
    uint8_t ct_state;           /* Connection tracking state. */ct_state111,4212
    uint8_t ct_nw_proto;        /* CT orig tuple IP protocol. */ct_nw_proto112,4277
    uint16_t ct_zone;           /* Connection tracking zone. */ct_zone113,4342
    uint32_t ct_mark;           /* Connection mark.*/ct_mark114,4406
    ovs_be32 packet_type;       /* OpenFlow packet type. */packet_type115,4460
    ovs_u128 ct_label;          /* Connection label. */ct_label116,4520
    uint32_t conj_id;           /* Conjunction ID. */conj_id117,4576
    ofp_port_t actset_output;   /* Output port in action set. */actset_output118,4630
    struct eth_addr dl_dst;     /* Ethernet destination address. */dl_dst121,4769
    struct eth_addr dl_src;     /* Ethernet source address. */dl_src122,4837
    ovs_be16 dl_type;           /* Ethernet frame type.dl_type123,4900
    uint8_t pad1[2];            /* Pad to 64 bits. */pad1126,5114
    union flow_vlan_hdr vlans[FLOW_MAX_VLAN_HEADERS]; /* VLANs */vlans127,5168
    ovs_be32 mpls_lse[ROUND_UP(FLOW_MAX_MPLS_LABELS, 2)]; /* MPLS label stackmpls_lse128,5234
    ovs_be32 nw_src;            /* IPv4 source address or ARP SPA. */nw_src131,5422
    ovs_be32 nw_dst;            /* IPv4 destination address or ARP TPA. */nw_dst132,5492
    ovs_be32 ct_nw_src;         /* CT orig tuple IPv4 source address. */ct_nw_src133,5567
    ovs_be32 ct_nw_dst;         /* CT orig tuple IPv4 destination address. */ct_nw_dst134,5640
    struct in6_addr ipv6_src;   /* IPv6 source address. */ipv6_src135,5718
    struct in6_addr ipv6_dst;   /* IPv6 destination address. */ipv6_dst136,5777
    struct in6_addr ct_ipv6_src; /* CT orig tuple IPv6 source address. */ct_ipv6_src137,5841
    struct in6_addr ct_ipv6_dst; /* CT orig tuple IPv6 destination address. */ct_ipv6_dst138,5915
    ovs_be32 ipv6_label;        /* IPv6 flow label. */ipv6_label139,5994
    uint8_t nw_frag;            /* FLOW_FRAG_* flags. */nw_frag140,6049
    uint8_t nw_tos;             /* IP ToS (including DSCP and ECN). */nw_tos141,6106
    uint8_t nw_ttl;             /* IP TTL/Hop Limit. */nw_ttl142,6177
    uint8_t nw_proto;           /* IP protocol or low 8 bits of ARP opcode. */nw_proto143,6233
    struct in6_addr nd_target;  /* IPv6 neighbor discovery (ND) target. */nd_target144,6312
    struct eth_addr arp_sha;    /* ARP/ND source hardware address. */arp_sha145,6387
    struct eth_addr arp_tha;    /* ARP/ND target hardware address. */arp_tha146,6457
    ovs_be16 tcp_flags;         /* TCP flags. With L3 to avoid matching L4. */tcp_flags147,6527
    ovs_be16 pad2;              /* Pad to 64 bits. */pad2148,6606
    struct flow_nsh nsh;        /* Network Service Header keys */nsh149,6660
    ovs_be16 tp_src;            /* TCP/UDP/SCTP source port/ICMP type. */tp_src152,6757
    ovs_be16 tp_dst;            /* TCP/UDP/SCTP destination port/ICMP code. */tp_dst153,6831
    ovs_be16 ct_tp_src;         /* CT original tuple source port/ICMP type. */ct_tp_src154,6910
    ovs_be16 ct_tp_dst;         /* CT original tuple dst port/ICMP code. */ct_tp_dst155,6989
    ovs_be32 igmp_group_ip4;    /* IGMP group IPv4 address.igmp_group_ip4156,7065
    ovs_be32 pad3;              /* Pad to 64 bits. */pad3158,7202
BUILD_ASSERT_DECL(sizeof(struct flow) % sizeof(uint64_t) == 0);uint64_t160,7259
BUILD_ASSERT_DECL(sizeof(struct flow_tnl) % sizeof(uint64_t) == 0);uint64_t161,7323
BUILD_ASSERT_DECL(sizeof(struct flow_nsh) % sizeof(uint64_t) == 0);uint64_t162,7391
#define FLOW_U64S FLOW_U64S164,7460
    FLOW_SEGMENT_1_ENDS_AT = offsetof(struct flow, dl_dst),FLOW_SEGMENT_1_ENDS_AT178,8074
    FLOW_SEGMENT_2_ENDS_AT = offsetof(struct flow, nw_src),FLOW_SEGMENT_2_ENDS_AT179,8134
    FLOW_SEGMENT_3_ENDS_AT = offsetof(struct flow, tp_src),FLOW_SEGMENT_3_ENDS_AT180,8194
#define WC_MASK_FIELD(WC_MASK_FIELD199,9018
#define WC_MASK_FIELD_MASK(WC_MASK_FIELD_MASK201,9116
#define WC_UNMASK_FIELD(WC_UNMASK_FIELD203,9200

include/openvswitch/geneve.h,935
#define OPENVSWITCH_GENEVE_H OPENVSWITCH_GENEVE_H18,631
#define TLV_MAX_OPT_SIZE TLV_MAX_OPT_SIZE26,735
#define TLV_TOT_OPT_SIZE TLV_TOT_OPT_SIZE27,764
#define GENEVE_CRIT_OPT_TYPE GENEVE_CRIT_OPT_TYPE29,794
struct geneve_opt {geneve_opt31,833
    ovs_be16  opt_class;opt_class32,853
    uint8_t   type;type33,878
    uint8_t   r1:1;r135,921
    uint8_t   r2:1;r236,941
    uint8_t   r3:1;r337,961
    uint8_t   length:5;length38,981
    uint8_t   length:5;length40,1011
    uint8_t   r3:1;r341,1035
    uint8_t   r2:1;r242,1055
    uint8_t   r1:1;r143,1075
struct genevehdr {genevehdr48,1128
    uint8_t ver:2;ver50,1170
    uint8_t opt_len:6;opt_len51,1189
    uint8_t oam:1;oam52,1212
    uint8_t critical:1;critical53,1231
    uint8_t rsvd1:6;rsvd154,1255
    ovs_be16 proto_type;proto_type62,1395
    ovs_16aligned_be32 vni;vni63,1420
    struct geneve_opt options[];options64,1448

include/openvswitch/hmap.h,2934
#define HMAP_H HMAP_H18,653
struct hmap_node {hmap_node29,862
    size_t hash;                /* Hash value. */hash30,881
    struct hmap_node *next;     /* Next in linked list. */next31,931
static inline size_t hmap_node_hash(const struct hmap_node *node)hmap_node_hash35,1043
#define HMAP_NODE_NULL HMAP_NODE_NULL40,1137
#define HMAP_NODE_NULL_INITIALIZER HMAP_NODE_NULL_INITIALIZER41,1185
hmap_node_is_null(const struct hmap_node *node)hmap_node_is_null46,1400
hmap_node_nullify(struct hmap_node *node)hmap_node_nullify54,1606
struct hmap {hmap60,1704
    struct hmap_node **buckets; /* Must point to 'one' iff 'mask' == 0. */buckets61,1718
    struct hmap_node *one;one62,1793
    size_t mask;mask63,1820
    size_t n;n64,1837
#define HMAP_INITIALIZER(HMAP_INITIALIZER68,1896
#define HMAP_CONST(HMAP_CONST74,2183
#define hmap_expand(hmap_expand88,2716
#define hmap_shrink(hmap_shrink91,2839
#define hmap_reserve(hmap_reserve94,2980
#define hmap_insert(hmap_insert100,3242
#define HMAP_FOR_EACH_WITH_HASH(HMAP_FOR_EACH_WITH_HASH137,4963
#define HMAP_FOR_EACH_IN_BUCKET(HMAP_FOR_EACH_IN_BUCKET142,5298
#define HMAP_FOR_EACH(HMAP_FOR_EACH169,6811
#define HMAP_FOR_EACH_INIT(HMAP_FOR_EACH_INIT171,6908
#define HMAP_FOR_EACH_SAFE(HMAP_FOR_EACH_SAFE178,7348
#define HMAP_FOR_EACH_SAFE_INIT(HMAP_FOR_EACH_SAFE_INIT180,7467
#define HMAP_FOR_EACH_CONTINUE(HMAP_FOR_EACH_CONTINUE188,7924
#define HMAP_FOR_EACH_CONTINUE_INIT(HMAP_FOR_EACH_CONTINUE_INIT190,8039
hmap_pop_helper__(struct hmap *hmap, size_t *bucket) {hmap_pop_helper__197,8450
#define HMAP_FOR_EACH_POP(HMAP_FOR_EACH_POP211,8732
struct hmap_position {hmap_position220,9241
    unsigned int bucket;bucket221,9264
    unsigned int offset;offset222,9289
hmap_count(const struct hmap *hmap)hmap_count230,9511
hmap_capacity(const struct hmap *hmap)hmap_capacity238,9689
hmap_is_empty(const struct hmap *hmap)hmap_is_empty248,9962
hmap_insert_fast(struct hmap *hmap, struct hmap_node *node, size_t hash)hmap_insert_fast256,10152
hmap_insert_at(struct hmap *hmap, struct hmap_node *node, size_t hash,hmap_insert_at272,10690
hmap_remove(struct hmap *hmap, struct hmap_node *node)hmap_remove284,11048
hmap_replace(struct hmap *hmap,hmap_replace302,11732
hmap_next_with_hash__(const struct hmap_node *node, size_t hash)hmap_next_with_hash__315,12127
hmap_first_with_hash(const struct hmap *hmap, size_t hash)hmap_first_with_hash326,12478
hmap_first_in_bucket(const struct hmap *hmap, size_t hash)hmap_first_in_bucket334,12786
hmap_next_in_bucket(const struct hmap_node *node)hmap_next_in_bucket348,13383
hmap_next_with_hash(const struct hmap_node *node)hmap_next_with_hash362,13972
hmap_next__(const struct hmap *hmap, size_t start)hmap_next__368,14118
hmap_first(const struct hmap *hmap)hmap_first383,14495
hmap_next(const struct hmap *hmap, const struct hmap_node *node)hmap_next396,15007

include/openvswitch/json.h,1451
#define JSON_H JSON_H18,629
enum json_type {json_type43,1256
    JSON_NULL,                  /* null */JSON_NULL44,1273
    JSON_FALSE,                 /* false */JSON_FALSE45,1316
    JSON_TRUE,                  /* true */JSON_TRUE46,1360
    JSON_OBJECT,                /* {"a": b, "c": d, ...} */JSON_OBJECT47,1403
    JSON_ARRAY,                 /* [1, 2, 3, ...] */JSON_ARRAY48,1463
    JSON_INTEGER,               /* 123. */JSON_INTEGER49,1516
    JSON_REAL,                  /* 123.456. */JSON_REAL50,1559
    JSON_STRING,                /* "..." */JSON_STRING51,1606
    JSON_N_TYPESJSON_N_TYPES52,1650
struct json_array {json_array58,1741
    size_t n, n_allocated;n59,1761
    size_t n, n_allocated;n_allocated59,1761
    struct json **elems;elems60,1788
struct json {json64,1837
    enum json_type type;type65,1851
    size_t count;count66,1876
        struct shash *object;   /* Contains "struct json *"s. */object68,1906
        struct json_array array;array69,1971
        long long int integer;integer70,2004
        double real;real71,2035
        char *string;string72,2056
    } u;u73,2078
    JSPF_TRAILER = 1 << 0       /* Check for garbage following input.  */JSPF_TRAILER112,3508
    JSSF_PRETTY = 1 << 0,       /* Multiple lines with indentation, if true. */JSSF_PRETTY128,4044
    JSSF_SORT = 1 << 1          /* Object members in sorted order, if true. */JSSF_SORT129,4124

include/openvswitch/list.h,2310
#define OPENVSWITCH_LIST_H OPENVSWITCH_LIST_H17,664
struct ovs_list {ovs_list30,899
    struct ovs_list *prev;     /* Previous list element. */prev31,917
    struct ovs_list *next;     /* Next list element. */next32,977
#define OVS_LIST_INITIALIZER(OVS_LIST_INITIALIZER35,1037
static const struct ovs_list OVS_LIST_POISON =OVS_LIST_POISON43,1454
#define LIST_FOR_EACH(LIST_FOR_EACH75,3022
#define LIST_FOR_EACH_CONTINUE(LIST_FOR_EACH_CONTINUE79,3306
#define LIST_FOR_EACH_REVERSE(LIST_FOR_EACH_REVERSE83,3592
#define LIST_FOR_EACH_REVERSE_SAFE(LIST_FOR_EACH_REVERSE_SAFE87,3876
#define LIST_FOR_EACH_REVERSE_CONTINUE(LIST_FOR_EACH_REVERSE_CONTINUE93,4252
#define LIST_FOR_EACH_SAFE(LIST_FOR_EACH_SAFE97,4536
#define LIST_FOR_EACH_POP(LIST_FOR_EACH_POP103,4907
ovs_list_init(struct ovs_list *list)ovs_list_init111,5219
ovs_list_poison(struct ovs_list *list)ovs_list_poison119,5459
ovs_list_insert(struct ovs_list *before, struct ovs_list *elem)ovs_list_insert126,5594
ovs_list_splice(struct ovs_list *before, struct ovs_list *first, struct ovs_list *last)ovs_list_splice137,5919
ovs_list_push_front(struct ovs_list *list, struct ovs_list *elem)ovs_list_push_front158,6495
ovs_list_push_back(struct ovs_list *list, struct ovs_list *elem)ovs_list_push_back166,6709
ovs_list_replace(struct ovs_list *element, const struct ovs_list *position)ovs_list_replace174,6947
ovs_list_moved(struct ovs_list *list, const struct ovs_list *orig)ovs_list_moved191,7611
ovs_list_move(struct ovs_list *dst, struct ovs_list *src)ovs_list_move204,8051
ovs_list_remove(struct ovs_list *elem)ovs_list_remove213,8320
ovs_list_pop_front(struct ovs_list *list)ovs_list_pop_front223,8607
ovs_list_pop_back(struct ovs_list *list)ovs_list_pop_back234,8890
ovs_list_front(const struct ovs_list *list_)ovs_list_front245,9140
ovs_list_back(const struct ovs_list *list_)ovs_list_back257,9441
ovs_list_size(const struct ovs_list *list)ovs_list_size269,9735
ovs_list_is_empty(const struct ovs_list *list)ovs_list_is_empty282,9997
ovs_list_is_singleton(const struct ovs_list *list)ovs_list_is_singleton289,10168
ovs_list_is_short(const struct ovs_list *list)ovs_list_is_short296,10374
ovs_list_push_back_all(struct ovs_list *dst, struct ovs_list *src)ovs_list_push_back_all303,10547

include/openvswitch/match.h,663
#define OPENVSWITCH_MATCH_H OPENVSWITCH_MATCH_H18,635
struct match {match40,1279
    struct flow flow;flow41,1294
    struct flow_wildcards wc;wc42,1316
    struct tun_metadata_allocation tun_md;tun_md43,1346
#define MATCH_CATCHALL_INITIALIZER MATCH_CATCHALL_INITIALIZER47,1459
#define MATCH_SET_FIELD_MASKED(MATCH_SET_FIELD_MASKED49,1524
#define MATCH_SET_FIELD_UINT8(MATCH_SET_FIELD_UINT855,1797
#define MATCH_SET_FIELD_BE32(MATCH_SET_FIELD_BE3258,1921
struct minimatch {minimatch236,11904
            struct miniflow *flow;flow239,11952
            struct minimask *mask;mask240,11987
        struct miniflow *flows[2];flows242,12033

include/openvswitch/meta-flow.h,13985
#define OPENVSWITCH_META_FLOW_H OPENVSWITCH_META_FLOW_H18,639
enum OVS_PACKED_ENUM mf_field_id {mf_field_id219,8425
    MFF_DP_HASH,MFF_DP_HASH243,9239
    MFF_RECIRC_ID,MFF_RECIRC_ID258,9631
    MFF_PACKET_TYPE,MFF_PACKET_TYPE272,9944
    MFF_CONJ_ID,MFF_CONJ_ID286,10302
    MFF_TUN_ID,MFF_TUN_ID304,10953
    MFF_TUN_SRC,MFF_TUN_SRC321,11377
    MFF_TUN_DST,MFF_TUN_DST339,11814
    MFF_TUN_IPV6_SRC,MFF_TUN_IPV6_SRC356,12248
    MFF_TUN_IPV6_DST,MFF_TUN_IPV6_DST374,12699
    MFF_TUN_FLAGS,MFF_TUN_FLAGS390,13084
    MFF_TUN_TTL,MFF_TUN_TTL407,13477
    MFF_TUN_TOS,MFF_TUN_TOS422,13818
    MFF_TUN_GBP_ID,MFF_TUN_GBP_ID436,14100
    MFF_TUN_GBP_FLAGS,MFF_TUN_GBP_FLAGS450,14396
    MFF_TUN_METADATA0,MFF_TUN_METADATA0532,18826
    MFF_TUN_METADATA1,MFF_TUN_METADATA1533,18849
    MFF_TUN_METADATA2,MFF_TUN_METADATA2534,18872
    MFF_TUN_METADATA3,MFF_TUN_METADATA3535,18895
    MFF_TUN_METADATA4,MFF_TUN_METADATA4536,18918
    MFF_TUN_METADATA5,MFF_TUN_METADATA5537,18941
    MFF_TUN_METADATA6,MFF_TUN_METADATA6538,18964
    MFF_TUN_METADATA7,MFF_TUN_METADATA7539,18987
    MFF_TUN_METADATA8,MFF_TUN_METADATA8540,19010
    MFF_TUN_METADATA9,MFF_TUN_METADATA9541,19033
    MFF_TUN_METADATA10,MFF_TUN_METADATA10542,19056
    MFF_TUN_METADATA11,MFF_TUN_METADATA11543,19080
    MFF_TUN_METADATA12,MFF_TUN_METADATA12544,19104
    MFF_TUN_METADATA13,MFF_TUN_METADATA13545,19128
    MFF_TUN_METADATA14,MFF_TUN_METADATA14546,19152
    MFF_TUN_METADATA15,MFF_TUN_METADATA15547,19176
    MFF_TUN_METADATA16,MFF_TUN_METADATA16548,19200
    MFF_TUN_METADATA17,MFF_TUN_METADATA17549,19224
    MFF_TUN_METADATA18,MFF_TUN_METADATA18550,19248
    MFF_TUN_METADATA19,MFF_TUN_METADATA19551,19272
    MFF_TUN_METADATA20,MFF_TUN_METADATA20552,19296
    MFF_TUN_METADATA21,MFF_TUN_METADATA21553,19320
    MFF_TUN_METADATA22,MFF_TUN_METADATA22554,19344
    MFF_TUN_METADATA23,MFF_TUN_METADATA23555,19368
    MFF_TUN_METADATA24,MFF_TUN_METADATA24556,19392
    MFF_TUN_METADATA25,MFF_TUN_METADATA25557,19416
    MFF_TUN_METADATA26,MFF_TUN_METADATA26558,19440
    MFF_TUN_METADATA27,MFF_TUN_METADATA27559,19464
    MFF_TUN_METADATA28,MFF_TUN_METADATA28560,19488
    MFF_TUN_METADATA29,MFF_TUN_METADATA29561,19512
    MFF_TUN_METADATA30,MFF_TUN_METADATA30562,19536
    MFF_TUN_METADATA31,MFF_TUN_METADATA31563,19560
    MFF_TUN_METADATA32,MFF_TUN_METADATA32564,19584
    MFF_TUN_METADATA33,MFF_TUN_METADATA33565,19608
    MFF_TUN_METADATA34,MFF_TUN_METADATA34566,19632
    MFF_TUN_METADATA35,MFF_TUN_METADATA35567,19656
    MFF_TUN_METADATA36,MFF_TUN_METADATA36568,19680
    MFF_TUN_METADATA37,MFF_TUN_METADATA37569,19704
    MFF_TUN_METADATA38,MFF_TUN_METADATA38570,19728
    MFF_TUN_METADATA39,MFF_TUN_METADATA39571,19752
    MFF_TUN_METADATA40,MFF_TUN_METADATA40572,19776
    MFF_TUN_METADATA41,MFF_TUN_METADATA41573,19800
    MFF_TUN_METADATA42,MFF_TUN_METADATA42574,19824
    MFF_TUN_METADATA43,MFF_TUN_METADATA43575,19848
    MFF_TUN_METADATA44,MFF_TUN_METADATA44576,19872
    MFF_TUN_METADATA45,MFF_TUN_METADATA45577,19896
    MFF_TUN_METADATA46,MFF_TUN_METADATA46578,19920
    MFF_TUN_METADATA47,MFF_TUN_METADATA47579,19944
    MFF_TUN_METADATA48,MFF_TUN_METADATA48580,19968
    MFF_TUN_METADATA49,MFF_TUN_METADATA49581,19992
    MFF_TUN_METADATA50,MFF_TUN_METADATA50582,20016
    MFF_TUN_METADATA51,MFF_TUN_METADATA51583,20040
    MFF_TUN_METADATA52,MFF_TUN_METADATA52584,20064
    MFF_TUN_METADATA53,MFF_TUN_METADATA53585,20088
    MFF_TUN_METADATA54,MFF_TUN_METADATA54586,20112
    MFF_TUN_METADATA55,MFF_TUN_METADATA55587,20136
    MFF_TUN_METADATA56,MFF_TUN_METADATA56588,20160
    MFF_TUN_METADATA57,MFF_TUN_METADATA57589,20184
    MFF_TUN_METADATA58,MFF_TUN_METADATA58590,20208
    MFF_TUN_METADATA59,MFF_TUN_METADATA59591,20232
    MFF_TUN_METADATA60,MFF_TUN_METADATA60592,20256
    MFF_TUN_METADATA61,MFF_TUN_METADATA61593,20280
    MFF_TUN_METADATA62,MFF_TUN_METADATA62594,20304
    MFF_TUN_METADATA63,MFF_TUN_METADATA63595,20328
    MFF_METADATA,MFF_METADATA614,20827
    MFF_IN_PORT,MFF_IN_PORT631,21240
    MFF_IN_PORT_OXM,MFF_IN_PORT_OXM647,21641
    MFF_ACTSET_OUTPUT,MFF_ACTSET_OUTPUT660,21974
    MFF_SKB_PRIORITY,MFF_SKB_PRIORITY680,22648
    MFF_PKT_MARK,MFF_PKT_MARK697,23181
    MFF_CT_STATE,MFF_CT_STATE712,23521
    MFF_CT_ZONE,MFF_CT_ZONE727,23856
    MFF_CT_MARK,MFF_CT_MARK746,24405
    MFF_CT_LABEL,MFF_CT_LABEL765,24957
    MFF_CT_NW_PROTO,MFF_CT_NW_PROTO786,25682
    MFF_CT_NW_SRC,MFF_CT_NW_SRC805,26209
    MFF_CT_NW_DST,MFF_CT_NW_DST824,26739
    MFF_CT_IPV6_SRC,MFF_CT_IPV6_SRC843,27271
    MFF_CT_IPV6_DST,MFF_CT_IPV6_DST862,27810
    MFF_CT_TP_SRC,MFF_CT_TP_SRC880,28308
    MFF_CT_TP_DST,MFF_CT_TP_DST898,28809
    MFF_REG0,MFF_REG0928,29913
    MFF_REG1,MFF_REG1929,29927
    MFF_REG2,MFF_REG2930,29941
    MFF_REG3,MFF_REG3931,29955
    MFF_REG4,MFF_REG4932,29969
    MFF_REG5,MFF_REG5933,29983
    MFF_REG6,MFF_REG6934,29997
    MFF_REG7,MFF_REG7935,30011
    MFF_REG8,MFF_REG8936,30025
    MFF_REG9,MFF_REG9937,30039
    MFF_REG10,MFF_REG10938,30053
    MFF_REG11,MFF_REG11939,30068
    MFF_REG12,MFF_REG12940,30083
    MFF_REG13,MFF_REG13941,30098
    MFF_REG14,MFF_REG14942,30113
    MFF_REG15,MFF_REG15943,30128
    MFF_XREG0,MFF_XREG0961,30522
    MFF_XREG1,MFF_XREG1962,30537
    MFF_XREG2,MFF_XREG2963,30552
    MFF_XREG3,MFF_XREG3964,30567
    MFF_XREG4,MFF_XREG4965,30582
    MFF_XREG5,MFF_XREG5966,30597
    MFF_XREG6,MFF_XREG6967,30612
    MFF_XREG7,MFF_XREG7968,30627
    MFF_XXREG0,MFF_XXREG0993,31444
    MFF_XXREG1,MFF_XXREG1994,31460
    MFF_XXREG2,MFF_XXREG2995,31476
    MFF_XXREG3,MFF_XXREG3996,31492
    MFF_ETH_SRC,MFF_ETH_SRC1019,32020
    MFF_ETH_DST,MFF_ETH_DST1035,32421
    MFF_ETH_TYPE,MFF_ETH_TYPE1054,32908
    MFF_VLAN_TCI,MFF_VLAN_TCI1084,33854
    MFF_DL_VLAN,MFF_DL_VLAN1100,34219
    MFF_VLAN_VID,MFF_VLAN_VID1118,34729
    MFF_DL_VLAN_PCP,MFF_DL_VLAN_PCP1134,35107
    MFF_VLAN_PCP,MFF_VLAN_PCP1150,35521
    MFF_MPLS_LABEL,MFF_MPLS_LABEL1169,35943
    MFF_MPLS_TC,MFF_MPLS_TC1185,36342
    MFF_MPLS_BOS,MFF_MPLS_BOS1200,36713
    MFF_MPLS_TTL,MFF_MPLS_TTL1215,37059
    MFF_IPV4_SRC,MFF_IPV4_SRC1241,37729
    MFF_IPV4_DST,MFF_IPV4_DST1260,38234
    MFF_IPV6_SRC,MFF_IPV6_SRC1279,38655
    MFF_IPV6_DST,MFF_IPV6_DST1294,39029
    MFF_IPV6_LABEL,MFF_IPV6_LABEL1308,39382
    MFF_IP_PROTO,MFF_IP_PROTO1328,39901
    MFF_IP_DSCP,MFF_IP_DSCP1350,40618
    MFF_IP_DSCP_SHIFTED,MFF_IP_DSCP_SHIFTED1368,41151
    MFF_IP_ECN,MFF_IP_ECN1383,41538
    MFF_IP_TTL,MFF_IP_TTL1398,41869
    MFF_IP_FRAG,MFF_IP_FRAG1412,42159
    MFF_ARP_OP,MFF_ARP_OP1436,42734
    MFF_ARP_SPA,MFF_ARP_SPA1455,43255
    MFF_ARP_TPA,MFF_ARP_TPA1474,43777
    MFF_ARP_SHA,MFF_ARP_SHA1489,44182
    MFF_ARP_THA,MFF_ARP_THA1504,44587
    MFF_TCP_SRC,MFF_TCP_SRC1524,45009
    MFF_TCP_DST,MFF_TCP_DST1540,45388
    MFF_TCP_FLAGS,MFF_TCP_FLAGS1558,45933
    MFF_UDP_SRC,MFF_UDP_SRC1578,46343
    MFF_UDP_DST,MFF_UDP_DST1594,46706
    MFF_SCTP_SRC,MFF_SCTP_SRC1613,47069
    MFF_SCTP_DST,MFF_SCTP_DST1628,47386
    MFF_ICMPV4_TYPE,MFF_ICMPV4_TYPE1648,47798
    MFF_ICMPV4_CODE,MFF_ICMPV4_CODE1664,48161
    MFF_ICMPV6_TYPE,MFF_ICMPV6_TYPE1678,48474
    MFF_ICMPV6_CODE,MFF_ICMPV6_CODE1692,48787
    MFF_ND_TARGET,MFF_ND_TARGET1712,49331
    MFF_ND_SLL,MFF_ND_SLL1726,49699
    MFF_ND_TLL,MFF_ND_TLL1740,50063
    MFF_NSH_FLAGS,MFF_NSH_FLAGS1758,50409
    MFF_NSH_MDTYPE,MFF_NSH_MDTYPE1772,50703
    MFF_NSH_NP,MFF_NSH_NP1786,51002
    MFF_NSH_SPI,MFF_NSH_SPI1800,51343
    MFF_NSH_SI,MFF_NSH_SI1814,51652
    MFF_NSH_C1,MFF_NSH_C11831,52164
    MFF_NSH_C2,MFF_NSH_C21832,52180
    MFF_NSH_C3,MFF_NSH_C31833,52196
    MFF_NSH_C4,MFF_NSH_C41834,52212
    MFF_N_IDSMFF_N_IDS1836,52229
struct mf_bitmap {mf_bitmap1840,52276
    unsigned long bm[BITMAP_N_LONGS(MFF_N_IDS)];bm1841,52295
#define MF_BITMAP_INITIALIZER MF_BITMAP_INITIALIZER1843,52347
#define CASE_MFF_REGS CASE_MFF_REGS1848,52516
#define CASE_MFF_XREGS CASE_MFF_XREGS1860,53052
#define CASE_MFF_XXREGS CASE_MFF_XXREGS1870,53460
mf_is_register(enum mf_field_id id)mf_is_register1877,53698
#define CASE_MFF_TUN_METADATA CASE_MFF_TUN_METADATA1886,54060
enum OVS_PACKED_ENUM mf_prereqs {mf_prereqs1925,56172
    MFP_NONE,MFP_NONE1926,56206
    MFP_ETHERNET,MFP_ETHERNET1929,56248
    MFP_ARP,MFP_ARP1930,56266
    MFP_VLAN_VID,MFP_VLAN_VID1931,56279
    MFP_IPV4,MFP_IPV41932,56297
    MFP_IPV6,MFP_IPV61933,56311
    MFP_IP_ANY,MFP_IP_ANY1934,56325
    MFP_NSH,MFP_NSH1935,56341
    MFP_MPLS,MFP_MPLS1938,56384
    MFP_TCP,                    /* On IPv4 or IPv6. */MFP_TCP1941,56429
    MFP_UDP,                    /* On IPv4 or IPv6. */MFP_UDP1942,56484
    MFP_SCTP,                   /* On IPv4 or IPv6. */MFP_SCTP1943,56539
    MFP_ICMPV4,MFP_ICMPV41944,56594
    MFP_ICMPV6,MFP_ICMPV61945,56610
    MFP_CT_VALID,               /* Implies IPv4 or IPv6. */MFP_CT_VALID1946,56626
    MFP_ND,MFP_ND1949,56720
    MFP_ND_SOLICIT,MFP_ND_SOLICIT1950,56732
    MFP_ND_ADVERTMFP_ND_ADVERT1951,56752
enum OVS_PACKED_ENUM mf_maskable {mf_maskable1957,56876
    MFM_NONE,                   /* No sub-field masking. */MFM_NONE1958,56911
    MFM_FULLY,                  /* Every bit is individually maskable. */MFM_FULLY1959,56971
enum OVS_PACKED_ENUM mf_string {mf_string1963,57095
    MFS_DECIMAL,MFS_DECIMAL1968,57303
    MFS_HEXADECIMAL,MFS_HEXADECIMAL1969,57320
    MFS_CT_STATE,               /* Connection tracking state */MFS_CT_STATE1972,57367
    MFS_ETHERNET,MFS_ETHERNET1973,57431
    MFS_IPV4,MFS_IPV41974,57449
    MFS_IPV6,MFS_IPV61975,57463
    MFS_OFP_PORT,               /* 16-bit OpenFlow 1.0 port number or name. */MFS_OFP_PORT1976,57477
    MFS_OFP_PORT_OXM,           /* 32-bit OpenFlow 1.1+ port number or name. */MFS_OFP_PORT_OXM1977,57556
    MFS_FRAG,                   /* no, yes, first, later, not_later */MFS_FRAG1978,57636
    MFS_TNL_FLAGS,              /* FLOW_TNL_F_* flags */MFS_TNL_FLAGS1979,57707
    MFS_TCP_FLAGS,              /* TCP_* flags */MFS_TCP_FLAGS1980,57764
    MFS_PACKET_TYPE,            /* "(NS,NS_TYPE)" */MFS_PACKET_TYPE1981,57814
struct mf_field {mf_field1984,57871
    enum mf_field_id id;        /* MFF_*. */id1986,57915
    const char *name;           /* Name of this field, e.g. "eth_type". */name1987,57960
    const char *extra_name;     /* Alternate name, e.g. "dl_type", or NULL. */extra_name1988,58035
    unsigned int n_bytes;       /* Width of the field in bytes. */n_bytes2002,58597
    unsigned int n_bits;        /* Number of significant bits in field. */n_bits2003,58664
    bool variable_len;          /* Length is variable, if so width is max. */variable_len2004,58739
    enum mf_maskable maskable;maskable2007,58840
    enum mf_string string;string2008,58871
    enum mf_prereqs prereqs;prereqs2009,58898
    bool writable;              /* May be written by actions? */writable2010,58927
    bool mapped;                /* Variable length mf_field is mapped. */mapped2011,58992
    uint32_t usable_protocols_exact;   /* Matching or setting whole field. */usable_protocols_exact2025,59691
    uint32_t usable_protocols_cidr;    /* Matching a CIDR mask in field. */usable_protocols_cidr2026,59769
    uint32_t usable_protocols_bitwise; /* Matching arbitrary bits in field. */usable_protocols_bitwise2027,59845
    int flow_be32ofs;  /* Field's be32 offset in "struct flow", if prefix treeflow_be32ofs2029,59925
union mf_value {mf_value2034,60124
    uint8_t b[128];b2035,60141
    uint8_t tun_metadata[128];tun_metadata2036,60161
    struct in6_addr ipv6;ipv62037,60192
    struct eth_addr mac;mac2038,60218
    ovs_be128 be128;be1282039,60243
    ovs_be64 be64;be642040,60264
    ovs_be32 be32;be322041,60283
    ovs_be16 be16;be162042,60302
    uint8_t u8;u82043,60321
struct mf_subfield {mf_subfield2052,60582
    const struct mf_field *field;field2053,60603
    unsigned int ofs;           /* Bit offset. */ofs2054,60637
    unsigned int n_bits;        /* Number of bits. */n_bits2055,60687
union mf_subvalue {mf_subvalue2063,61012
    uint8_t u8[128];u82065,61063
    ovs_be16 be16[64];be162066,61084
    ovs_be32 be32[32];be322067,61107
    ovs_be64 be64[16];be642068,61130
    ovs_be128 be128[8];be1282069,61153
        uint8_t dummy_u8[127];dummy_u82073,61268
        uint8_t u8_val;u8_val2074,61299
        ovs_be16 dummy_be16[63];dummy_be162077,61343
        ovs_be16 be16_int;be16_int2078,61376
        ovs_be32 dummy_be32[31];dummy_be322081,61423
        ovs_be32 be32_int;be32_int2082,61456
        ovs_be64 dummy_integer[15];dummy_integer2085,61503
        ovs_be64 integer;integer2086,61539
        ovs_be128 dummy_be128[7];dummy_be1282089,61585
        ovs_be128 be128_int;be128_int2090,61619
        uint8_t dummy_mac[122];dummy_mac2093,61668
        struct eth_addr mac;mac2094,61700
        ovs_be32 dummy_ipv4[31];dummy_ipv42097,61749
        ovs_be32 ipv4;ipv42098,61782
        struct in6_addr dummy_ipv6[7];dummy_ipv62101,61825
        struct in6_addr ipv6;ipv62102,61864
BUILD_ASSERT_DECL(sizeof(union mf_value) == sizeof (union mf_subvalue));sizeof2105,61904
static inline void mf_subvalue_from_value(const struct mf_subfield *sf,mf_subvalue_from_value2117,62502
struct field_array {field_array2129,63005
    struct mf_bitmap used;used2130,63026
    size_t values_size;      /* Number of bytes currently in 'values'. */values_size2131,63053
    uint8_t *values;     /* Dynamically allocated to the correct size. */values2132,63127
mf_from_id(enum mf_field_id id)mf_from_id2140,63395
mf_is_l3_or_higher(const struct mf_field *mf)mf_is_l3_or_higher2160,64107

include/openvswitch/netdev.h,4524
#define OPENVSWITCH_NETDEV_H OPENVSWITCH_NETDEV_H18,661
struct netdev_stats {netdev_stats33,919
    uint64_t rx_packets;        /* Total packets received. */rx_packets34,941
    uint64_t tx_packets;        /* Total packets transmitted. */tx_packets35,1003
    uint64_t rx_bytes;          /* Total bytes received. */rx_bytes36,1068
    uint64_t tx_bytes;          /* Total bytes transmitted. */tx_bytes37,1128
    uint64_t rx_errors;         /* Bad packets received. */rx_errors38,1191
    uint64_t tx_errors;         /* Packet transmit problems. */tx_errors39,1251
    uint64_t rx_dropped;        /* No buffer space. */rx_dropped40,1315
    uint64_t tx_dropped;        /* No buffer space. */tx_dropped41,1370
    uint64_t multicast;         /* Multicast packets received. */multicast42,1425
    uint64_t collisions;collisions43,1491
    uint64_t rx_length_errors;rx_length_errors46,1552
    uint64_t rx_over_errors;    /* Receiver ring buff overflow. */rx_over_errors47,1583
    uint64_t rx_crc_errors;     /* Recved pkt with crc error. */rx_crc_errors48,1650
    uint64_t rx_frame_errors;   /* Recv'd frame alignment error. */rx_frame_errors49,1715
    uint64_t rx_fifo_errors;    /* Recv'r fifo overrun . */rx_fifo_errors50,1783
    uint64_t rx_missed_errors;  /* Receiver missed packet. */rx_missed_errors51,1843
    uint64_t tx_aborted_errors;tx_aborted_errors54,1942
    uint64_t tx_carrier_errors;tx_carrier_errors55,1974
    uint64_t tx_fifo_errors;tx_fifo_errors56,2006
    uint64_t tx_heartbeat_errors;tx_heartbeat_errors57,2035
    uint64_t tx_window_errors;tx_window_errors58,2069
    uint64_t rx_1_to_64_packets;rx_1_to_64_packets61,2149
    uint64_t rx_65_to_127_packets;rx_65_to_127_packets62,2182
    uint64_t rx_128_to_255_packets;rx_128_to_255_packets63,2217
    uint64_t rx_256_to_511_packets;rx_256_to_511_packets64,2253
    uint64_t rx_512_to_1023_packets;rx_512_to_1023_packets65,2289
    uint64_t rx_1024_to_1522_packets;rx_1024_to_1522_packets66,2326
    uint64_t rx_1523_to_max_packets;rx_1523_to_max_packets67,2364
    uint64_t tx_1_to_64_packets;tx_1_to_64_packets69,2402
    uint64_t tx_65_to_127_packets;tx_65_to_127_packets70,2435
    uint64_t tx_128_to_255_packets;tx_128_to_255_packets71,2470
    uint64_t tx_256_to_511_packets;tx_256_to_511_packets72,2506
    uint64_t tx_512_to_1023_packets;tx_512_to_1023_packets73,2542
    uint64_t tx_1024_to_1522_packets;tx_1024_to_1522_packets74,2579
    uint64_t tx_1523_to_max_packets;tx_1523_to_max_packets75,2617
    uint64_t tx_multicast_packets;tx_multicast_packets77,2655
    uint64_t rx_broadcast_packets;rx_broadcast_packets79,2691
    uint64_t tx_broadcast_packets;tx_broadcast_packets80,2726
    uint64_t rx_undersized_errors;rx_undersized_errors82,2762
    uint64_t rx_oversize_errors;rx_oversize_errors83,2797
    uint64_t rx_fragmented_errors;rx_fragmented_errors84,2830
    uint64_t rx_jabber_errors;rx_jabber_errors85,2865
enum netdev_features {netdev_features89,2916
    NETDEV_F_10MB_HD =    1 << 0,  /* 10 Mb half-duplex rate support. */NETDEV_F_10MB_HD90,2939
    NETDEV_F_10MB_FD =    1 << 1,  /* 10 Mb full-duplex rate support. */NETDEV_F_10MB_FD91,3012
    NETDEV_F_100MB_HD =   1 << 2,  /* 100 Mb half-duplex rate support. */NETDEV_F_100MB_HD92,3085
    NETDEV_F_100MB_FD =   1 << 3,  /* 100 Mb full-duplex rate support. */NETDEV_F_100MB_FD93,3159
    NETDEV_F_1GB_HD =     1 << 4,  /* 1 Gb half-duplex rate support. */NETDEV_F_1GB_HD94,3233
    NETDEV_F_1GB_FD =     1 << 5,  /* 1 Gb full-duplex rate support. */NETDEV_F_1GB_FD95,3305
    NETDEV_F_10GB_FD =    1 << 6,  /* 10 Gb full-duplex rate support. */NETDEV_F_10GB_FD96,3377
    NETDEV_F_40GB_FD =    1 << 7,  /* 40 Gb full-duplex rate support. */NETDEV_F_40GB_FD97,3450
    NETDEV_F_100GB_FD =   1 << 8,  /* 100 Gb full-duplex rate support. */NETDEV_F_100GB_FD98,3523
    NETDEV_F_1TB_FD =     1 << 9,  /* 1 Tb full-duplex rate support. */NETDEV_F_1TB_FD99,3597
    NETDEV_F_OTHER =      1 << 10, /* Other rate, not in the list. */NETDEV_F_OTHER100,3669
    NETDEV_F_COPPER =     1 << 11, /* Copper medium. */NETDEV_F_COPPER101,3739
    NETDEV_F_FIBER =      1 << 12, /* Fiber medium. */NETDEV_F_FIBER102,3795
    NETDEV_F_AUTONEG =    1 << 13, /* Auto-negotiation. */NETDEV_F_AUTONEG103,3850
    NETDEV_F_PAUSE =      1 << 14, /* Pause. */NETDEV_F_PAUSE104,3909
    NETDEV_F_PAUSE_ASYM = 1 << 15, /* Asymmetric pause. */NETDEV_F_PAUSE_ASYM105,3957

include/openvswitch/nsh.h,1794
#define __OPENVSWITCH_NSH_H __OPENVSWITCH_NSH_H2,28
struct nsh_md1_ctx {nsh_md1_ctx53,2054
    ovs_16aligned_be32 c[4];c54,2075
struct nsh_md2_tlv {nsh_md2_tlv57,2108
    ovs_be16 md_class;md_class58,2129
    uint8_t type;type59,2152
    uint8_t length;length60,2170
struct nsh_hdr {nsh_hdr64,2238
    ovs_be16 ver_flags_len;ver_flags_len65,2255
    uint8_t md_type;md_type66,2283
    uint8_t next_proto;next_proto67,2304
    ovs_16aligned_be32 path_hdr;path_hdr68,2328
        struct nsh_md1_ctx md1;md170,2373
        struct nsh_md2_tlv md2;md271,2405
#define NSH_VER_MASK NSH_VER_MASK76,2481
#define NSH_VER_SHIFT NSH_VER_SHIFT77,2515
#define NSH_FLAGS_MASK NSH_FLAGS_MASK78,2545
#define NSH_FLAGS_SHIFT NSH_FLAGS_SHIFT79,2579
#define NSH_LEN_MASK NSH_LEN_MASK80,2608
#define NSH_LEN_SHIFT NSH_LEN_SHIFT81,2642
#define NSH_SPI_MASK NSH_SPI_MASK83,2672
#define NSH_SPI_SHIFT NSH_SPI_SHIFT84,2710
#define NSH_SI_MASK NSH_SI_MASK85,2739
#define NSH_SI_SHIFT NSH_SI_SHIFT86,2777
#define NSH_DST_PORT NSH_DST_PORT88,2807
#define ETH_P_NSH ETH_P_NSH89,2873
#define NSH_P_IPV4 NSH_P_IPV492,2969
#define NSH_P_IPV6 NSH_P_IPV693,3000
#define NSH_P_ETHERNET NSH_P_ETHERNET94,3031
#define NSH_P_NSH NSH_P_NSH95,3062
#define NSH_P_MPLS NSH_P_MPLS96,3093
#define NSH_M_TYPE1 NSH_M_TYPE199,3149
#define NSH_M_TYPE2 NSH_M_TYPE2100,3178
#define NSH_M_EXP1 NSH_M_EXP1101,3207
#define NSH_M_EXP2 NSH_M_EXP2102,3236
#define NSH_M_TYPE1_MDLEN NSH_M_TYPE1_MDLEN105,3293
#define NSH_BASE_HDR_LEN NSH_BASE_HDR_LEN108,3352
#define NSH_M_TYPE1_LEN NSH_M_TYPE1_LEN111,3416
nsh_hdr_len(const struct nsh_hdr *nsh)nsh_hdr_len114,3469
nsh_md1_ctx(struct nsh_hdr *nsh)nsh_md1_ctx120,3627
nsh_md2_ctx(struct nsh_hdr *nsh)nsh_md2_ctx126,3722

include/openvswitch/ofp-actions.h,14141
#define OPENVSWITCH_OFP_ACTIONS_H OPENVSWITCH_OFP_ACTIONS_H18,666
#define OFPACTS OFPACTS62,2041
enum OVS_PACKED_ENUM ofpact_type {ofpact_type140,7739
#define OFPACT(OFPACT141,7774
    OFPACTSOFPACTS142,7832
#undef OFPACTOFPACT143,7844
#define OFPACT(OFPACT148,7927
    N_OFPACTS = OFPACTSN_OFPACTS149,7974
#undef OFPACTOFPACT150,7998
struct ofpact {ofpact182,9468
    enum ofpact_type type;      /* OFPACT_*. */type187,9709
    uint8_t raw;                /* Original type when added, if any. */raw192,9818
    uint16_t len;               /* Length of the action, in bytes, includinglen193,9890
#define OFPACT_ALIGNTO OFPACT_ALIGNTO199,10107
#define OFPACT_ALIGN(OFPACT_ALIGN200,10132
#define OFPACT_PADDED_MEMBERS(OFPACT_PADDED_MEMBERS201,10190
ofpact_next(const struct ofpact *ofpact)ofpact_next205,10345
ofpact_end(const struct ofpact *ofpacts, size_t ofpacts_len)ofpact_end214,10597
ofpact_find_type_flattened(const struct ofpact *a, enum ofpact_type type,ofpact_find_type_flattened220,10776
#define OFPACT_FIND_TYPE_FLATTENED(OFPACT_FIND_TYPE_FLATTENED232,11061
#define OFPACT_FOR_EACH(OFPACT_FOR_EACH238,11333
#define OFPACT_FOR_EACH_FLATTENED(OFPACT_FOR_EACH_FLATTENED247,11716
#define OFPACT_FOR_EACH_TYPE_FLATTENED(OFPACT_FOR_EACH_TYPE_FLATTENED251,11908
struct ofpact_null {ofpact_null268,12725
    struct ofpact ofpact;ofpact269,12746
struct ofpact_output {ofpact_output275,12828
    struct ofpact ofpact;ofpact276,12851
    ofp_port_t port;            /* Output port. */port277,12877
    uint16_t max_len;           /* Max send len, for port OFPP_CONTROLLER. */max_len278,12928
struct ofpact_controller {ofpact_controller284,13068
    uint8_t userdata[0];userdata300,13747
struct ofpact_enqueue {ofpact_enqueue306,13830
    struct ofpact ofpact;ofpact307,13854
    ofp_port_t port;port308,13880
    uint32_t queue;queue309,13901
struct ofpact_output_reg {ofpact_output_reg315,13983
    struct ofpact ofpact;ofpact316,14010
    uint16_t max_len;max_len317,14036
    struct mf_subfield src;src318,14058
struct ofpact_output_trunc {ofpact_output_trunc324,14152
    struct ofpact ofpact;ofpact325,14181
    ofp_port_t port;            /* Output port. */port326,14207
    uint32_t max_len;           /* Max send len. */max_len327,14258
enum nx_bd_algorithm {nx_bd_algorithm334,14485
    NX_BD_ALG_ACTIVE_BACKUP = 0,NX_BD_ALG_ACTIVE_BACKUP338,14608
    NX_BD_ALG_HRW = 1NX_BD_ALG_HRW350,14998
struct ofpact_bundle {ofpact_bundle356,15074
    struct ofpact ofpact;ofpact357,15097
    enum nx_bd_algorithm algorithm;algorithm360,15181
    enum nx_hash_fields fields;fields363,15257
    uint16_t basis;             /* Universal hash parameter. */basis364,15289
    struct mf_subfield dst;dst366,15354
    unsigned int n_slaves;n_slaves369,15412
    ofp_port_t slaves[];slaves370,15439
struct ofpact_vlan_vid {ofpact_vlan_vid381,15755
    struct ofpact ofpact;ofpact382,15780
    uint16_t vlan_vid;          /* VLAN VID in low 12 bits, 0 in other bits. */vlan_vid383,15806
    bool push_vlan_if_needed;   /* OF 1.0 semantics if true. */push_vlan_if_needed384,15886
    bool flow_has_vlan;         /* VLAN present at action validation time? */flow_has_vlan385,15950
struct ofpact_vlan_pcp {ofpact_vlan_pcp396,16319
    struct ofpact ofpact;ofpact397,16344
    uint8_t vlan_pcp;           /* VLAN PCP in low 3 bits, 0 in other bits. */vlan_pcp398,16370
    bool push_vlan_if_needed;   /* OF 1.0 semantics if true. */push_vlan_if_needed399,16449
    bool flow_has_vlan;         /* VLAN present at action validation time? */flow_has_vlan400,16513
struct ofpact_push_vlan {ofpact_push_vlan406,16653
    struct ofpact ofpact;ofpact407,16679
    ovs_be16 ethertype;ethertype408,16705
struct ofpact_mac {ofpact_mac414,16834
    struct ofpact ofpact;ofpact415,16854
    struct eth_addr mac;mac416,16880
struct ofpact_ipv4 {ofpact_ipv4422,17012
    struct ofpact ofpact;ofpact423,17033
    ovs_be32 ipv4;ipv4424,17059
struct ofpact_dscp {ofpact_dscp430,17143
    struct ofpact ofpact;ofpact431,17164
    uint8_t dscp;               /* DSCP in high 6 bits, rest ignored. */dscp432,17190
struct ofpact_ecn {ofpact_ecn438,17327
    struct ofpact ofpact;ofpact439,17347
    uint8_t ecn;               /* ECN in low 2 bits, rest ignored. */ecn440,17373
struct ofpact_ip_ttl {ofpact_ip_ttl446,17507
    struct ofpact ofpact;ofpact447,17530
    uint8_t ttl;ttl448,17556
struct ofpact_l4_port {ofpact_l4_port454,17686
    struct ofpact ofpact;ofpact455,17710
    uint16_t port;              /* TCP, UDP or SCTP port number. */port456,17736
    uint8_t  flow_ip_proto;     /* IP proto from corresponding match, or 0 */flow_ip_proto457,17804
struct ofpact_reg_move {ofpact_reg_move463,17940
    struct ofpact ofpact;ofpact464,17965
    struct mf_subfield src;src465,17991
    struct mf_subfield dst;dst466,18019
struct ofpact_stack {ofpact_stack472,18129
    struct ofpact ofpact;ofpact473,18151
    struct mf_subfield subfield;subfield474,18177
struct ofpact_set_field {ofpact_set_field480,18291
    union mf_value value[];  /* Significant value bytes followed byvalue486,18495
                  == sizeof(struct ofpact_set_field));sizeof492,18785
#define ofpact_set_field_mask(ofpact_set_field_mask495,18893
struct ofpact_push_mpls {ofpact_push_mpls502,19173
    struct ofpact ofpact;ofpact503,19199
    ovs_be16 ethertype;ethertype504,19225
struct ofpact_pop_mpls {ofpact_pop_mpls510,19325
    struct ofpact ofpact;ofpact511,19350
    ovs_be16 ethertype;ethertype512,19376
struct ofpact_tunnel {ofpact_tunnel518,19482
    struct ofpact ofpact;ofpact519,19505
    uint64_t tun_id;tun_id520,19531
struct ofpact_queue {ofpact_queue526,19612
    struct ofpact ofpact;ofpact527,19634
    uint32_t queue_id;queue_id528,19660
struct ofpact_fin_timeout {ofpact_fin_timeout534,19747
    struct ofpact ofpact;ofpact535,19775
    uint16_t fin_idle_timeout;fin_idle_timeout536,19801
    uint16_t fin_hard_timeout;fin_hard_timeout537,19832
struct ofpact_metadata {ofpact_metadata543,19933
    struct ofpact ofpact;ofpact544,19958
    ovs_be64 metadata;metadata545,19984
    ovs_be64 mask;mask546,20007
struct ofpact_meter {ofpact_meter552,20080
    struct ofpact ofpact;ofpact553,20102
    uint32_t meter_id;meter_id554,20128
    uint32_t provider_meter_id;provider_meter_id555,20151
struct ofpact_nest {ofpact_nest561,20280
    struct ofpact actions[];actions563,20351
                  == sizeof(struct ofpact_nest));sizeof567,20519
ofpact_nest_get_action_len(const struct ofpact_nest *on)ofpact_nest_get_action_len570,20591
enum nx_conntrack_flags {nx_conntrack_flags583,21115
    NX_CT_F_COMMIT = 1 << 0,NX_CT_F_COMMIT584,21141
    NX_CT_F_FORCE  = 1 << 1,NX_CT_F_FORCE585,21170
#define NX_CT_RECIRC_NONE NX_CT_RECIRC_NONE590,21332
#define IPPORT_FTP IPPORT_FTP593,21394
#define IPPORT_TFTP IPPORT_TFTP597,21451
struct ofpact_conntrack {ofpact_conntrack603,21525
    struct ofpact actions[0];actions612,21755
                  == sizeof(struct ofpact_conntrack));sizeof617,21952
ofpact_ct_get_action_len(const struct ofpact_conntrack *oc)ofpact_ct_get_action_len620,22029
enum nx_nat_flags {nx_nat_flags630,22342
    NX_NAT_F_SRC          = 1 << 0, /* Mutually exclusive with NX_NAT_F_DST. */NX_NAT_F_SRC631,22362
    NX_NAT_F_DST          = 1 << 1,NX_NAT_F_DST632,22442
    NX_NAT_F_PERSISTENT   = 1 << 2,NX_NAT_F_PERSISTENT633,22478
    NX_NAT_F_PROTO_HASH   = 1 << 3, /* Mutually exclusive with PROTO_RANDOM. */NX_NAT_F_PROTO_HASH634,22514
    NX_NAT_F_PROTO_RANDOM = 1 << 4,NX_NAT_F_PROTO_RANDOM635,22594
    NX_NAT_F_MASK = (NX_NAT_F_SRC | NX_NAT_F_DST | NX_NAT_F_PERSISTENT | NX_NAT_F_PROTO_HASH | NX_NAT_F_PROTO_RANDOM)NX_NAT_F_MASK636,22630
struct ofpact_nat {ofpact_nat642,22796
    struct ofpact ofpact;ofpact643,22816
    uint8_t range_af; /* AF_UNSPEC, AF_INET, or AF_INET6 */range_af644,22842
    uint16_t flags;  /* NX_NAT_F_* */flags645,22902
            uint16_t min;min648,22970
            uint16_t max;max649,22996
        } proto;proto650,23022
                ovs_be32 min;min653,23076
                ovs_be32 max;max654,23106
            } ipv4;ipv4655,23136
                struct in6_addr min;min657,23177
                struct in6_addr max;max658,23214
            } ipv6;ipv6659,23251
        } addr;addr660,23271
    } range;range661,23287
struct ofpact_resubmit {ofpact_resubmit668,23406
    struct ofpact ofpact;ofpact669,23431
    ofp_port_t in_port;in_port670,23457
    uint8_t table_id;table_id671,23481
    bool with_ct_orig;   /* Resubmit with Conntrack original direction tuplewith_ct_orig672,23503
enum nx_learn_flags {nx_learn_flags707,25263
    NX_LEARN_F_SEND_FLOW_REM = 1 << 0,NX_LEARN_F_SEND_FLOW_REM708,25285
    NX_LEARN_F_DELETE_LEARNED = 1 << 1,NX_LEARN_F_DELETE_LEARNED709,25324
    NX_LEARN_F_WRITE_RESULT = 1 << 2,NX_LEARN_F_WRITE_RESULT710,25364
#define NX_LEARN_N_BITS_MASK NX_LEARN_N_BITS_MASK713,25406
#define NX_LEARN_SRC_FIELD NX_LEARN_SRC_FIELD715,25445
#define NX_LEARN_SRC_IMMEDIATE NX_LEARN_SRC_IMMEDIATE716,25509
#define NX_LEARN_SRC_MASK NX_LEARN_SRC_MASK717,25583
#define NX_LEARN_DST_MATCH NX_LEARN_DST_MATCH719,25625
#define NX_LEARN_DST_LOAD NX_LEARN_DST_LOAD720,25693
#define NX_LEARN_DST_OUTPUT NX_LEARN_DST_OUTPUT721,25767
#define NX_LEARN_DST_RESERVED NX_LEARN_DST_RESERVED722,25839
#define NX_LEARN_DST_MASK NX_LEARN_DST_MASK723,25903
struct ofpact_learn_spec {ofpact_learn_spec726,25987
ofpact_learn_spec_imm(const struct ofpact_learn_spec *spec)ofpact_learn_spec_imm743,26800
ofpact_learn_spec_next(const struct ofpact_learn_spec *spec)ofpact_learn_spec_next749,26933
struct ofpact_learn {ofpact_learn762,27332
    struct ofpact_learn_spec specs[];specs783,28409
ofpact_learn_spec_end(const struct ofpact_learn *learn)ofpact_learn_spec_end787,28498
#define OFPACT_LEARN_SPEC_FOR_EACH(OFPACT_LEARN_SPEC_FOR_EACH793,28671
enum nx_mp_algorithm {nx_mp_algorithm801,28978
    NX_MP_ALG_MODULO_N = 0,NX_MP_ALG_MODULO_N808,29210
    NX_MP_ALG_HASH_THRESHOLD = 1,NX_MP_ALG_HASH_THRESHOLD815,29431
    NX_MP_ALG_HRW = 2,NX_MP_ALG_HRW827,29914
    NX_MP_ALG_ITER_HASH = 3,NX_MP_ALG_ITER_HASH849,30621
struct ofpact_conjunction {ofpact_conjunction855,30714
    struct ofpact ofpact;ofpact856,30742
    uint8_t clause;clause857,30768
    uint8_t n_clauses;n_clauses858,30788
    uint32_t id;id859,30811
struct ofpact_multipath {ofpact_multipath865,30888
    struct ofpact ofpact;ofpact866,30914
    enum nx_hash_fields fields;fields869,30980
    uint16_t basis;             /* Universal hash parameter. */basis870,31012
    enum nx_mp_algorithm algorithm;algorithm873,31143
    uint16_t max_link;          /* Number of output links, minus 1. */max_link874,31179
    uint32_t arg;               /* Algorithm-specific argument. */arg875,31250
    struct mf_subfield dst;dst878,31355
struct ofpact_note {ofpact_note884,31433
    struct ofpact ofpact;ofpact885,31454
    size_t length;length886,31480
    uint8_t data[];data887,31499
enum nx_action_sample_direction {nx_action_sample_direction891,31559
    NX_ACTION_SAMPLE_DEFAULT,NX_ACTION_SAMPLE_DEFAULT896,31879
    NX_ACTION_SAMPLE_INGRESS,NX_ACTION_SAMPLE_INGRESS900,32069
    NX_ACTION_SAMPLE_EGRESSNX_ACTION_SAMPLE_EGRESS901,32099
struct ofpact_sample {ofpact_sample907,32215
    struct ofpact ofpact;ofpact908,32238
    uint16_t probability;  /* Always positive. */probability909,32264
    uint32_t collector_set_id;collector_set_id910,32314
    uint32_t obs_domain_id;obs_domain_id911,32345
    uint32_t obs_point_id;obs_point_id912,32373
    ofp_port_t sampling_port;sampling_port913,32400
    enum nx_action_sample_direction direction;direction914,32430
struct ofpact_cnt_ids {ofpact_cnt_ids920,32579
    struct ofpact ofpact;ofpact921,32603
    unsigned int n_controllers;n_controllers924,32656
    uint16_t cnt_ids[];cnt_ids925,32688
struct ofpact_mpls_label {ofpact_mpls_label931,32808
    struct ofpact ofpact;ofpact932,32835
    ovs_be32 label;label934,32862
struct ofpact_mpls_tc {ofpact_mpls_tc940,32969
    struct ofpact ofpact;ofpact941,32993
    uint8_t tc;tc943,33020
struct ofpact_mpls_ttl {ofpact_mpls_ttl949,33126
    struct ofpact ofpact;ofpact950,33151
    uint8_t ttl;ttl952,33178
struct ofpact_goto_table {ofpact_goto_table958,33257
    struct ofpact ofpact;ofpact959,33284
    uint8_t table_id;table_id960,33310
struct ofpact_group {ofpact_group966,33386
    struct ofpact ofpact;ofpact967,33408
    uint32_t group_id;group_id968,33434
struct ofpact_unroll_xlate {ofpact_unroll_xlate974,33516
    struct ofpact ofpact;ofpact975,33545
    uint8_t  rule_table_id;       /* 0xFF if none. */rule_table_id978,33647
    ovs_be64 rule_cookie;         /* OVS_BE64_MAX if none. */rule_cookie979,33701
struct ofpact_encap {ofpact_encap986,33816
    struct ofpact ofpact;ofpact987,33838
    ovs_be32 new_pkt_type;        /* Packet type of the header to add. */new_pkt_type988,33864
    uint16_t hdr_size;            /* New header size in bytes. */hdr_size989,33938
    uint16_t n_props;             /* Number of encap properties. */n_props990,34004
    struct ofpact_ed_prop props[]; /* Properties in internal format. */props991,34072
struct ofpact_decap {ofpact_decap997,34196
    struct ofpact ofpact;ofpact998,34218
    ovs_be32 new_pkt_type;new_pkt_type1006,34461
#define OFPACT(OFPACT1120,40273
#undef OFPACTOFPACT1164,43396
#define OVS_INSTRUCTIONS OVS_INSTRUCTIONS1184,44427
enum ovs_instruction_type {ovs_instruction_type1209,45884
#define DEFINE_INST(DEFINE_INST1210,45912
    OVS_INSTRUCTIONSOVS_INSTRUCTIONS1211,45980
#undef DEFINE_INSTDEFINE_INST1212,46001
#define DEFINE_INST(DEFINE_INST1216,46031
    N_OVS_INSTRUCTIONS = OVS_INSTRUCTIONSN_OVS_INSTRUCTIONS1217,46087
#undef DEFINE_INSTDEFINE_INST1218,46129

include/openvswitch/ofp-ed-props.h,2446
#define OPENVSWITCH_OFP_ED_PROPS_H OPENVSWITCH_OFP_ED_PROPS_H18,636
enum ofp_ed_prop_class {ofp_ed_prop_class28,815
    OFPPPC_BASIC = 0,            /* ONF Basic class. */OFPPPC_BASIC29,840
    OFPPPC_MPLS  = 1,            /* MPLS property class. */OFPPPC_MPLS30,896
    OFPPPC_GRE   = 2,            /* GRE property class. */OFPPPC_GRE31,956
    OFPPPC_GTP   = 3,            /* GTP property class. */OFPPPC_GTP32,1015
    OFPPPC_NSH   = 4,            /* NSH property class */OFPPPC_NSH33,1074
    OFPPPC_EXPERIMENTER=0xffffOFPPPC_EXPERIMENTER40,1285
enum ofp_ed_nsh_prop_type {ofp_ed_nsh_prop_type43,1320
    OFPPPT_PROP_NSH_NONE = 0,    /* unused */OFPPPT_PROP_NSH_NONE44,1348
    OFPPPT_PROP_NSH_MDTYPE = 1,  /* property MDTYPE in NSH */OFPPPT_PROP_NSH_MDTYPE45,1394
    OFPPPT_PROP_NSH_TLV = 2,     /* property TLV in NSH */OFPPPT_PROP_NSH_TLV46,1456
struct ofp_ed_prop_header {ofp_ed_prop_header53,1630
    ovs_be16 prop_class;prop_class54,1658
    uint8_t type;type55,1683
    uint8_t len;len56,1701
struct ofp_ed_prop_nsh_md_type {ofp_ed_prop_nsh_md_type59,1722
    struct ofp_ed_prop_header header;header60,1755
    uint8_t md_type;         /* NSH MD type .*/md_type61,1793
    uint8_t pad[3];          /* Padding to 8 bytes. */pad62,1841
struct ofp_ed_prop_nsh_tlv {ofp_ed_prop_nsh_tlv65,1900
    struct ofp_ed_prop_header header;header66,1929
    ovs_be16 tlv_class;      /* Metadata class. */tlv_class67,1967
    uint8_t tlv_type;        /* Metadata type including C bit. */tlv_type68,2018
    uint8_t tlv_len;         /* Metadata value length (0-127). */tlv_len69,2084
    uint8_t data[0];data72,2228
struct ofpact_ed_prop {ofpact_ed_prop78,2313
    uint16_t prop_class;prop_class79,2337
    uint8_t type;type80,2362
    uint8_t len;len81,2380
struct ofpact_ed_prop_nsh_md_type {ofpact_ed_prop_nsh_md_type84,2401
    struct ofpact_ed_prop header;header85,2437
    uint8_t md_type;         /* NSH MD type .*/md_type86,2471
    uint8_t pad[3];          /* Padding to 8 bytes. */pad87,2519
struct ofpact_ed_prop_nsh_tlv {ofpact_ed_prop_nsh_tlv90,2578
    struct ofpact_ed_prop header;header91,2610
    ovs_be16 tlv_class;      /* Metadata class. */tlv_class92,2644
    uint8_t tlv_type;        /* Metadata type including C bit. */tlv_type93,2695
    uint8_t tlv_len;         /* Metadata value length (0-127). */tlv_len94,2761
    uint8_t data[0];data97,2905

include/openvswitch/ofp-errors.h,11954
#define OPENVSWITCH_OFP_ERRORS_H OPENVSWITCH_OFP_ERRORS_H18,640
#define OFPERR_OFS OFPERR_OFS50,1418
enum ofperr {ofperr107,4472
    OFPERR_OFPHFC_INCOMPATIBLE = OFPERR_OFS,OFPERR_OFPHFC_INCOMPATIBLE124,4942
    OFPERR_OFPHFC_EPERM,OFPERR_OFPHFC_EPERM127,5031
    OFPERR_OFPBRC_BAD_VERSION,OFPERR_OFPBRC_BAD_VERSION134,5206
    OFPERR_OFPBRC_BAD_TYPE,OFPERR_OFPBRC_BAD_TYPE137,5293
    OFPERR_OFPBRC_BAD_STAT,OFPERR_OFPBRC_BAD_STAT140,5380
    OFPERR_OFPBRC_BAD_VENDOR,OFPERR_OFPBRC_BAD_VENDOR144,5502
    OFPERR_OFPBRC_BAD_SUBTYPE,OFPERR_OFPBRC_BAD_SUBTYPE147,5587
    OFPERR_OFPBRC_EPERM,OFPERR_OFPBRC_EPERM150,5662
    OFPERR_OFPBRC_BAD_LEN,OFPERR_OFPBRC_BAD_LEN153,5743
    OFPERR_OFPBRC_BUFFER_EMPTY,OFPERR_OFPBRC_BUFFER_EMPTY156,5835
    OFPERR_OFPBRC_BUFFER_UNKNOWN,OFPERR_OFPBRC_BUFFER_UNKNOWN159,5925
    OFPERR_OFPBRC_BAD_TABLE_ID,OFPERR_OFPBRC_BAD_TABLE_ID165,6238
    OFPERR_OFPBRC_IS_SLAVE,OFPERR_OFPBRC_IS_SLAVE168,6348
    OFPERR_OFPBRC_BAD_PORT,OFPERR_OFPBRC_BAD_PORT174,6632
    OFPERR_OFPBRC_BAD_PACKET,OFPERR_OFPBRC_BAD_PACKET177,6716
    OFPERR_OFPBRC_MULTIPART_BUFFER_OVERFLOW,OFPERR_OFPBRC_MULTIPART_BUFFER_OVERFLOW180,6822
    OFPERR_OFPBRC_PIPELINE_FIELDS_ONLY,OFPERR_OFPBRC_PIPELINE_FIELDS_ONLY183,6941
    OFPERR_NXBRC_NXM_INVALID,OFPERR_NXBRC_NXM_INVALID186,7046
    OFPERR_NXBRC_NXM_BAD_TYPE,OFPERR_NXBRC_NXM_BAD_TYPE191,7249
    OFPERR_NXBRC_MUST_BE_ZERO,OFPERR_NXBRC_MUST_BE_ZERO194,7359
    OFPERR_NXBRC_BAD_REASON,OFPERR_NXBRC_BAD_REASON198,7493
    OFPERR_NXBRC_FM_BAD_EVENT,OFPERR_NXBRC_FM_BAD_EVENT203,7703
    OFPERR_NXBRC_UNENCODABLE_ERROR,OFPERR_NXBRC_UNENCODABLE_ERROR207,7855
    OFPERR_OFPBAC_BAD_TYPE,OFPERR_OFPBAC_BAD_TYPE214,8025
    OFPERR_OFPBAC_BAD_LEN,OFPERR_OFPBAC_BAD_LEN217,8105
    OFPERR_OFPBAC_BAD_VENDOR,OFPERR_OFPBAC_BAD_VENDOR220,8192
    OFPERR_OFPBAC_BAD_VENDOR_TYPE,OFPERR_OFPBAC_BAD_VENDOR_TYPE223,8288
    OFPERR_OFPBAC_BAD_OUT_PORT,OFPERR_OFPBAC_BAD_OUT_PORT226,8380
    OFPERR_OFPBAC_BAD_ARGUMENT,OFPERR_OFPBAC_BAD_ARGUMENT229,8458
    OFPERR_OFPBAC_EPERM,OFPERR_OFPBAC_EPERM232,8534
    OFPERR_OFPBAC_TOO_MANY,OFPERR_OFPBAC_TOO_MANY235,8616
    OFPERR_OFPBAC_BAD_QUEUE,OFPERR_OFPBAC_BAD_QUEUE238,8702
    OFPERR_OFPBAC_BAD_OUT_GROUP,OFPERR_OFPBAC_BAD_OUT_GROUP241,8792
    OFPERR_OFPBAC_MATCH_INCONSISTENT,OFPERR_OFPBAC_MATCH_INCONSISTENT245,8956
    OFPERR_OFPBAC_UNSUPPORTED_ORDER,OFPERR_OFPBAC_UNSUPPORTED_ORDER249,9107
    OFPERR_OFPBAC_BAD_TAG,OFPERR_OFPBAC_BAD_TAG252,9209
    OFPERR_OFPBAC_BAD_SET_TYPE,OFPERR_OFPBAC_BAD_SET_TYPE256,9340
    OFPERR_OFPBAC_BAD_SET_LEN,OFPERR_OFPBAC_BAD_SET_LEN260,9504
    OFPERR_OFPBAC_BAD_SET_ARGUMENT,OFPERR_OFPBAC_BAD_SET_ARGUMENT264,9673
    OFPERR_OFPBAC_BAD_SET_MASK,OFPERR_OFPBAC_BAD_SET_MASK268,9813
    OFPERR_NXBAC_MUST_BE_ZERO,OFPERR_NXBAC_MUST_BE_ZERO272,9942
    OFPERR_NXBAC_BAD_CONJUNCTION,OFPERR_NXBAC_BAD_CONJUNCTION277,10142
    OFPERR_NXBAC_BAD_HEADER_TYPE,OFPERR_NXBAC_BAD_HEADER_TYPE280,10243
    OFPERR_NXBAC_UNKNOWN_ED_PROP,OFPERR_NXBAC_UNKNOWN_ED_PROP283,10339
    OFPERR_NXBAC_BAD_ED_PROP,OFPERR_NXBAC_BAD_ED_PROP286,10431
    OFPERR_OFPBIC_UNKNOWN_INST,OFPERR_OFPBIC_UNKNOWN_INST293,10610
    OFPERR_OFPBIC_UNSUP_INST,OFPERR_OFPBIC_UNSUP_INST297,10738
    OFPERR_OFPBIC_BAD_TABLE_ID,OFPERR_OFPBIC_BAD_TABLE_ID300,10821
    OFPERR_OFPBIC_UNSUP_METADATA,OFPERR_OFPBIC_UNSUP_METADATA303,10918
    OFPERR_OFPBIC_UNSUP_METADATA_MASK,OFPERR_OFPBIC_UNSUP_METADATA_MASK306,11022
    OFPERR_OFPBIC_BAD_EXPERIMENTER,OFPERR_OFPBIC_BAD_EXPERIMENTER309,11121
    OFPERR_OFPBIC_BAD_EXP_TYPE,OFPERR_OFPBIC_BAD_EXP_TYPE312,11235
    OFPERR_OFPBIC_BAD_LEN,OFPERR_OFPBIC_BAD_LEN315,11324
    OFPERR_OFPBIC_EPERM,OFPERR_OFPBIC_EPERM318,11395
    OFPERR_OFPBIC_DUP_INST,OFPERR_OFPBIC_DUP_INST321,11500
    OFPERR_OFPBMC_BAD_TYPE,OFPERR_OFPBMC_BAD_TYPE328,11684
    OFPERR_OFPBMC_BAD_LEN,OFPERR_OFPBMC_BAD_LEN331,11762
    OFPERR_OFPBMC_BAD_TAG,OFPERR_OFPBMC_BAD_TAG334,11851
    OFPERR_OFPBMC_BAD_DL_ADDR_MASK,OFPERR_OFPBMC_BAD_DL_ADDR_MASK338,12000
    OFPERR_OFPBMC_BAD_NW_ADDR_MASK,OFPERR_OFPBMC_BAD_NW_ADDR_MASK342,12156
    OFPERR_OFPBMC_BAD_WILDCARDS,OFPERR_OFPBMC_BAD_WILDCARDS346,12283
    OFPERR_OFPBMC_BAD_FIELD,OFPERR_OFPBMC_BAD_FIELD349,12387
    OFPERR_OFPBMC_BAD_VALUE,OFPERR_OFPBMC_BAD_VALUE353,12498
    OFPERR_OFPBMC_BAD_MASK,OFPERR_OFPBMC_BAD_MASK357,12657
    OFPERR_OFPBMC_BAD_PREREQ,OFPERR_OFPBMC_BAD_PREREQ360,12756
    OFPERR_OFPBMC_DUP_FIELD,OFPERR_OFPBMC_DUP_FIELD363,12859
    OFPERR_OFPBMC_EPERM,OFPERR_OFPBMC_EPERM366,12933
    OFPERR_OFPFMFC_UNKNOWN,OFPERR_OFPFMFC_UNKNOWN373,13105
    OFPERR_OFPFMFC_TABLE_FULL,OFPERR_OFPFMFC_TABLE_FULL376,13211
    OFPERR_OFPFMFC_BAD_TABLE_ID,OFPERR_OFPFMFC_BAD_TABLE_ID379,13288
    OFPERR_OFPFMFC_OVERLAP,OFPERR_OFPFMFC_OVERLAP383,13428
    OFPERR_OFPFMFC_EPERM,OFPERR_OFPFMFC_EPERM386,13512
    OFPERR_OFPFMFC_BAD_TIMEOUT,OFPERR_OFPFMFC_BAD_TIMEOUT390,13627
    OFPERR_OFPFMFC_BAD_EMERG_TIMEOUT,OFPERR_OFPFMFC_BAD_EMERG_TIMEOUT393,13737
    OFPERR_OFPFMFC_BAD_COMMAND,OFPERR_OFPFMFC_BAD_COMMAND396,13844
    OFPERR_OFPFMFC_BAD_FLAGS,OFPERR_OFPFMFC_BAD_FLAGS400,13966
    OFPERR_OFPFMFC_UNSUPPORTED,OFPERR_OFPFMFC_UNSUPPORTED404,14092
    OFPERR_NXFMFC_HARDWARE,OFPERR_NXFMFC_HARDWARE407,14190
    OFPERR_NXFMFC_BAD_TABLE_ID,OFPERR_NXFMFC_BAD_TABLE_ID412,14411
    OFPERR_NXFMFC_INVALID_TLV_FIELD,OFPERR_NXFMFC_INVALID_TLV_FIELD416,14565
    OFPERR_OFPGMFC_GROUP_EXISTS,OFPERR_OFPGMFC_GROUP_EXISTS424,14823
    OFPERR_OFPGMFC_INVALID_GROUP,OFPERR_OFPGMFC_INVALID_GROUP427,14933
    OFPERR_OFPGMFC_WEIGHT_UNSUPPORTED,OFPERR_OFPGMFC_WEIGHT_UNSUPPORTED431,15064
    OFPERR_OFPGMFC_OUT_OF_GROUPS,OFPERR_OFPGMFC_OUT_OF_GROUPS434,15153
    OFPERR_OFPGMFC_OUT_OF_BUCKETS,OFPERR_OFPGMFC_OUT_OF_BUCKETS438,15287
    OFPERR_OFPGMFC_CHAINING_UNSUPPORTED,OFPERR_OFPGMFC_CHAINING_UNSUPPORTED441,15402
    OFPERR_OFPGMFC_WATCH_UNSUPPORTED,OFPERR_OFPGMFC_WATCH_UNSUPPORTED445,15540
    OFPERR_OFPGMFC_LOOP,OFPERR_OFPGMFC_LOOP448,15635
    OFPERR_OFPGMFC_UNKNOWN_GROUP,OFPERR_OFPGMFC_UNKNOWN_GROUP452,15776
    OFPERR_OFPGMFC_CHAINED_GROUP,OFPERR_OFPGMFC_CHAINED_GROUP456,15916
    OFPERR_OFPGMFC_BAD_TYPE,OFPERR_OFPGMFC_BAD_TYPE459,16011
    OFPERR_OFPGMFC_BAD_COMMAND,OFPERR_OFPGMFC_BAD_COMMAND462,16098
    OFPERR_OFPGMFC_BAD_BUCKET,OFPERR_OFPGMFC_BAD_BUCKET465,16173
    OFPERR_OFPGMFC_BAD_WATCH,OFPERR_OFPGMFC_BAD_WATCH468,16257
    OFPERR_OFPGMFC_EPERM,OFPERR_OFPGMFC_EPERM471,16332
    OFPERR_OFPGMFC_UNKNOWN_BUCKET,OFPERR_OFPGMFC_UNKNOWN_BUCKET475,16465
    OFPERR_OFPGMFC_BUCKET_EXISTS,OFPERR_OFPGMFC_BUCKET_EXISTS479,16605
    OFPERR_OFPPMFC_BAD_PORT,OFPERR_OFPPMFC_BAD_PORT486,16810
    OFPERR_OFPPMFC_BAD_HW_ADDR,OFPERR_OFPPMFC_BAD_HW_ADDR490,16942
    OFPERR_OFPPMFC_BAD_CONFIG,OFPERR_OFPPMFC_BAD_CONFIG493,17028
    OFPERR_OFPPMFC_BAD_ADVERTISE,OFPERR_OFPPMFC_BAD_ADVERTISE496,17116
    OFPERR_OFPPMFC_EPERM,OFPERR_OFPPMFC_EPERM499,17194
    OFPERR_OFPTMFC_BAD_TABLE,OFPERR_OFPTMFC_BAD_TABLE506,17383
    OFPERR_OFPTMFC_BAD_CONFIG,OFPERR_OFPTMFC_BAD_CONFIG509,17467
    OFPERR_OFPTMFC_EPERM,OFPERR_OFPTMFC_EPERM512,17542
    OFPERR_OFPQOFC_BAD_PORT,OFPERR_OFPQOFC_BAD_PORT519,17747
    OFPERR_OFPQOFC_BAD_QUEUE,OFPERR_OFPQOFC_BAD_QUEUE522,17835
    OFPERR_OFPQOFC_EPERM,OFPERR_OFPQOFC_EPERM525,17921
    OFPERR_NXQOFC_QUEUE_ERROR,OFPERR_NXQOFC_QUEUE_ERROR528,18010
    OFPERR_OFPSCFC_BAD_FLAGS,OFPERR_OFPSCFC_BAD_FLAGS535,18213
    OFPERR_OFPSCFC_BAD_LEN,OFPERR_OFPSCFC_BAD_LEN538,18295
    OFPERR_OFPSCFC_EPERM,OFPERR_OFPSCFC_EPERM541,18368
    OFPERR_OFPRRFC_STALE,OFPERR_OFPRRFC_STALE548,18569
    OFPERR_OFPRRFC_UNSUP,OFPERR_OFPRRFC_UNSUP551,18657
    OFPERR_OFPRRFC_BAD_ROLE,OFPERR_OFPRRFC_BAD_ROLE554,18741
    OFPERR_OFPMMFC_UNKNOWN,OFPERR_OFPMMFC_UNKNOWN561,18921
    OFPERR_OFPMMFC_METER_EXISTS,OFPERR_OFPMMFC_METER_EXISTS565,19058
    OFPERR_OFPMMFC_INVALID_METER,OFPERR_OFPMMFC_INVALID_METER568,19169
    OFPERR_OFPMMFC_UNKNOWN_METER,OFPERR_OFPMMFC_UNKNOWN_METER572,19320
    OFPERR_OFPMMFC_BAD_COMMAND,OFPERR_OFPMMFC_BAD_COMMAND575,19412
    OFPERR_OFPMMFC_BAD_FLAGS,OFPERR_OFPMMFC_BAD_FLAGS578,19502
    OFPERR_OFPMMFC_BAD_RATE,OFPERR_OFPMMFC_BAD_RATE581,19576
    OFPERR_OFPMMFC_BAD_BURST,OFPERR_OFPMMFC_BAD_BURST584,19655
    OFPERR_OFPMMFC_BAD_BAND,OFPERR_OFPMMFC_BAD_BAND587,19729
    OFPERR_OFPMMFC_BAD_BAND_VALUE,OFPERR_OFPMMFC_BAD_BAND_VALUE590,19808
    OFPERR_OFPMMFC_OUT_OF_METERS,OFPERR_OFPMMFC_OUT_OF_METERS593,19896
    OFPERR_OFPMMFC_OUT_OF_BANDS,OFPERR_OFPMMFC_OUT_OF_BANDS597,20028
    OFPERR_OFPTFFC_BAD_TABLE,OFPERR_OFPTFFC_BAD_TABLE604,20240
    OFPERR_OFPTFFC_BAD_METADATA,OFPERR_OFPTFFC_BAD_METADATA607,20319
    OFPERR_OFPTFFC_EPERM,OFPERR_OFPTFFC_EPERM610,20397
    OFPERR_OFPBPC_BAD_TYPE,OFPERR_OFPBPC_BAD_TYPE620,20666
    OFPERR_OFPBPC_BAD_LEN,OFPERR_OFPBPC_BAD_LEN626,20847
    OFPERR_OFPBPC_BAD_VALUE,OFPERR_OFPBPC_BAD_VALUE632,21032
    OFPERR_OFPBPC_TOO_MANY,OFPERR_OFPBPC_TOO_MANY636,21171
    OFPERR_OFPBPC_DUP_TYPE,OFPERR_OFPBPC_DUP_TYPE640,21306
    OFPERR_OFPBPC_BAD_EXPERIMENTER,OFPERR_OFPBPC_BAD_EXPERIMENTER644,21444
    OFPERR_OFPBPC_BAD_EXP_TYPE,OFPERR_OFPBPC_BAD_EXP_TYPE648,21593
    OFPERR_OFPBPC_BAD_EXP_VALUE,OFPERR_OFPBPC_BAD_EXP_VALUE652,21735
    OFPERR_OFPBPC_EPERM,OFPERR_OFPBPC_EPERM656,21862
    OFPERR_OFPACFC_INVALID,OFPERR_OFPACFC_INVALID663,22052
    OFPERR_OFPACFC_UNSUPPORTED,OFPERR_OFPACFC_UNSUPPORTED666,22145
    OFPERR_OFPACFC_EPERM,OFPERR_OFPACFC_EPERM669,22222
    OFPERR_OFPBFC_UNKNOWN,OFPERR_OFPBFC_UNKNOWN676,22407
    OFPERR_OFPBFC_EPERM,OFPERR_OFPBFC_EPERM679,22493
    OFPERR_OFPBFC_BAD_ID,OFPERR_OFPBFC_BAD_ID682,22583
    OFPERR_OFPBFC_BUNDLE_EXIST,OFPERR_OFPBFC_BUNDLE_EXIST685,22675
    OFPERR_OFPBFC_BUNDLE_CLOSED,OFPERR_OFPBFC_BUNDLE_CLOSED688,22768
    OFPERR_OFPBFC_OUT_OF_BUNDLES,OFPERR_OFPBFC_OUT_OF_BUNDLES691,22862
    OFPERR_OFPBFC_BAD_TYPE,OFPERR_OFPBFC_BAD_TYPE695,22988
    OFPERR_OFPBFC_BAD_FLAGS,OFPERR_OFPBFC_BAD_FLAGS699,23108
    OFPERR_OFPBFC_MSG_BAD_LEN,OFPERR_OFPBFC_MSG_BAD_LEN702,23213
    OFPERR_OFPBFC_MSG_BAD_XID,OFPERR_OFPBFC_MSG_BAD_XID705,23315
    OFPERR_OFPBFC_MSG_UNSUP,OFPERR_OFPBFC_MSG_UNSUP708,23423
    OFPERR_OFPBFC_MSG_CONFLICT,OFPERR_OFPBFC_MSG_CONFLICT712,23548
    OFPERR_OFPBFC_MSG_TOO_MANY,OFPERR_OFPBFC_MSG_TOO_MANY716,23670
    OFPERR_OFPBFC_MSG_FAILED,OFPERR_OFPBFC_MSG_FAILED719,23773
    OFPERR_OFPBFC_TIMEOUT,OFPERR_OFPBFC_TIMEOUT722,23871
    OFPERR_OFPBFC_BUNDLE_IN_PROGRESS,OFPERR_OFPBFC_BUNDLE_IN_PROGRESS725,23971
    OFPERR_OFPBFC_BAD_VERSION,OFPERR_OFPBFC_BAD_VERSION729,24150
    OFPERR_OFPMOFC_UNKNOWN,OFPERR_OFPMOFC_UNKNOWN736,24341
    OFPERR_OFPMOFC_MONITOR_EXISTS,OFPERR_OFPMOFC_MONITOR_EXISTS740,24516
    OFPERR_OFPMOFC_INVALID_MONITOR,OFPERR_OFPMOFC_INVALID_MONITOR744,24640
    OFPERR_OFPMOFC_UNKNOWN_MONITOR,OFPERR_OFPMOFC_UNKNOWN_MONITOR748,24831
    OFPERR_OFPMOFC_BAD_COMMAND,OFPERR_OFPMOFC_BAD_COMMAND751,24925
    OFPERR_OFPMOFC_BAD_FLAGS,OFPERR_OFPMOFC_BAD_FLAGS755,25054
    OFPERR_OFPMOFC_BAD_TABLE_ID,OFPERR_OFPMOFC_BAD_TABLE_ID758,25142
    OFPERR_OFPMOFC_BAD_OUT,OFPERR_OFPMOFC_BAD_OUT761,25229
    OFPERR_NXTTMFC_BAD_COMMAND,OFPERR_NXTTMFC_BAD_COMMAND769,25496
    OFPERR_NXTTMFC_BAD_OPT_LEN,OFPERR_NXTTMFC_BAD_OPT_LEN773,25632
    OFPERR_NXTTMFC_BAD_FIELD_IDX,OFPERR_NXTTMFC_BAD_FIELD_IDX777,25789
    OFPERR_NXTTMFC_TABLE_FULL,OFPERR_NXTTMFC_TABLE_FULL781,25953
    OFPERR_NXTTMFC_ALREADY_MAPPED,OFPERR_NXTTMFC_ALREADY_MAPPED785,26119
    OFPERR_NXTTMFC_DUP_ENTRY,OFPERR_NXTTMFC_DUP_ENTRY789,26300
    OFPERR_NXTTMFC_INVALID_TLV_DEL,OFPERR_NXTTMFC_INVALID_TLV_DEL793,26446
    OFPERR_NXR_NOT_SUPPORTED,OFPERR_NXR_NOT_SUPPORTED801,26643
    OFPERR_NXR_STALE,OFPERR_NXR_STALE807,26927
    OFPERR_NXST_NOT_CONFIGURED,OFPERR_NXST_NOT_CONFIGURED815,27126

include/openvswitch/ofp-msgs.h,18931
#define OPENVSWITCH_OFP_MSGS_H OPENVSWITCH_OFP_MSGS_H18,663
enum ofpraw {ofpraw102,4076
    OFPRAW_OFPT_HELLO,OFPRAW_OFPT_HELLO118,4828
    OFPRAW_OFPT_ERROR,OFPRAW_OFPT_ERROR121,4911
    OFPRAW_OFPT_ECHO_REQUEST,OFPRAW_OFPT_ECHO_REQUEST124,4972
    OFPRAW_OFPT_ECHO_REPLY,OFPRAW_OFPT_ECHO_REPLY127,5040
    OFPRAW_OFPT_FEATURES_REQUEST,OFPRAW_OFPT_FEATURES_REQUEST135,5239
    OFPRAW_OFPT10_FEATURES_REPLY,OFPRAW_OFPT10_FEATURES_REPLY138,5351
    OFPRAW_OFPT11_FEATURES_REPLY,OFPRAW_OFPT11_FEATURES_REPLY140,5462
    OFPRAW_OFPT13_FEATURES_REPLY,OFPRAW_OFPT13_FEATURES_REPLY142,5549
    OFPRAW_OFPT_GET_CONFIG_REQUEST,OFPRAW_OFPT_GET_CONFIG_REQUEST145,5615
    OFPRAW_OFPT_GET_CONFIG_REPLY,OFPRAW_OFPT_GET_CONFIG_REPLY148,5703
    OFPRAW_OFPT_SET_CONFIG,OFPRAW_OFPT_SET_CONFIG151,5789
    OFPRAW_OFPT10_PACKET_IN,OFPRAW_OFPT10_PACKET_IN154,5889
    OFPRAW_OFPT11_PACKET_IN,OFPRAW_OFPT11_PACKET_IN156,5978
    OFPRAW_OFPT12_PACKET_IN,OFPRAW_OFPT12_PACKET_IN158,6067
    OFPRAW_OFPT13_PACKET_IN,OFPRAW_OFPT13_PACKET_IN160,6167
    OFPRAW_NXT_PACKET_IN,OFPRAW_NXT_PACKET_IN162,6253
    OFPRAW_NXT_PACKET_IN2,OFPRAW_NXT_PACKET_IN2164,6318
    OFPRAW_OFPT10_FLOW_REMOVED,OFPRAW_OFPT10_FLOW_REMOVED167,6398
    OFPRAW_OFPT11_FLOW_REMOVED,OFPRAW_OFPT11_FLOW_REMOVED169,6497
    OFPRAW_NXT_FLOW_REMOVED,OFPRAW_NXT_FLOW_REMOVED171,6592
    OFPRAW_OFPT10_PORT_STATUS,OFPRAW_OFPT10_PORT_STATUS174,6694
    OFPRAW_OFPT11_PORT_STATUS,OFPRAW_OFPT11_PORT_STATUS176,6797
    OFPRAW_OFPT14_PORT_STATUS,OFPRAW_OFPT14_PORT_STATUS178,6914
    OFPRAW_OFPT16_PORT_STATUS,OFPRAW_OFPT16_PORT_STATUS180,7028
    OFPRAW_OFPT10_PACKET_OUT,OFPRAW_OFPT10_PACKET_OUT183,7121
    OFPRAW_OFPT11_PACKET_OUT,OFPRAW_OFPT11_PACKET_OUT185,7216
    OFPRAW_OFPT15_PACKET_OUT,OFPRAW_OFPT15_PACKET_OUT187,7308
    OFPRAW_OFPT10_FLOW_MOD,OFPRAW_OFPT10_FLOW_MOD190,7401
    OFPRAW_OFPT11_FLOW_MOD,OFPRAW_OFPT11_FLOW_MOD192,7506
    OFPRAW_NXT_FLOW_MOD,OFPRAW_NXT_FLOW_MOD194,7593
    OFPRAW_OFPT11_GROUP_MOD,OFPRAW_OFPT11_GROUP_MOD197,7686
    OFPRAW_OFPT15_GROUP_MOD,OFPRAW_OFPT15_GROUP_MOD199,7779
    OFPRAW_OFPT10_PORT_MOD,OFPRAW_OFPT10_PORT_MOD202,7857
    OFPRAW_OFPT11_PORT_MOD,OFPRAW_OFPT11_PORT_MOD204,7937
    OFPRAW_OFPT14_PORT_MOD,OFPRAW_OFPT14_PORT_MOD206,8031
    OFPRAW_OFPT16_PORT_MOD,OFPRAW_OFPT16_PORT_MOD208,8122
    OFPRAW_OFPT11_TABLE_MOD,OFPRAW_OFPT11_TABLE_MOD211,8204
    OFPRAW_OFPT14_TABLE_MOD,OFPRAW_OFPT14_TABLE_MOD213,8297
    OFPRAW_OFPT10_BARRIER_REQUEST,OFPRAW_OFPT10_BARRIER_REQUEST216,8358
    OFPRAW_OFPT11_BARRIER_REQUEST,OFPRAW_OFPT11_BARRIER_REQUEST218,8425
    OFPRAW_OFPT10_BARRIER_REPLY,OFPRAW_OFPT10_BARRIER_REPLY221,8492
    OFPRAW_OFPT11_BARRIER_REPLY,OFPRAW_OFPT11_BARRIER_REPLY223,8557
    OFPRAW_OFPT10_QUEUE_GET_CONFIG_REQUEST,OFPRAW_OFPT10_QUEUE_GET_CONFIG_REQUEST226,8655
    OFPRAW_OFPT11_QUEUE_GET_CONFIG_REQUEST,OFPRAW_OFPT11_QUEUE_GET_CONFIG_REQUEST228,8767
    OFPRAW_OFPT10_QUEUE_GET_CONFIG_REPLY,OFPRAW_OFPT10_QUEUE_GET_CONFIG_REPLY231,8888
    OFPRAW_OFPT11_QUEUE_GET_CONFIG_REPLY,OFPRAW_OFPT11_QUEUE_GET_CONFIG_REPLY233,9010
    OFPRAW_OFPT12_ROLE_REQUEST,OFPRAW_OFPT12_ROLE_REQUEST236,9106
    OFPRAW_NXT_ROLE_REQUEST,OFPRAW_NXT_ROLE_REQUEST238,9187
    OFPRAW_OFPT12_ROLE_REPLY,OFPRAW_OFPT12_ROLE_REPLY241,9270
    OFPRAW_NXT_ROLE_REPLY,OFPRAW_NXT_ROLE_REPLY243,9349
    OFPRAW_OFPT13_GET_ASYNC_REQUEST,OFPRAW_OFPT13_GET_ASYNC_REQUEST246,9408
    OFPRAW_OFPT14_GET_ASYNC_REQUEST,OFPRAW_OFPT14_GET_ASYNC_REQUEST248,9477
    OFPRAW_OFPT13_GET_ASYNC_REPLY,OFPRAW_OFPT13_GET_ASYNC_REPLY250,9566
    OFPRAW_OFPT14_GET_ASYNC_REPLY,OFPRAW_OFPT14_GET_ASYNC_REPLY252,9641
    OFPRAW_OFPT13_SET_ASYNC,OFPRAW_OFPT13_SET_ASYNC254,9728
    OFPRAW_NXT_SET_ASYNC_CONFIG,OFPRAW_NXT_SET_ASYNC_CONFIG256,9806
    OFPRAW_NXT_SET_ASYNC_CONFIG2,OFPRAW_NXT_SET_ASYNC_CONFIG2258,9881
    OFPRAW_OFPT14_SET_ASYNC,OFPRAW_OFPT14_SET_ASYNC260,9955
    OFPRAW_OFPT13_METER_MOD,OFPRAW_OFPT13_METER_MOD263,10049
    OFPRAW_OFPT14_ROLE_STATUS,OFPRAW_OFPT14_ROLE_STATUS266,10145
    OFPRAW_OFPT14_TABLE_STATUS,OFPRAW_OFPT14_TABLE_STATUS269,10244
    OFPRAW_OFPT14_REQUESTFORWARD,OFPRAW_OFPT14_REQUESTFORWARD272,10346
    OFPRAW_OFPT14_BUNDLE_CONTROL,OFPRAW_OFPT14_BUNDLE_CONTROL275,10451
    OFPRAW_ONFT13_BUNDLE_CONTROL,OFPRAW_ONFT13_BUNDLE_CONTROL277,10556
    OFPRAW_OFPT14_BUNDLE_ADD_MESSAGE,OFPRAW_OFPT14_BUNDLE_ADD_MESSAGE280,10658
    OFPRAW_ONFT13_BUNDLE_ADD_MESSAGE,OFPRAW_ONFT13_BUNDLE_ADD_MESSAGE282,10764
    OFPRAW_OFPST_DESC_REQUEST,OFPRAW_OFPST_DESC_REQUEST287,10863
    OFPRAW_OFPST_DESC_REPLY,OFPRAW_OFPST_DESC_REPLY290,10944
    OFPRAW_OFPST10_FLOW_REQUEST,OFPRAW_OFPST10_FLOW_REQUEST293,11032
    OFPRAW_OFPST11_FLOW_REQUEST,OFPRAW_OFPST11_FLOW_REQUEST295,11138
    OFPRAW_NXST_FLOW_REQUEST,OFPRAW_NXST_FLOW_REQUEST297,11239
    OFPRAW_OFPST10_FLOW_REPLY,OFPRAW_OFPST10_FLOW_REPLY300,11306
    OFPRAW_OFPST11_FLOW_REPLY,OFPRAW_OFPST11_FLOW_REPLY302,11377
    OFPRAW_OFPST13_FLOW_REPLY,OFPRAW_OFPST13_FLOW_REPLY304,11445
    OFPRAW_NXST_FLOW_REPLY,OFPRAW_NXST_FLOW_REPLY306,11511
    OFPRAW_OFPST10_AGGREGATE_REQUEST,OFPRAW_OFPST10_AGGREGATE_REQUEST309,11598
    OFPRAW_OFPST11_AGGREGATE_REQUEST,OFPRAW_OFPST11_AGGREGATE_REQUEST311,11709
    OFPRAW_NXST_AGGREGATE_REQUEST,OFPRAW_NXST_AGGREGATE_REQUEST313,11815
    OFPRAW_OFPST_AGGREGATE_REPLY,OFPRAW_OFPST_AGGREGATE_REPLY316,11911
    OFPRAW_NXST_AGGREGATE_REPLY,OFPRAW_NXST_AGGREGATE_REPLY318,12003
    OFPRAW_OFPST_TABLE_REQUEST,OFPRAW_OFPST_TABLE_REQUEST321,12069
    OFPRAW_OFPST10_TABLE_REPLY,OFPRAW_OFPST10_TABLE_REPLY324,12155
    OFPRAW_OFPST11_TABLE_REPLY,OFPRAW_OFPST11_TABLE_REPLY326,12240
    OFPRAW_OFPST12_TABLE_REPLY,OFPRAW_OFPST12_TABLE_REPLY328,12325
    OFPRAW_OFPST13_TABLE_REPLY,OFPRAW_OFPST13_TABLE_REPLY330,12411
    OFPRAW_OFPST10_PORT_REQUEST,OFPRAW_OFPST10_PORT_REQUEST333,12502
    OFPRAW_OFPST11_PORT_REQUEST,OFPRAW_OFPST11_PORT_REQUEST335,12594
    OFPRAW_OFPST10_PORT_REPLY,OFPRAW_OFPST10_PORT_REPLY338,12680
    OFPRAW_OFPST11_PORT_REPLY,OFPRAW_OFPST11_PORT_REPLY340,12767
    OFPRAW_OFPST13_PORT_REPLY,OFPRAW_OFPST13_PORT_REPLY342,12850
    OFPRAW_OFPST14_PORT_REPLY,OFPRAW_OFPST14_PORT_REPLY344,12921
    OFPRAW_OFPST10_QUEUE_REQUEST,OFPRAW_OFPST10_QUEUE_REQUEST347,13012
    OFPRAW_OFPST11_QUEUE_REQUEST,OFPRAW_OFPST11_QUEUE_REQUEST349,13106
    OFPRAW_OFPST10_QUEUE_REPLY,OFPRAW_OFPST10_QUEUE_REPLY352,13194
    OFPRAW_OFPST11_QUEUE_REPLY,OFPRAW_OFPST11_QUEUE_REPLY354,13283
    OFPRAW_OFPST13_QUEUE_REPLY,OFPRAW_OFPST13_QUEUE_REPLY356,13368
    OFPRAW_OFPST14_QUEUE_REPLY,OFPRAW_OFPST14_QUEUE_REPLY358,13440
    OFPRAW_OFPST11_GROUP_REQUEST,OFPRAW_OFPST11_GROUP_REQUEST361,13533
    OFPRAW_OFPST11_GROUP_REPLY,OFPRAW_OFPST11_GROUP_REPLY364,13611
    OFPRAW_OFPST13_GROUP_REPLY,OFPRAW_OFPST13_GROUP_REPLY366,13683
    OFPRAW_OFPST11_GROUP_DESC_REQUEST,OFPRAW_OFPST11_GROUP_DESC_REQUEST369,13751
    OFPRAW_OFPST15_GROUP_DESC_REQUEST,OFPRAW_OFPST15_GROUP_DESC_REQUEST371,13849
    OFPRAW_OFPST11_GROUP_DESC_REPLY,OFPRAW_OFPST11_GROUP_DESC_REPLY374,13929
    OFPRAW_OFPST12_GROUP_FEATURES_REQUEST,OFPRAW_OFPST12_GROUP_FEATURES_REQUEST377,13999
    OFPRAW_OFPST12_GROUP_FEATURES_REPLY,OFPRAW_OFPST12_GROUP_FEATURES_REPLY380,14104
    OFPRAW_OFPST13_METER_REQUEST,OFPRAW_OFPST13_METER_REQUEST383,14210
    OFPRAW_OFPST13_METER_REPLY,OFPRAW_OFPST13_METER_REPLY386,14285
    OFPRAW_OFPST13_METER_CONFIG_REQUEST,OFPRAW_OFPST13_METER_CONFIG_REQUEST389,14383
    OFPRAW_OFPST13_METER_CONFIG_REPLY,OFPRAW_OFPST13_METER_CONFIG_REPLY392,14466
    OFPRAW_OFPST13_METER_FEATURES_REQUEST,OFPRAW_OFPST13_METER_FEATURES_REQUEST395,14539
    OFPRAW_OFPST13_METER_FEATURES_REPLY,OFPRAW_OFPST13_METER_FEATURES_REPLY398,14639
    OFPRAW_OFPST13_TABLE_FEATURES_REQUEST,OFPRAW_OFPST13_TABLE_FEATURES_REQUEST401,14714
    OFPRAW_OFPST13_TABLE_FEATURES_REPLY,OFPRAW_OFPST13_TABLE_FEATURES_REPLY404,14828
    OFPRAW_OFPST14_TABLE_DESC_REQUEST,OFPRAW_OFPST14_TABLE_DESC_REQUEST407,14903
    OFPRAW_OFPST14_TABLE_DESC_REPLY,OFPRAW_OFPST14_TABLE_DESC_REPLY410,15009
    OFPRAW_OFPST10_PORT_DESC_REQUEST,OFPRAW_OFPST10_PORT_DESC_REQUEST413,15083
    OFPRAW_OFPST15_PORT_DESC_REQUEST,OFPRAW_OFPST15_PORT_DESC_REQUEST415,15180
    OFPRAW_OFPST10_PORT_DESC_REPLY,OFPRAW_OFPST10_PORT_DESC_REPLY418,15270
    OFPRAW_OFPST11_PORT_DESC_REPLY,OFPRAW_OFPST11_PORT_DESC_REPLY420,15357
    OFPRAW_OFPST14_PORT_DESC_REPLY,OFPRAW_OFPST14_PORT_DESC_REPLY422,15434
    OFPRAW_OFPST14_QUEUE_DESC_REQUEST,OFPRAW_OFPST14_QUEUE_DESC_REQUEST425,15531
    OFPRAW_OFPST14_QUEUE_DESC_REPLY,OFPRAW_OFPST14_QUEUE_DESC_REPLY427,15611
    OFPRAW_OFPST14_FLOW_MONITOR_REQUEST,OFPRAW_OFPST14_FLOW_MONITOR_REQUEST430,15690
    OFPRAW_NXST_FLOW_MONITOR_REQUEST,OFPRAW_NXST_FLOW_MONITOR_REQUEST432,15769
    OFPRAW_OFPST14_FLOW_MONITOR_REPLY,OFPRAW_OFPST14_FLOW_MONITOR_REPLY435,15849
    OFPRAW_NXST_FLOW_MONITOR_REPLY,OFPRAW_NXST_FLOW_MONITOR_REPLY437,15926
    OFPRAW_NXT_SET_FLOW_FORMAT,OFPRAW_NXT_SET_FLOW_FORMAT445,16171
    OFPRAW_NXT_FLOW_MOD_TABLE_ID,OFPRAW_NXT_FLOW_MOD_TABLE_ID448,16258
    OFPRAW_NXT_SET_PACKET_IN_FORMAT,OFPRAW_NXT_SET_PACKET_IN_FORMAT451,16350
    OFPRAW_NXT_FLOW_AGE,OFPRAW_NXT_FLOW_AGE454,16419
    OFPRAW_NXT_SET_CONTROLLER_ID,OFPRAW_NXT_SET_CONTROLLER_ID457,16495
    OFPRAW_NXT_FLOW_MONITOR_CANCEL,OFPRAW_NXT_FLOW_MONITOR_CANCEL460,16586
    OFPRAW_NXT_FLOW_MONITOR_PAUSED,OFPRAW_NXT_FLOW_MONITOR_PAUSED463,16654
    OFPRAW_NXT_FLOW_MONITOR_RESUMED,OFPRAW_NXT_FLOW_MONITOR_RESUMED466,16722
    OFPRAW_NXT_TLV_TABLE_MOD,OFPRAW_NXT_TLV_TABLE_MOD469,16831
    OFPRAW_NXT_TLV_TABLE_REQUEST,OFPRAW_NXT_TLV_TABLE_REQUEST472,16893
    OFPRAW_NXT_TLV_TABLE_REPLY,OFPRAW_NXT_TLV_TABLE_REPLY475,17001
    OFPRAW_NXT_RESUME,OFPRAW_NXT_RESUME478,17073
    OFPRAW_NXT_CT_FLUSH_ZONE,OFPRAW_NXT_CT_FLUSH_ZONE481,17141
    OFPRAW_NXST_IPFIX_BRIDGE_REQUEST,OFPRAW_NXST_IPFIX_BRIDGE_REQUEST484,17203
    OFPRAW_NXST_IPFIX_BRIDGE_REPLY,OFPRAW_NXST_IPFIX_BRIDGE_REPLY487,17296
    OFPRAW_NXST_IPFIX_FLOW_REQUEST,OFPRAW_NXST_IPFIX_FLOW_REQUEST490,17364
    OFPRAW_NXST_IPFIX_FLOW_REPLY,OFPRAW_NXST_IPFIX_FLOW_REPLY493,17457
enum ofptype {ofptype537,19571
    OFPTYPE_HELLO,               /* OFPRAW_OFPT_HELLO. */OFPTYPE_HELLO539,19616
    OFPTYPE_ERROR,               /* OFPRAW_OFPT_ERROR. */OFPTYPE_ERROR540,19674
    OFPTYPE_ECHO_REQUEST,        /* OFPRAW_OFPT_ECHO_REQUEST. */OFPTYPE_ECHO_REQUEST541,19732
    OFPTYPE_ECHO_REPLY,          /* OFPRAW_OFPT_ECHO_REPLY. */OFPTYPE_ECHO_REPLY542,19797
    OFPTYPE_FEATURES_REQUEST,    /* OFPRAW_OFPT_FEATURES_REQUEST. */OFPTYPE_FEATURES_REQUEST545,19902
    OFPTYPE_FEATURES_REPLY,      /* OFPRAW_OFPT10_FEATURES_REPLY.OFPTYPE_FEATURES_REPLY546,19971
    OFPTYPE_GET_CONFIG_REQUEST,  /* OFPRAW_OFPT_GET_CONFIG_REQUEST. */OFPTYPE_GET_CONFIG_REQUEST549,20172
    OFPTYPE_GET_CONFIG_REPLY,    /* OFPRAW_OFPT_GET_CONFIG_REPLY. */OFPTYPE_GET_CONFIG_REPLY550,20243
    OFPTYPE_SET_CONFIG,          /* OFPRAW_OFPT_SET_CONFIG. */OFPTYPE_SET_CONFIG551,20312
    OFPTYPE_PACKET_IN,           /* OFPRAW_OFPT10_PACKET_IN.OFPTYPE_PACKET_IN554,20409
    OFPTYPE_FLOW_REMOVED,        /* OFPRAW_OFPT10_FLOW_REMOVED.OFPTYPE_FLOW_REMOVED560,20773
    OFPTYPE_PORT_STATUS,         /* OFPRAW_OFPT10_PORT_STATUS.OFPTYPE_PORT_STATUS563,20965
    OFPTYPE_PACKET_OUT,          /* OFPRAW_OFPT10_PACKET_OUT.OFPTYPE_PACKET_OUT569,21260
    OFPTYPE_FLOW_MOD,            /* OFPRAW_OFPT10_FLOW_MOD.OFPTYPE_FLOW_MOD572,21449
    OFPTYPE_GROUP_MOD,           /* OFPRAW_OFPT11_GROUP_MOD.OFPTYPE_GROUP_MOD575,21629
    OFPTYPE_PORT_MOD,            /* OFPRAW_OFPT10_PORT_MOD.OFPTYPE_PORT_MOD577,21754
    OFPTYPE_TABLE_MOD,           /* OFPRAW_OFPT11_TABLE_MOD.OFPTYPE_TABLE_MOD581,21997
    OFPTYPE_BARRIER_REQUEST,     /* OFPRAW_OFPT10_BARRIER_REQUEST.OFPTYPE_BARRIER_REQUEST585,22151
    OFPTYPE_BARRIER_REPLY,       /* OFPRAW_OFPT10_BARRIER_REPLY.OFPTYPE_BARRIER_REPLY587,22288
    OFPTYPE_QUEUE_GET_CONFIG_REQUEST, /* OFPRAW_OFPT10_QUEUE_GET_CONFIG_REQUEST.OFPTYPE_QUEUE_GET_CONFIG_REQUEST591,22462
    OFPTYPE_QUEUE_GET_CONFIG_REPLY, /* OFPRAW_OFPT10_QUEUE_GET_CONFIG_REPLY.OFPTYPE_QUEUE_GET_CONFIG_REPLY594,22703
    OFPTYPE_ROLE_REQUEST,         /* OFPRAW_OFPT12_ROLE_REQUEST.OFPTYPE_ROLE_REQUEST599,22984
    OFPTYPE_ROLE_REPLY,           /* OFPRAW_OFPT12_ROLE_REPLY.OFPTYPE_ROLE_REPLY601,23114
    OFPTYPE_GET_ASYNC_REQUEST,    /* OFPRAW_OFPT13_GET_ASYNC_REQUEST.OFPTYPE_GET_ASYNC_REQUEST605,23287
    OFPTYPE_GET_ASYNC_REPLY,      /* OFPRAW_OFPT13_GET_ASYNC_REPLY.OFPTYPE_GET_ASYNC_REPLY607,23430
    OFPTYPE_SET_ASYNC_CONFIG,     /* OFPRAW_NXT_SET_ASYNC_CONFIG.OFPTYPE_SET_ASYNC_CONFIG609,23569
    OFPTYPE_METER_MOD,            /* OFPRAW_OFPT13_METER_MOD. */OFPTYPE_METER_MOD615,23889
    OFPTYPE_ROLE_STATUS,          /* OFPRAW_OFPT14_ROLE_STATUS. */OFPTYPE_ROLE_STATUS618,24004
    OFPTYPE_REQUESTFORWARD,       /* OFPRAW_OFPT14_REQUESTFORWARD. */OFPTYPE_REQUESTFORWARD621,24116
    OFPTYPE_TABLE_STATUS,          /* OFPRAW_OFPT14_TABLE_STATUS. */OFPTYPE_TABLE_STATUS624,24220
    OFPTYPE_BUNDLE_CONTROL,       /* OFPRAW_OFPT14_BUNDLE_CONTROL.OFPTYPE_BUNDLE_CONTROL626,24290
    OFPTYPE_BUNDLE_ADD_MESSAGE,   /* OFPRAW_OFPT14_BUNDLE_ADD_MESSAGE.OFPTYPE_BUNDLE_ADD_MESSAGE629,24428
    OFPTYPE_DESC_STATS_REQUEST,      /* OFPRAW_OFPST_DESC_REQUEST. */OFPTYPE_DESC_STATS_REQUEST633,24596
    OFPTYPE_DESC_STATS_REPLY,        /* OFPRAW_OFPST_DESC_REPLY. */OFPTYPE_DESC_STATS_REPLY634,24666
    OFPTYPE_FLOW_STATS_REQUEST,      /* OFPRAW_OFPST10_FLOW_REQUEST.OFPTYPE_FLOW_STATS_REQUEST635,24734
    OFPTYPE_FLOW_STATS_REPLY,        /* OFPRAW_OFPST10_FLOW_REPLY.OFPTYPE_FLOW_STATS_REPLY638,24941
    OFPTYPE_AGGREGATE_STATS_REQUEST, /* OFPRAW_OFPST10_AGGREGATE_REQUEST.OFPTYPE_AGGREGATE_STATS_REQUEST642,25209
    OFPTYPE_AGGREGATE_STATS_REPLY,   /* OFPRAW_OFPST_AGGREGATE_REPLY.OFPTYPE_AGGREGATE_STATS_REPLY645,25431
    OFPTYPE_TABLE_STATS_REQUEST,     /* OFPRAW_OFPST_TABLE_REQUEST. */OFPTYPE_TABLE_STATS_REQUEST647,25573
    OFPTYPE_TABLE_STATS_REPLY,       /* OFPRAW_OFPST10_TABLE_REPLY.OFPTYPE_TABLE_STATS_REPLY648,25644
    OFPTYPE_PORT_STATS_REQUEST,      /* OFPRAW_OFPST10_PORT_REQUEST.OFPTYPE_PORT_STATS_REQUEST652,25919
    OFPTYPE_PORT_STATS_REPLY,        /* OFPRAW_OFPST10_PORT_REPLY.OFPTYPE_PORT_STATS_REPLY654,26060
    OFPTYPE_QUEUE_STATS_REQUEST,     /* OFPRAW_OFPST10_QUEUE_REQUEST.OFPTYPE_QUEUE_STATS_REQUEST658,26331
    OFPTYPE_QUEUE_STATS_REPLY,       /* OFPRAW_OFPST10_QUEUE_REPLY.OFPTYPE_QUEUE_STATS_REPLY660,26474
    OFPTYPE_GROUP_STATS_REQUEST,     /* OFPRAW_OFPST11_GROUP_REQUEST. */OFPTYPE_GROUP_STATS_REQUEST665,26750
    OFPTYPE_GROUP_STATS_REPLY,       /* OFPRAW_OFPST11_GROUP_REPLY.OFPTYPE_GROUP_STATS_REPLY667,26824
    OFPTYPE_GROUP_DESC_STATS_REQUEST, /* OFPRAW_OFPST11_GROUP_DESC_REQUEST.OFPTYPE_GROUP_DESC_STATS_REQUEST670,26964
    OFPTYPE_GROUP_DESC_STATS_REPLY,  /* OFPRAW_OFPST11_GROUP_DESC_REPLY. */OFPTYPE_GROUP_DESC_STATS_REPLY673,27120
    OFPTYPE_GROUP_FEATURES_STATS_REQUEST, /* OFPRAW_OFPST12_GROUP_FEATURES_REQUEST. */OFPTYPE_GROUP_FEATURES_STATS_REQUEST675,27197
    OFPTYPE_GROUP_FEATURES_STATS_REPLY, /* OFPRAW_OFPST12_GROUP_FEATURES_REPLY. */OFPTYPE_GROUP_FEATURES_STATS_REPLY677,27285
    OFPTYPE_METER_STATS_REQUEST,     /* OFPRAW_OFPST13_METER_REQUEST. */OFPTYPE_METER_STATS_REQUEST679,27369
    OFPTYPE_METER_STATS_REPLY,       /* OFPRAW_OFPST13_METER_REPLY. */OFPTYPE_METER_STATS_REPLY681,27443
    OFPTYPE_METER_CONFIG_STATS_REQUEST, /* OFPRAW_OFPST13_METER_CONFIG_REQUEST. */OFPTYPE_METER_CONFIG_STATS_REQUEST683,27515
    OFPTYPE_METER_CONFIG_STATS_REPLY, /* OFPRAW_OFPST13_METER_CONFIG_REPLY. */OFPTYPE_METER_CONFIG_STATS_REPLY685,27599
    OFPTYPE_METER_FEATURES_STATS_REQUEST, /* OFPRAW_OFPST13_METER_FEATURES_REQUEST. */OFPTYPE_METER_FEATURES_STATS_REQUEST687,27679
    OFPTYPE_METER_FEATURES_STATS_REPLY, /* OFPRAW_OFPST13_METER_FEATURES_REPLY. */OFPTYPE_METER_FEATURES_STATS_REPLY689,27767
    OFPTYPE_TABLE_FEATURES_STATS_REQUEST, /* OFPRAW_OFPST13_TABLE_FEATURES_REQUEST. */OFPTYPE_TABLE_FEATURES_STATS_REQUEST691,27851
    OFPTYPE_TABLE_FEATURES_STATS_REPLY, /* OFPRAW_OFPST13_TABLE_FEATURES_REPLY. */OFPTYPE_TABLE_FEATURES_STATS_REPLY693,27939
    OFPTYPE_TABLE_DESC_REQUEST,      /* OFPRAW_OFPST14_TABLE_DESC_REQUEST. */OFPTYPE_TABLE_DESC_REQUEST695,28023
    OFPTYPE_TABLE_DESC_REPLY,        /* OFPRAW_OFPST14_TABLE_DESC_REPLY. */OFPTYPE_TABLE_DESC_REPLY697,28102
    OFPTYPE_PORT_DESC_STATS_REQUEST, /* OFPRAW_OFPST10_PORT_DESC_REQUEST.OFPTYPE_PORT_DESC_STATS_REQUEST699,28179
    OFPTYPE_PORT_DESC_STATS_REPLY,   /* OFPRAW_OFPST10_PORT_DESC_REPLY.OFPTYPE_PORT_DESC_STATS_REPLY702,28331
    OFPTYPE_FLOW_MONITOR_STATS_REQUEST, /* OFPRAW_OFPST14_FLOW_MONITOR_REQUEST.OFPTYPE_FLOW_MONITOR_STATS_REQUEST706,28551
    OFPTYPE_FLOW_MONITOR_STATS_REPLY,   /* OFPRAW_OFPST14_FLOW_MONITOR_REPLY.OFPTYPE_FLOW_MONITOR_STATS_REPLY708,28711
    OFPTYPE_SET_FLOW_FORMAT,      /* OFPRAW_NXT_SET_FLOW_FORMAT. */OFPTYPE_SET_FLOW_FORMAT712,28897
    OFPTYPE_FLOW_MOD_TABLE_ID,    /* OFPRAW_NXT_FLOW_MOD_TABLE_ID. */OFPTYPE_FLOW_MOD_TABLE_ID713,28965
    OFPTYPE_SET_PACKET_IN_FORMAT, /* OFPRAW_NXT_SET_PACKET_IN_FORMAT. */OFPTYPE_SET_PACKET_IN_FORMAT714,29035
    OFPTYPE_FLOW_AGE,             /* OFPRAW_NXT_FLOW_AGE. */OFPTYPE_FLOW_AGE715,29108
    OFPTYPE_SET_CONTROLLER_ID,    /* OFPRAW_NXT_SET_CONTROLLER_ID. */OFPTYPE_SET_CONTROLLER_ID716,29169
    OFPTYPE_NXT_TLV_TABLE_MOD, /* OFPRAW_NXT_TLV_TABLE_MOD. */OFPTYPE_NXT_TLV_TABLE_MOD717,29239
    OFPTYPE_NXT_TLV_TABLE_REQUEST, /* OFPRAW_NXT_TLV_TABLE_REQUEST. */OFPTYPE_NXT_TLV_TABLE_REQUEST718,29302
    OFPTYPE_NXT_TLV_TABLE_REPLY, /* OFPRAW_NXT_TLV_TABLE_REPLY. */OFPTYPE_NXT_TLV_TABLE_REPLY719,29373
    OFPTYPE_NXT_RESUME,          /* OFPRAW_NXT_RESUME. */OFPTYPE_NXT_RESUME720,29440
    OFPTYPE_IPFIX_BRIDGE_STATS_REQUEST, /* OFPRAW_NXST_IPFIX_BRIDGE_REQUEST */OFPTYPE_IPFIX_BRIDGE_STATS_REQUEST721,29498
    OFPTYPE_IPFIX_BRIDGE_STATS_REPLY, /* OFPRAW_NXST_IPFIX_BRIDGE_REPLY */OFPTYPE_IPFIX_BRIDGE_STATS_REPLY722,29577
    OFPTYPE_IPFIX_FLOW_STATS_REQUEST, /* OFPRAW_NXST_IPFIX_FLOW_REQUEST */OFPTYPE_IPFIX_FLOW_STATS_REQUEST723,29652
    OFPTYPE_IPFIX_FLOW_STATS_REPLY,   /* OFPRAW_NXST_IPFIX_FLOW_REPLY */OFPTYPE_IPFIX_FLOW_STATS_REPLY724,29727
    OFPTYPE_CT_FLUSH_ZONE,            /* OFPRAW_NXT_CT_FLUSH_ZONE. */OFPTYPE_CT_FLUSH_ZONE725,29800
    OFPTYPE_FLOW_MONITOR_CANCEL,        /* OFPRAW_NXT_FLOW_MONITOR_CANCEL. */OFPTYPE_FLOW_MONITOR_CANCEL728,29905
    OFPTYPE_FLOW_MONITOR_PAUSED,        /* OFPRAW_NXT_FLOW_MONITOR_PAUSED. */OFPTYPE_FLOW_MONITOR_PAUSED729,29983
    OFPTYPE_FLOW_MONITOR_RESUMED,       /* OFPRAW_NXT_FLOW_MONITOR_RESUMED. */OFPTYPE_FLOW_MONITOR_RESUMED730,30061

include/openvswitch/ofp-parse.h,64
#define OPENVSWITCH_OFP_PARSE_H OPENVSWITCH_OFP_PARSE_H20,724

include/openvswitch/ofp-print.h,64
#define OPENVSWITCH_OFP_PRINT_H OPENVSWITCH_OFP_PRINT_H20,705

include/openvswitch/ofp-prop.h,266
#define OPENVSWITCH_OFP_PROP_H OPENVSWITCH_OFP_PROP_H18,645
#define OFPPROP_EXP(OFPPROP_EXP66,2251
ofpprop_is_experimenter(uint64_t type)ofpprop_is_experimenter72,2480
#define OFPPROP_LOG(OFPPROP_LOG134,5677
#define OFPPROP_UNKNOWN(OFPPROP_UNKNOWN139,5922

include/openvswitch/ofp-util.h,30383
#define OPENVSWITCH_OFP_UTIL_H OPENVSWITCH_OFP_UTIL_H18,638
struct ofputil_port_map {ofputil_port_map47,1318
    struct hmap by_name;by_name48,1344
    struct hmap by_number;by_number49,1369
#define OFPUTIL_PORT_MAP_INITIALIZER(OFPUTIL_PORT_MAP_INITIALIZER52,1400
enum { MAX_GROUP_NAME_LEN = INT_STRLEN(uint32_t) };MAX_GROUP_NAME_LEN78,2646
enum ofputil_protocol {ofputil_protocol106,3942
#define OFPUTIL_P_NONE OFPUTIL_P_NONE115,4315
    OFPUTIL_P_OF10_STD     = 1 << 0,OFPUTIL_P_OF10_STD116,4340
    OFPUTIL_P_OF10_STD_TID = 1 << 1,OFPUTIL_P_OF10_STD_TID117,4377
    OFPUTIL_P_OF10_NXM     = 1 << 2,OFPUTIL_P_OF10_NXM118,4414
    OFPUTIL_P_OF10_NXM_TID = 1 << 3,OFPUTIL_P_OF10_NXM_TID119,4451
#define OFPUTIL_P_OF10_STD_ANY OFPUTIL_P_OF10_STD_ANY120,4488
#define OFPUTIL_P_OF10_NXM_ANY OFPUTIL_P_OF10_NXM_ANY121,4565
#define OFPUTIL_P_OF10_ANY OFPUTIL_P_OF10_ANY122,4642
    OFPUTIL_P_OF11_STD     = 1 << 4,OFPUTIL_P_OF11_STD131,4982
    OFPUTIL_P_OF12_OXM      = 1 << 5,OFPUTIL_P_OF12_OXM140,5322
    OFPUTIL_P_OF13_OXM      = 1 << 6,OFPUTIL_P_OF13_OXM141,5360
    OFPUTIL_P_OF14_OXM      = 1 << 7,OFPUTIL_P_OF14_OXM142,5398
    OFPUTIL_P_OF15_OXM      = 1 << 8,OFPUTIL_P_OF15_OXM143,5436
    OFPUTIL_P_OF16_OXM      = 1 << 9,OFPUTIL_P_OF16_OXM144,5474
#define OFPUTIL_P_ANY_OXM OFPUTIL_P_ANY_OXM145,5512
#define OFPUTIL_P_NXM_OF11_UP OFPUTIL_P_NXM_OF11_UP151,5760
#define OFPUTIL_P_NXM_OXM_ANY OFPUTIL_P_NXM_OXM_ANY154,5890
#define OFPUTIL_P_OF11_UP OFPUTIL_P_OF11_UP156,5966
#define OFPUTIL_P_OF12_UP OFPUTIL_P_OF12_UP158,6034
#define OFPUTIL_P_OF13_UP OFPUTIL_P_OF13_UP159,6101
#define OFPUTIL_P_OF14_UP OFPUTIL_P_OF14_UP160,6168
#define OFPUTIL_P_OF15_UP OFPUTIL_P_OF15_UP161,6235
#define OFPUTIL_P_OF16_UP OFPUTIL_P_OF16_UP162,6302
#define OFPUTIL_P_ANY OFPUTIL_P_ANY165,6373
#define OFPUTIL_P_TID OFPUTIL_P_TID168,6489
#define OFPUTIL_SUPPORTED_VERSIONS OFPUTIL_SUPPORTED_VERSIONS215,8728
#define OFPUTIL_DEFAULT_VERSIONS OFPUTIL_DEFAULT_VERSIONS220,9035
enum ofputil_flow_mod_flags {ofputil_flow_mod_flags276,11792
    OFPUTIL_FF_SEND_FLOW_REM = 1 << 0, /* All versions. */OFPUTIL_FF_SEND_FLOW_REM280,11965
    OFPUTIL_FF_NO_PKT_COUNTS = 1 << 1, /* OpenFlow 1.3+. */OFPUTIL_FF_NO_PKT_COUNTS281,12024
    OFPUTIL_FF_NO_BYT_COUNTS = 1 << 2, /* OpenFlow 1.3+. */OFPUTIL_FF_NO_BYT_COUNTS282,12084
    OFPUTIL_FF_CHECK_OVERLAP = 1 << 3, /* All versions. */OFPUTIL_FF_CHECK_OVERLAP287,12357
    OFPUTIL_FF_RESET_COUNTS  = 1 << 4, /* OpenFlow 1.2+. */OFPUTIL_FF_RESET_COUNTS288,12416
    OFPUTIL_FF_EMERG         = 1 << 5, /* OpenFlow 1.0 only. */OFPUTIL_FF_EMERG291,12509
#define OFPUTIL_FF_STATE OFPUTIL_FF_STATE294,12643
    OFPUTIL_FF_HIDDEN_FIELDS = 1 << 6, /* Allow hidden match fields to beOFPUTIL_FF_HIDDEN_FIELDS302,13028
    OFPUTIL_FF_NO_READONLY   = 1 << 7, /* Allow rules within read only tablesOFPUTIL_FF_NO_READONLY304,13164
struct ofputil_flow_mod {ofputil_flow_mod312,13477
    struct ovs_list list_node; /* For queuing flow_mods. */list_node313,13503
    struct match match;match315,13564
    int priority;priority316,13588
    ovs_be64 cookie;         /* Cookie bits to match. */cookie322,13837
    ovs_be64 cookie_mask;    /* 1-bit in each 'cookie' bit to match. */cookie_mask323,13894
    ovs_be64 new_cookie;     /* New cookie to install or UINT64_MAX. */new_cookie340,14587
    bool modify_cookie;      /* Set cookie of existing flow to 'new_cookie'? */modify_cookie341,14659
    uint8_t table_id;table_id343,14740
    uint16_t command;command344,14762
    uint16_t idle_timeout;idle_timeout345,14784
    uint16_t hard_timeout;hard_timeout346,14811
    uint32_t buffer_id;buffer_id347,14838
    ofp_port_t out_port;out_port348,14862
    uint32_t out_group;out_group349,14887
    enum ofputil_flow_mod_flags flags;flags350,14911
    uint16_t importance;     /* Eviction precedence. */importance351,14950
    struct ofpact *ofpacts;  /* Series of "struct ofpact"s. */ofpacts352,15006
    size_t ofpacts_len;      /* Length of ofpacts, in bytes. */ofpacts_len353,15069
    uint64_t ofpacts_tlv_bitmap; /* 1-bit for each present TLV in 'ofpacts'. */ofpacts_tlv_bitmap354,15133
struct ofputil_flow_stats_request {ofputil_flow_stats_request369,15906
    bool aggregate;             /* Aggregate results? */aggregate370,15942
    struct match match;match371,15999
    ovs_be64 cookie;cookie372,16023
    ovs_be64 cookie_mask;cookie_mask373,16044
    ofp_port_t out_port;out_port374,16070
    uint32_t out_group;out_group375,16095
    uint8_t table_id;table_id376,16119
struct ofputil_flow_stats {ofputil_flow_stats386,16489
    struct match match;match387,16517
    ovs_be64 cookie;cookie388,16541
    uint8_t table_id;table_id389,16562
    uint16_t priority;priority390,16584
    uint16_t idle_timeout;idle_timeout391,16607
    uint16_t hard_timeout;hard_timeout392,16634
    uint32_t duration_sec;duration_sec393,16661
    uint32_t duration_nsec;duration_nsec394,16688
    int idle_age;               /* Seconds since last packet, -1 if unknown. */idle_age395,16716
    int hard_age;               /* Seconds since last change, -1 if unknown. */hard_age396,16796
    uint64_t packet_count;      /* Packet count, UINT64_MAX if unknown. */packet_count397,16876
    uint64_t byte_count;        /* Byte count, UINT64_MAX if unknown. */byte_count398,16951
    const struct ofpact *ofpacts;ofpacts399,17024
    size_t ofpacts_len;ofpacts_len400,17058
    enum ofputil_flow_mod_flags flags;flags401,17082
    uint16_t importance;        /* Eviction precedence. */importance402,17121
struct ofputil_aggregate_stats {ofputil_aggregate_stats414,17681
    uint64_t packet_count;      /* Packet count, UINT64_MAX if unknown. */packet_count415,17714
    uint64_t byte_count;        /* Byte count, UINT64_MAX if unknown. */byte_count416,17789
    uint32_t flow_count;flow_count417,17862
struct ofputil_flow_removed {ofputil_flow_removed428,18211
    struct match match;match429,18241
    ovs_be64 cookie;cookie430,18265
    uint16_t priority;priority431,18286
    uint8_t reason;             /* One of OFPRR_*. */reason432,18309
    uint8_t table_id;           /* 255 if message didn't include table ID. */table_id433,18363
    uint32_t duration_sec;duration_sec434,18441
    uint32_t duration_nsec;duration_nsec435,18468
    uint16_t idle_timeout;idle_timeout436,18496
    uint16_t hard_timeout;hard_timeout437,18523
    uint64_t packet_count;      /* Packet count, UINT64_MAX if unknown. */packet_count438,18550
    uint64_t byte_count;        /* Byte count, UINT64_MAX if unknown. */byte_count439,18625
struct ofputil_packet_in {ofputil_packet_in451,19137
    void *packet;               /* The packet. */packet461,19625
    size_t packet_len;          /* Length of 'packet' in bytes. */packet_len462,19675
    struct match flow_metadata;flow_metadata465,19795
    enum ofp_packet_in_reason reason;    /* One of OFPR_*. */reason468,19879
    uint8_t table_id;                    /* OpenFlow table ID. */table_id474,20145
    ovs_be64 cookie;                     /* Flow's cookie. */cookie475,20211
    uint8_t *userdata;userdata478,20314
    size_t userdata_len;userdata_len479,20337
enum { OFPUTIL_PACKET_IN_REASON_BUFSIZE = INT_STRLEN(int) + 1 };OFPUTIL_PACKET_IN_REASON_BUFSIZE495,21048
struct ofputil_packet_in_private {ofputil_packet_in_private506,21745
    struct ofputil_packet_in base;base507,21780
    struct uuid bridge;bridge510,21840
    uint8_t *stack;stack513,21888
    size_t stack_size;stack_size514,21908
    uint32_t mirrors;mirrors517,21957
    bool conntracked;conntracked520,22009
    struct ofpact *actions;actions523,22057
    size_t actions_len;actions_len524,22085
    struct ofpact *action_set;action_set527,22138
    size_t action_set_len;action_set_len528,22169
struct ofputil_packet_out {ofputil_packet_out549,22866
    const void *packet;         /* Packet data, if buffer_id == UINT32_MAX. */packet550,22894
    size_t packet_len;          /* Length of packet data in bytes. */packet_len551,22973
    uint32_t buffer_id;         /* Buffer id or UINT32_MAX if no buffer. */buffer_id552,23043
    struct match flow_metadata; /* Packet's input port and other metadata. */flow_metadata553,23119
    struct ofpact *ofpacts;     /* Actions. */ofpacts554,23197
    size_t ofpacts_len;         /* Size of ofpacts in bytes. */ofpacts_len555,23244
enum ofputil_frag_handling {ofputil_frag_handling565,23722
    OFPUTIL_FRAG_NORMAL = OFPC_FRAG_NORMAL,    /* No special handling. */OFPUTIL_FRAG_NORMAL566,23751
    OFPUTIL_FRAG_DROP = OFPC_FRAG_DROP,        /* Drop fragments. */OFPUTIL_FRAG_DROP567,23825
    OFPUTIL_FRAG_REASM = OFPC_FRAG_REASM,      /* Reassemble (if supported). */OFPUTIL_FRAG_REASM568,23894
    OFPUTIL_FRAG_NX_MATCH = OFPC_FRAG_NX_MATCH /* Match on frag bits. */OFPUTIL_FRAG_NX_MATCH569,23974
struct ofputil_switch_config {ofputil_switch_config577,24289
    enum ofputil_frag_handling frag;frag579,24349
    int invalid_ttl_to_controller;invalid_ttl_to_controller584,24612
    uint16_t miss_send_len;miss_send_len587,24713
enum ofputil_port_config {ofputil_port_config600,25245
    OFPUTIL_PC_PORT_DOWN    = 1 << 0, /* Port is administratively down. */OFPUTIL_PC_PORT_DOWN602,25350
    OFPUTIL_PC_NO_RECV      = 1 << 2, /* Drop all packets received by port. */OFPUTIL_PC_NO_RECV603,25425
    OFPUTIL_PC_NO_FWD       = 1 << 5, /* Drop packets forwarded to port. */OFPUTIL_PC_NO_FWD604,25504
    OFPUTIL_PC_NO_PACKET_IN = 1 << 6, /* No send packet-in msgs for port. */OFPUTIL_PC_NO_PACKET_IN605,25580
    OFPUTIL_PC_NO_STP       = 1 << 1, /* No 802.1D spanning tree for port. */OFPUTIL_PC_NO_STP607,25686
    OFPUTIL_PC_NO_RECV_STP  = 1 << 3, /* Drop received 802.1D STP packets. */OFPUTIL_PC_NO_RECV_STP608,25764
    OFPUTIL_PC_NO_FLOOD     = 1 << 4, /* Do not include port when flooding. */OFPUTIL_PC_NO_FLOOD609,25842
enum ofputil_port_state {ofputil_port_state613,25972
    OFPUTIL_PS_LINK_DOWN   = 1 << 0, /* No physical link present. */OFPUTIL_PS_LINK_DOWN615,26074
    OFPUTIL_PS_BLOCKED     = 1 << 1, /* Port is blocked */OFPUTIL_PS_BLOCKED617,26172
    OFPUTIL_PS_LIVE        = 1 << 2, /* Live for Fast Failover Group. */OFPUTIL_PS_LIVE618,26231
    OFPUTIL_PS_STP_LISTEN  = 0 << 8, /* Not learning or relaying frames. */OFPUTIL_PS_STP_LISTEN620,26333
    OFPUTIL_PS_STP_LEARN   = 1 << 8, /* Learning but not relaying frames. */OFPUTIL_PS_STP_LEARN621,26409
    OFPUTIL_PS_STP_FORWARD = 2 << 8, /* Learning and relaying frames. */OFPUTIL_PS_STP_FORWARD622,26486
    OFPUTIL_PS_STP_BLOCK   = 3 << 8, /* Not part of spanning tree. */OFPUTIL_PS_STP_BLOCK623,26559
    OFPUTIL_PS_STP_MASK    = 3 << 8  /* Bit mask for OFPPS10_STP_* values. */OFPUTIL_PS_STP_MASK624,26629
struct ofputil_phy_port {ofputil_phy_port628,26781
    ofp_port_t port_no;port_no629,26807
    struct eth_addr hw_addr;hw_addr636,27068
    struct eth_addr64 hw_addr64;hw_addr64637,27097
    char name[OFP16_MAX_PORT_NAME_LEN]; /* 64 bytes in OF1.6+, 16 otherwise. */name639,27131
    enum ofputil_port_config config;config640,27211
    enum ofputil_port_state state;state641,27248
    enum netdev_features curr;       /* Current features. */curr644,27323
    enum netdev_features advertised; /* Features advertised by the port. */advertised645,27384
    enum netdev_features supported;  /* Features supported by the port. */supported646,27460
    enum netdev_features peer;       /* Features advertised by peer. */peer647,27535
    uint32_t curr_speed;        /* Current speed, in kbps. */curr_speed650,27625
    uint32_t max_speed;         /* Maximum supported speed, in kbps. */max_speed651,27687
enum ofputil_capabilities {ofputil_capabilities654,27763
    OFPUTIL_C_FLOW_STATS     = 1 << 0,  /* Flow statistics. */OFPUTIL_C_FLOW_STATS656,27854
    OFPUTIL_C_TABLE_STATS    = 1 << 1,  /* Table statistics. */OFPUTIL_C_TABLE_STATS657,27917
    OFPUTIL_C_PORT_STATS     = 1 << 2,  /* Port statistics. */OFPUTIL_C_PORT_STATS658,27981
    OFPUTIL_C_IP_REASM       = 1 << 5,  /* Can reassemble IP fragments. */OFPUTIL_C_IP_REASM659,28044
    OFPUTIL_C_QUEUE_STATS    = 1 << 6,  /* Queue statistics. */OFPUTIL_C_QUEUE_STATS660,28119
    OFPUTIL_C_ARP_MATCH_IP   = 1 << 7,  /* Match IP addresses in ARP pkts. */OFPUTIL_C_ARP_MATCH_IP663,28238
    OFPUTIL_C_STP            = 1 << 3,  /* 802.1d spanning tree. */OFPUTIL_C_STP666,28346
    OFPUTIL_C_GROUP_STATS    = 1 << 4,  /* Group statistics. */OFPUTIL_C_GROUP_STATS670,28526
    OFPUTIL_C_PORT_BLOCKED   = 1 << 8,  /* Switch will block looping ports */OFPUTIL_C_PORT_BLOCKED673,28621
    OFPUTIL_C_BUNDLES         = 1 << 9,  /* Switch supports bundles. */OFPUTIL_C_BUNDLES676,28730
    OFPUTIL_C_FLOW_MONITORING = 1 << 10, /* Switch supports flow monitoring. */OFPUTIL_C_FLOW_MONITORING677,28802
struct ofputil_switch_features {ofputil_switch_features681,28922
    uint64_t datapath_id;       /* Datapath unique ID. */datapath_id682,28955
    uint32_t n_buffers;         /* Max packets buffered at once. */n_buffers683,29013
    uint8_t n_tables;           /* Number of tables supported by datapath. */n_tables684,29081
    uint8_t auxiliary_id;       /* Identify auxiliary connections */auxiliary_id685,29159
    enum ofputil_capabilities capabilities;capabilities686,29228
    uint64_t ofpacts;           /* Bitmap of OFPACT_* bits. */ofpacts687,29272
struct ofputil_port_status {ofputil_port_status705,29986
    enum ofp_port_reason reason;reason706,30015
    struct ofputil_phy_port desc;desc707,30048
struct ofputil_port_mod {ofputil_port_mod716,30396
    ofp_port_t port_no;port_no717,30422
    struct eth_addr hw_addr;hw_addr718,30446
    struct eth_addr64 hw_addr64;hw_addr64719,30475
    enum ofputil_port_config config;config720,30508
    enum ofputil_port_config mask;mask721,30545
    enum netdev_features advertise;advertise722,30580
enum ofputil_table_miss {ofputil_table_miss740,31295
    OFPUTIL_TABLE_MISS_DEFAULT,    /* Protocol default behavior. */OFPUTIL_TABLE_MISS_DEFAULT747,31681
    OFPUTIL_TABLE_MISS_CONTROLLER, /* Send to controller. */OFPUTIL_TABLE_MISS_CONTROLLER751,31848
    OFPUTIL_TABLE_MISS_CONTINUE,   /* Go to next table. */OFPUTIL_TABLE_MISS_CONTINUE752,31909
    OFPUTIL_TABLE_MISS_DROP,       /* Drop the packet. */OFPUTIL_TABLE_MISS_DROP753,31968
enum ofputil_table_eviction {ofputil_table_eviction761,32242
    OFPUTIL_TABLE_EVICTION_DEFAULT, /* No value. */OFPUTIL_TABLE_EVICTION_DEFAULT762,32272
    OFPUTIL_TABLE_EVICTION_ON,      /* Enable eviction. */OFPUTIL_TABLE_EVICTION_ON763,32324
    OFPUTIL_TABLE_EVICTION_OFF      /* Disable eviction. */OFPUTIL_TABLE_EVICTION_OFF764,32383
enum ofputil_table_vacancy {ofputil_table_vacancy772,32670
    OFPUTIL_TABLE_VACANCY_DEFAULT, /* No value. */OFPUTIL_TABLE_VACANCY_DEFAULT773,32699
    OFPUTIL_TABLE_VACANCY_ON,      /* Enable vacancy events. */OFPUTIL_TABLE_VACANCY_ON774,32750
    OFPUTIL_TABLE_VACANCY_OFF      /* Disable vacancy events. */OFPUTIL_TABLE_VACANCY_OFF775,32814
struct ofputil_table_mod_prop_vacancy {ofputil_table_mod_prop_vacancy788,33405
    uint8_t vacancy_down;    /* Vacancy threshold when space decreases (%). */vacancy_down789,33445
    uint8_t vacancy_up;      /* Vacancy threshold when space increases (%). */vacancy_up790,33524
    uint8_t vacancy;         /* Current vacancy (%). */vacancy791,33603
struct ofputil_table_mod {ofputil_table_mod795,33693
    uint8_t table_id;         /* ID of the table, 0xff indicates all tables. */table_id796,33720
    enum ofputil_table_miss miss;miss800,33926
    enum ofputil_table_eviction eviction;eviction804,34083
    uint32_t eviction_flags;    /* OFPTMPEF14_*. */eviction_flags809,34288
    enum ofputil_table_vacancy vacancy;vacancy813,34461
    struct ofputil_table_mod_prop_vacancy table_vacancy;table_vacancy819,34735
struct ofputil_table_desc {ofputil_table_desc823,34829
    uint8_t table_id;         /* ID of the table. */table_id824,34857
    enum ofputil_table_eviction eviction;eviction825,34910
    uint32_t eviction_flags;    /* UINT32_MAX if not present. */eviction_flags826,34952
    enum ofputil_table_vacancy vacancy;vacancy827,35017
    struct ofputil_table_mod_prop_vacancy table_vacancy;table_vacancy828,35057
struct ofputil_table_features {ofputil_table_features842,35673
    uint8_t table_id;         /* Identifier of table. Lower numbered tablestable_id843,35705
    char name[OFP_MAX_TABLE_NAME_LEN];name845,35838
    ovs_be64 metadata_match;  /* Bits of metadata table can match. */metadata_match846,35877
    ovs_be64 metadata_write;  /* Bits of metadata table can write. */metadata_write847,35947
    uint32_t max_entries;     /* Max number of entries supported. */max_entries848,36017
    enum ofputil_table_miss miss_config; /* OF1.1 and 1.2 only. */miss_config864,36758
    int supports_eviction;               /* OF1.4+ only. */supports_eviction865,36825
    int supports_vacancy_events;         /* OF1.4+ only. */supports_vacancy_events866,36885
    struct ofputil_table_instruction_features {ofputil_table_instruction_features873,37169
        unsigned long int next[BITMAP_N_LONGS(255)];next875,37269
        uint32_t instructions;instructions878,37385
        struct ofputil_table_action_features {ofputil_table_action_features887,37717
            uint64_t ofpacts;     /* Bitmap of supported OFPACT_*. */ofpacts888,37764
            struct mf_bitmap set_fields; /* Fields for "set-field". */set_fields889,37834
        } write, apply;write890,37905
        } write, apply;apply890,37905
    } nonmiss, miss;nonmiss891,37929
    } nonmiss, miss;miss891,37929
    struct mf_bitmap match;     /* Fields that may be matched. */match912,38694
    struct mf_bitmap mask;      /* Subset of 'match' that may have masks. */mask913,38760
    struct mf_bitmap wildcard;  /* Subset of 'match' that may be wildcarded. */wildcard914,38837
struct ofputil_meter_band {ofputil_meter_band936,39721
    uint16_t type;type937,39749
    uint8_t prec_level;         /* Non-zero if type == OFPMBT_DSCP_REMARK. */prec_level938,39768
    uint32_t rate;rate939,39846
    uint32_t burst_size;burst_size940,39865
struct ofputil_meter_band_stats {ofputil_meter_band_stats943,39894
    uint64_t packet_count;packet_count944,39928
    uint64_t byte_count;byte_count945,39955
struct ofputil_meter_config {ofputil_meter_config948,39984
    uint32_t meter_id;meter_id949,40014
    uint16_t flags;flags950,40037
    uint16_t n_bands;n_bands951,40057
    struct ofputil_meter_band *bands;bands952,40079
struct ofputil_meter_mod {ofputil_meter_mod956,40151
    uint16_t command;command957,40178
    struct ofputil_meter_config meter;meter958,40200
struct ofputil_meter_stats {ofputil_meter_stats961,40243
    uint32_t meter_id;meter_id962,40272
    uint32_t flow_count;flow_count963,40295
    uint64_t packet_in_count;packet_in_count964,40320
    uint64_t byte_in_count;byte_in_count965,40350
    uint32_t duration_sec;duration_sec966,40378
    uint32_t duration_nsec;duration_nsec967,40405
    uint16_t n_bands;n_bands968,40433
    struct ofputil_meter_band_stats *bands;bands969,40455
struct ofputil_meter_features {ofputil_meter_features972,40503
    uint32_t max_meters;        /* Maximum number of meters. */max_meters973,40535
    uint32_t band_types;        /* Can support max 32 band types. */band_types974,40599
    uint32_t capabilities;      /* Supported flags. */capabilities975,40668
    uint8_t  max_bands;max_bands976,40723
    uint8_t  max_color;max_color977,40747
enum ofputil_meter_request_type {ofputil_meter_request_type1001,41884
    OFPUTIL_METER_FEATURES,OFPUTIL_METER_FEATURES1002,41918
    OFPUTIL_METER_CONFIG,OFPUTIL_METER_CONFIG1003,41946
    OFPUTIL_METER_STATSOFPUTIL_METER_STATS1004,41972
typedef struct { uint32_t uint32; } ofproto_meter_id;uint321020,42614
typedef struct { uint32_t uint32; } ofproto_meter_id;ofproto_meter_id1020,42614
struct ofputil_role_request {ofputil_role_request1023,42712
    enum ofp12_controller_role role;role1024,42742
    bool have_generation_id;have_generation_id1025,42779
    uint64_t generation_id;generation_id1026,42808
struct ofputil_role_status {ofputil_role_status1029,42840
    enum ofp12_controller_role role;role1030,42869
    enum ofp14_controller_role_reason reason;reason1031,42906
    uint64_t generation_id;generation_id1032,42952
struct ofputil_table_stats {ofputil_table_stats1053,43911
    uint8_t table_id;           /* Identifier of table. */table_id1054,43940
    uint32_t active_count;      /* Number of active entries. */active_count1055,43999
    uint64_t lookup_count;      /* Number of packets looked up in table. */lookup_count1056,44063
    uint64_t matched_count;     /* Number of packets that hit table. */matched_count1057,44139
struct ofputil_queue_config {ofputil_queue_config1081,45288
    ofp_port_t port;port1082,45318
    uint32_t queue;queue1083,45339
    uint16_t min_rate;min_rate1088,45563
    uint16_t max_rate;max_rate1089,45586
struct ofputil_flow_monitor_request {ofputil_flow_monitor_request1102,46047
    uint32_t id;id1103,46085
    enum nx_flow_monitor_flags flags;flags1104,46102
    ofp_port_t out_port;out_port1105,46140
    uint8_t table_id;table_id1106,46165
    struct match match;match1107,46187
struct ofputil_flow_update {ofputil_flow_update1116,46499
    enum nx_flow_update_event event;event1117,46528
    enum ofp_flow_removed_reason reason;reason1120,46634
    uint16_t idle_timeout;idle_timeout1121,46675
    uint16_t hard_timeout;hard_timeout1122,46702
    uint8_t table_id;table_id1123,46729
    uint16_t priority;priority1124,46751
    ovs_be64 cookie;cookie1125,46774
    struct match match;match1126,46795
    const struct ofpact *ofpacts;ofpacts1127,46819
    size_t ofpacts_len;ofpacts_len1128,46853
    ovs_be32 xid;xid1131,46916
struct ofputil_port_stats {ofputil_port_stats1174,48726
    ofp_port_t port_no;port_no1175,48754
    struct netdev_stats stats;stats1176,48778
    uint32_t duration_sec;      /* UINT32_MAX if unknown. */duration_sec1177,48809
    uint32_t duration_nsec;duration_nsec1178,48870
struct ofputil_ipfix_stats {ofputil_ipfix_stats1190,49465
    uint32_t collector_set_id;  /* Used only for flow-based IPFIX statistics. */collector_set_id1191,49494
    uint64_t total_flows;  /* Totabl flows of this IPFIX exporter. */total_flows1192,49575
    uint64_t current_flows;  /* Current flows of this IPFIX exporter. */current_flows1193,49645
    uint64_t pkts;  /* Successfully sampled packets. */pkts1194,49718
    uint64_t ipv4_pkts;  /* Successfully sampled IPV4 packets. */ipv4_pkts1195,49774
    uint64_t ipv6_pkts;  /* Successfully sampled IPV6 packets. */ipv6_pkts1196,49840
    uint64_t error_pkts;  /* Error packets when sampling. */error_pkts1197,49906
    uint64_t ipv4_error_pkts;  /* Error IPV4 packets when sampling. */ipv4_error_pkts1198,49967
    uint64_t ipv6_error_pkts;  /* Error IPV6 packets when sampling. */ipv6_error_pkts1199,50038
    uint64_t tx_pkts;  /* TX IPFIX packets. */tx_pkts1200,50109
    uint64_t tx_errors;  /* IPFIX packets TX errors. */tx_errors1201,50156
struct ofputil_queue_stats_request {ofputil_queue_stats_request1209,50485
    ofp_port_t port_no;           /* OFPP_ANY means "all ports". */port_no1210,50522
    uint32_t queue_id;queue_id1211,50590
struct ofputil_queue_stats {ofputil_queue_stats1221,50942
    ofp_port_t port_no;port_no1222,50971
    uint32_t queue_id;queue_id1223,50995
    uint64_t tx_bytes;tx_bytes1226,51098
    uint64_t tx_packets;tx_packets1227,51121
    uint64_t tx_errors;tx_errors1228,51146
    uint32_t duration_sec;duration_sec1231,51204
    uint32_t duration_nsec;duration_nsec1232,51231
struct bucket_counter {bucket_counter1240,51537
    uint64_t packet_count;   /* Number of packets processed by bucket. */packet_count1241,51561
    uint64_t byte_count;     /* Number of bytes processed by bucket. */byte_count1242,51635
struct ofputil_bucket {ofputil_bucket1246,51743
    struct ovs_list list_node;list_node1247,51767
    uint16_t weight;            /* Relative weight, for "select" groups. */weight1248,51798
    ofp_port_t watch_port;      /* Port whose state affects whether this bucketwatch_port1249,51874
    uint32_t watch_group;       /* Group whose state affects whether thiswatch_group1252,52076
    uint32_t bucket_id;         /* Bucket Id used to identify bucket*/bucket_id1255,52279
    struct ofpact *ofpacts;     /* Series of "struct ofpact"s. */ofpacts1256,52350
    size_t ofpacts_len;         /* Length of ofpacts, in bytes. */ofpacts_len1257,52416
    struct bucket_counter stats;stats1259,52484
struct ofputil_group_props {ofputil_group_props1263,52559
    char selection_method[NTR_MAX_SELECTION_METHOD_LEN];selection_method1265,52619
    uint64_t selection_method_param;selection_method_param1266,52676
    struct field_array fields;fields1267,52713
struct ofputil_group_mod {ofputil_group_mod1271,52786
    uint16_t command;             /* One of OFPGC15_*. */command1272,52813
    uint8_t type;                 /* One of OFPGT11_*. */type1273,52871
    uint32_t group_id;            /* Group identifier. */group_id1274,52929
    uint32_t command_bucket_id;   /* Bucket Id used as part ofcommand_bucket_id1275,52987
    struct ovs_list buckets;      /* Contains "struct ofputil_bucket"s. */buckets1279,53231
    struct ofputil_group_props props; /* Group properties. */props1280,53306
struct ofputil_group_stats {ofputil_group_stats1284,53422
    uint32_t group_id;    /* Group identifier. */group_id1285,53451
    uint32_t ref_count;ref_count1286,53501
    uint64_t packet_count;      /* Packet count, UINT64_MAX if unknown. */packet_count1287,53525
    uint64_t byte_count;        /* Byte count, UINT64_MAX if unknown. */byte_count1288,53600
    uint32_t duration_sec;      /* UINT32_MAX if unknown. */duration_sec1289,53673
    uint32_t duration_nsec;duration_nsec1290,53734
    uint32_t n_buckets;n_buckets1291,53762
    struct bucket_counter *bucket_stats;bucket_stats1292,53786
struct ofputil_group_features {ofputil_group_features1298,53943
    uint32_t  types;           /* Bitmap of OFPGT_* values supported. */types1299,53975
    uint32_t  capabilities;    /* Bitmap of OFPGFC12_* capability supported. */capabilities1300,54048
    uint32_t  max_groups[4];   /* Maximum number of groups for each type. */max_groups1301,54128
    uint64_t  ofpacts[4];      /* Bitmaps of supported OFPACT_* */ofpacts1302,54205
struct ofputil_group_desc {ofputil_group_desc1306,54325
    uint8_t type;               /* One of OFPGT_*. */type1307,54353
    uint32_t group_id;          /* Group identifier. */group_id1308,54407
    struct ovs_list buckets;    /* Contains "struct ofputil_bucket"s. */buckets1309,54463
    struct ofputil_group_props props; /* Group properties. */props1310,54536
ofputil_bucket_has_liveness(const struct ofputil_bucket *bucket)ofputil_bucket_has_liveness1327,55416
struct ofputil_bundle_ctrl_msg {ofputil_bundle_ctrl_msg1366,57373
    uint32_t    bundle_id;bundle_id1367,57406
    uint16_t    type;type1368,57433
    uint16_t    flags;flags1369,57455
struct ofputil_bundle_add_msg {ofputil_bundle_add_msg1372,57482
    uint32_t            bundle_id;bundle_id1373,57514
    uint16_t            flags;flags1374,57549
    const struct ofp_header   *msg;msg1375,57580
struct ofputil_bundle_msg {ofputil_bundle_msg1394,58466
    enum ofptype type;type1395,58494
        struct ofputil_flow_mod fm;fm1397,58529
        struct ofputil_group_mod gm;gm1398,58565
        struct ofputil_packet_out po;po1399,58602
struct ofputil_tlv_map {ofputil_tlv_map1408,58928
    struct ovs_list list_node;list_node1409,58953
    uint16_t option_class;option_class1411,58985
    uint8_t  option_type;option_type1412,59012
    uint8_t  option_len;option_len1413,59038
    uint16_t index;index1414,59063
struct ofputil_tlv_table_mod {ofputil_tlv_table_mod1417,59087
    uint16_t command;command1418,59118
    struct ovs_list mappings;      /* Contains "struct ofputil_tlv_map"s. */mappings1419,59140
struct ofputil_tlv_table_reply {ofputil_tlv_table_reply1422,59221
    uint32_t max_option_space;max_option_space1423,59254
    uint16_t max_fields;max_fields1424,59285
    struct ovs_list mappings;      /* Contains "struct ofputil_tlv_map"s. */mappings1425,59310
enum ofputil_async_msg_type {ofputil_async_msg_type1438,60055
    OAM_PACKET_IN,              /* OFPT_PACKET_IN or NXT_PACKET_IN. */OAM_PACKET_IN1440,60127
    OAM_PORT_STATUS,            /* OFPT_PORT_STATUS. */OAM_PORT_STATUS1441,60198
    OAM_FLOW_REMOVED,           /* OFPT_FLOW_REMOVED or NXT_FLOW_REMOVED. */OAM_FLOW_REMOVED1442,60254
    OAM_ROLE_STATUS,            /* OFPT_ROLE_STATUS. */OAM_ROLE_STATUS1443,60331
    OAM_TABLE_STATUS,           /* OFPT_TABLE_STATUS. */OAM_TABLE_STATUS1444,60387
    OAM_REQUESTFORWARD,         /* OFPT_REQUESTFORWARD. */OAM_REQUESTFORWARD1445,60444
#define OAM_EXTENSIONS OAM_EXTENSIONS1448,60572
    OAM_N_TYPESOAM_N_TYPES1450,60637
struct ofputil_async_cfg {ofputil_async_cfg1454,60732
    uint32_t master[OAM_N_TYPES];master1455,60759
    uint32_t slave[OAM_N_TYPES];slave1456,60793
#define OFPUTIL_ASYNC_CFG_INIT OFPUTIL_ASYNC_CFG_INIT1458,60829
struct ofputil_requestforward {ofputil_requestforward1472,61491
    ovs_be32 xid;xid1473,61523
    enum ofp14_requestforward_reason reason;reason1474,61541
            struct ofputil_meter_mod *meter_mod;meter_mod1478,61657
            struct ofpbuf bands;bands1479,61706
        struct ofputil_group_mod *group_mod;group_mod1483,61793
struct ofputil_table_status {ofputil_table_status1494,62213
    enum ofp14_table_reason reason;     /* One of OFPTR_*. */reason1495,62243
    struct ofputil_table_desc desc;   /* New table config. */desc1496,62305

include/openvswitch/ofpbuf.h,2393
#define OPENVSWITCH_OFPBUF_H OPENVSWITCH_OFPBUF_H18,673
enum OVS_PACKED_ENUM ofpbuf_source {ofpbuf_source32,927
    OFPBUF_MALLOC,              /* Obtained via malloc(). */OFPBUF_MALLOC33,964
    OFPBUF_STACK,               /* Un-movable stack space or static buffer. */OFPBUF_STACK34,1025
    OFPBUF_STUB,                /* Starts on stack, may expand into heap. */OFPBUF_STUB35,1104
struct ofpbuf {ofpbuf57,1939
    void *base;                 /* First byte of allocated space. */base58,1955
    void *data;                 /* First byte actually in use. */data59,2024
    uint32_t size;              /* Number of bytes in use. */size60,2090
    uint32_t allocated;         /* Number of bytes allocated. */allocated61,2152
    void *header;               /* OpenFlow header. */header63,2218
    void *msg;                  /* message's body */msg64,2273
    struct ovs_list list_node;  /* Private list element for use by owner. */list_node65,2326
    enum ofpbuf_source source;  /* Source of memory allocated as 'base'. */source66,2403
#define OFPBUF_STUB_INITIALIZER(OFPBUF_STUB_INITIALIZER78,2841
ofpbuf_const_initializer(const void *data, uint32_t size)ofpbuf_const_initializer96,3656
static inline void ofpbuf_delete(struct ofpbuf *b)ofpbuf_delete168,6690
static inline void *ofpbuf_at(const struct ofpbuf *b, size_t offset,ofpbuf_at178,6945
static inline void *ofpbuf_at_assert(const struct ofpbuf *b, size_t offset,ofpbuf_at_assert186,7245
static inline void *ofpbuf_tail(const struct ofpbuf *b)ofpbuf_tail194,7537
static inline void *ofpbuf_end(const struct ofpbuf *b)ofpbuf_end201,7751
static inline size_t ofpbuf_headroom(const struct ofpbuf *b)ofpbuf_headroom210,8106
static inline size_t ofpbuf_tailroom(const struct ofpbuf *b)ofpbuf_tailroom217,8343
ofpbuf_headersize(const struct ofpbuf *b)ofpbuf_headersize225,8591
ofpbuf_msgsize(const struct ofpbuf *b)ofpbuf_msgsize233,8847
static inline void ofpbuf_clear(struct ofpbuf *b)ofpbuf_clear239,8975
static inline void *ofpbuf_pull(struct ofpbuf *b, size_t size)ofpbuf_pull247,9217
static inline void *ofpbuf_try_pull(struct ofpbuf *b, size_t size)ofpbuf_try_pull258,9592
static inline struct ofpbuf *ofpbuf_from_list(const struct ovs_list *list)ofpbuf_from_list263,9722
static inline bool ofpbuf_equal(const struct ofpbuf *a, const struct ofpbuf *b)ofpbuf_equal268,9859

include/openvswitch/packets.h,1653
#define OPENVSWITCH_PACKETS_H OPENVSWITCH_PACKETS_H18,674
struct flow_tnl {flow_tnl28,866
    ovs_be32 ip_dst;ip_dst29,884
    struct in6_addr ipv6_dst;ipv6_dst30,905
    ovs_be32 ip_src;ip_src31,935
    struct in6_addr ipv6_src;ipv6_src32,956
    ovs_be64 tun_id;tun_id33,986
    uint16_t flags;flags34,1007
    uint8_t ip_tos;ip_tos35,1027
    uint8_t ip_ttl;ip_ttl36,1047
    ovs_be16 tp_src;tp_src37,1067
    ovs_be16 tp_dst;tp_dst38,1088
    ovs_be16 gbp_id;gbp_id39,1109
    uint8_t  gbp_flags;gbp_flags40,1130
    uint8_t  pad1[5];        /* Pad to 64 bits. */pad141,1154
    struct tun_metadata metadata;metadata42,1205
#define FLOW_TNL_F_OAM FLOW_TNL_F_OAM49,1351
#define FLOW_TNL_PUB_F_MASK FLOW_TNL_PUB_F_MASK51,1384
#define FLOW_TNL_F_DONT_FRAGMENT FLOW_TNL_F_DONT_FRAGMENT54,1448
#define FLOW_TNL_F_CSUM FLOW_TNL_F_CSUM55,1490
#define FLOW_TNL_F_KEY FLOW_TNL_F_KEY56,1523
#define FLOW_TNL_F_MASK FLOW_TNL_F_MASK58,1556
union flow_in_port {flow_in_port63,1766
    odp_port_t odp_port;odp_port64,1787
    ofp_port_t ofp_port;ofp_port65,1812
union flow_vlan_hdr {flow_vlan_hdr68,1841
    ovs_be32 qtag;qtag69,1863
        ovs_be16 tpid;  /* ETH_TYPE_VLAN_DOT1Q or ETH_TYPE_DOT1AD */tpid71,1895
        ovs_be16 tci;tci72,1964
struct flow_nsh {flow_nsh81,2060
    uint8_t flags;flags82,2078
    uint8_t mdtype;mdtype83,2097
    uint8_t np;np84,2117
    uint8_t si;si85,2133
    ovs_be32 spi;spi86,2149
    ovs_be32 c[4];c87,2167
#define FLOW_NSH_F_OAM FLOW_NSH_F_OAM91,2206
#define FLOW_NSH_F_CTX FLOW_NSH_F_CTX92,2238
#define FLOW_NSH_F_MASK FLOW_NSH_F_MASK94,2271

include/openvswitch/shash.h,380
#define SHASH_H SHASH_H18,636
struct shash_node {shash_node27,757
    struct hmap_node node;node28,777
    char *name;name29,804
    void *data;data30,820
struct shash {shash33,840
    struct hmap map;map34,855
#define SHASH_INITIALIZER(SHASH_INITIALIZER37,880
#define SHASH_FOR_EACH(SHASH_FOR_EACH39,950
#define SHASH_FOR_EACH_SAFE(SHASH_FOR_EACH_SAFE44,1243

include/openvswitch/thread.h,1068
#define OPENVSWITCH_THREAD_H OPENVSWITCH_THREAD_H18,637
struct OVS_LOCKABLE ovs_mutex {ovs_mutex31,842
    pthread_mutex_t lock;lock32,874
    const char *where;          /* NULL if and only if uninitialized. */where33,900
#define OVS_MUTEX_INITIALIZER OVS_MUTEX_INITIALIZER38,1062
#define OVS_MUTEX_INITIALIZER OVS_MUTEX_INITIALIZER41,1190
#define OVS_ADAPTIVE_MUTEX_INITIALIZER OVS_ADAPTIVE_MUTEX_INITIALIZER45,1317
#define OVS_ADAPTIVE_MUTEX_INITIALIZER OVS_ADAPTIVE_MUTEX_INITIALIZER48,1441
void ovs_mutex_unlock(const struct ovs_mutex *mutex) OVS_RELEASES(mutex);mutex60,2005
    OVS_ACQUIRES(mutex);mutex62,2152
#define ovs_mutex_lock(ovs_mutex_lock63,2177
#define ovs_mutex_trylock(ovs_mutex_trylock68,2366
struct ovsthread_once {ovsthread_once105,3398
    bool done;               /* Non-atomic, false negatives possible. */done106,3422
    struct ovs_mutex mutex;mutex107,3495
#define OVSTHREAD_ONCE_INITIALIZER OVSTHREAD_ONCE_INITIALIZER110,3527
ovsthread_once_start(struct ovsthread_once *once)ovsthread_once_start132,4447

include/openvswitch/token-bucket.h,537
#define OPENVSWITCH_TOKEN_BUCKET_H OPENVSWITCH_TOKEN_BUCKET_H18,637
struct token_bucket {token_bucket27,757
    unsigned int rate;          /* Tokens added per millisecond. */rate29,813
    unsigned int burst;         /* Max cumulative tokens credit. */burst30,881
    unsigned int tokens;        /* Current number of tokens. */tokens33,976
    long long int last_fill;    /* Last time tokens added. */last_fill34,1040
#define TOKEN_BUCKET_INIT(TOKEN_BUCKET_INIT37,1106
#define token_bucket_wait(token_bucket_wait46,1571

include/openvswitch/tun-metadata.h,1845
#define OPENVSWITCH_TUN_METADATA_H OPENVSWITCH_TUN_METADATA_H18,637
#define TUN_METADATA_NUM_OPTS TUN_METADATA_NUM_OPTS26,748
#define TUN_METADATA_TOT_OPT_SIZE TUN_METADATA_TOT_OPT_SIZE27,781
struct tun_metadata {tun_metadata49,2033
        uint64_t map;                      /* 1-bit for each present TLV. */map52,2215
        uint8_t len;                       /* Length of data in 'opts'. */len53,2292
    } present;present54,2367
    const struct tun_table *tab; /* Types & lengths for 'opts' and 'opt_map'. */tab55,2382
    uint8_t pad[4];             /* Pad to 64-bit boundary. */pad58,2494
        uint8_t u8[TUN_METADATA_TOT_OPT_SIZE]; /* Values from tunnel TLVs. */u862,2576
        struct geneve_opt gnv[TLV_TOT_OPT_SIZE / sizeof(struct geneve_opt)];gnv63,2654
    } opts;opts64,2731
struct tun_metadata_loc_chain {tun_metadata_loc_chain73,3106
    struct tun_metadata_loc_chain *next;next74,3138
    int offset;       /* In bytes, from start of 'opts', multiple of 4.  */offset75,3179
    int len;          /* In bytes, multiple of 4. */len76,3255
struct tun_metadata_loc {tun_metadata_loc79,3312
    int len;                    /* Sum of 'len' over elements in chain. */len80,3338
    struct tun_metadata_loc_chain c;c81,3413
struct tun_metadata_match_entry {tun_metadata_match_entry86,3554
    struct tun_metadata_loc loc; /* Allocated position. */loc87,3588
    bool masked; /* Source value had a mask. Otherwise we can't tell if themasked88,3647
struct tun_metadata_allocation {tun_metadata_allocation98,4220
    struct tun_metadata_match_entry entry[TUN_METADATA_NUM_OPTS];entry99,4253
    int alloc_offset;           /* Byte offset into 'opts', multiple of 4.  */alloc_offset100,4319
    bool valid;                 /* Set to true after any allocation occurs. */valid101,4398

include/openvswitch/type-props.h,377
#define OPENVSWITCH_TYPE_PROPS_H OPENVSWITCH_TYPE_PROPS_H18,647
#define TYPE_IS_BOOL(TYPE_IS_BOOL27,790
#define TYPE_IS_INTEGER(TYPE_IS_INTEGER31,939
#define TYPE_IS_SIGNED(TYPE_IS_SIGNED34,1075
#define TYPE_VALUE_BITS(TYPE_VALUE_BITS44,1353
#define TYPE_MINIMUM(TYPE_MINIMUM48,1537
#define TYPE_MAXIMUM(TYPE_MAXIMUM49,1617
#define INT_STRLEN(INT_STRLEN57,1907

include/openvswitch/types.h,2514
#define OPENVSWITCH_TYPES_H OPENVSWITCH_TYPES_H18,660
#define OVS_BITWISE OVS_BITWISE29,828
#define OVS_FORCE OVS_FORCE30,873
#define OVS_BITWISEOVS_BITWISE32,920
#define OVS_FORCEOVS_FORCE33,940
typedef uint16_t OVS_BITWISE ovs_be16;ovs_be1638,1113
typedef uint32_t OVS_BITWISE ovs_be32;ovs_be3239,1152
typedef uint64_t OVS_BITWISE ovs_be64;ovs_be6440,1191
#define OVS_BE16_MAX OVS_BE16_MAX42,1231
#define OVS_BE32_MAX OVS_BE32_MAX43,1282
#define OVS_BE64_MAX OVS_BE64_MAX44,1337
        uint16_t hi, lo;hi67,2357
        uint16_t hi, lo;lo67,2357
} ovs_16aligned_u32;ovs_16aligned_u3271,2420
        ovs_be16 hi, lo;hi76,2550
        ovs_be16 hi, lo;lo76,2550
} ovs_16aligned_be32;ovs_16aligned_be3277,2575
        uint32_t hi, lo;hi83,2727
        uint32_t hi, lo;lo83,2727
} ovs_32aligned_u64;ovs_32aligned_u6487,2790
    uint32_t u32[4];u3292,2919
} ovs_32aligned_u128;ovs_32aligned_u12893,2940
    ovs_be32 be32[4];be3298,3073
} ovs_32aligned_be128;ovs_32aligned_be12899,3095
    uint32_t u32[4];u32102,3135
        uint64_t hi, lo;hi105,3192
        uint64_t hi, lo;lo105,3192
    } u64;u64109,3255
} ovs_u128;ovs_u128110,3266
    ovs_be32 be32[4];be32113,3295
        ovs_be64 hi, lo;hi115,3330
        ovs_be64 hi, lo;lo115,3330
    } be64;be64116,3355
} ovs_be128;ovs_be128117,3367
static const ovs_u128 OVS_U128_ZERO = { { 0, 0, 0, 0 } };OVS_U128_ZERO122,3607
static const ovs_u128 OVS_U128_MAX = { { UINT32_MAX, UINT32_MAX,OVS_U128_MAX123,3665
static const ovs_be128 OVS_BE128_MAX OVS_UNUSED = { { OVS_BE32_MAX, OVS_BE32_MAX,OVS_UNUSED125,3799
static const ovs_u128 OVS_U128_MIN OVS_UNUSED = { {0, 0, 0, 0} };OVS_UNUSED127,3956
static const ovs_u128 OVS_BE128_MIN OVS_UNUSED = { {0, 0, 0, 0} };OVS_UNUSED128,4022
#define OVS_U128_ZERO OVS_U128_ZERO130,4090
        ovs_be32 hi, lo;hi135,4234
        ovs_be32 hi, lo;lo135,4234
} ovs_32aligned_be64;ovs_32aligned_be64136,4259
typedef uint32_t OVS_BITWISE ofp_port_t;ofp_port_t152,4769
typedef uint32_t OVS_BITWISE odp_port_t;odp_port_t153,4810
typedef uint32_t OVS_BITWISE ofp11_port_t;ofp11_port_t154,4851
#define OFP_PORT_C(OFP_PORT_C157,4961
#define ODP_PORT_C(ODP_PORT_C158,5012
#define OFP11_PORT_C(OFP11_PORT_C159,5063
struct eth_addr {eth_addr164,5296
        uint8_t ea[6];ea166,5326
        ovs_be16 be16[3];be16167,5349
struct eth_addr64 {eth_addr64172,5442
        uint8_t ea64[8];ea64174,5474
        ovs_be16 be16[4];be16175,5499

include/openvswitch/util.h,2189
#define OPENVSWITCH_UTIL_H OPENVSWITCH_UTIL_H18,677
#define OVS_SOURCE_LOCATOR OVS_SOURCE_LOCATOR37,1179
#define OVS_STRINGIZE(OVS_STRINGIZE38,1243
#define OVS_STRINGIZE2(OVS_STRINGIZE239,1290
#define OVS_SAT_MUL(OVS_SAT_MUL42,1402
#define ovs_assert(ovs_assert50,1744
#define ovs_assert(ovs_assert55,1982
#define BUILD_ASSERT_TYPE(BUILD_ASSERT_TYPE72,2850
#define CONST_CAST(CONST_CAST77,3105
#define OVS_TYPEOF(OVS_TYPEOF84,3381
#define OVS_TYPEOF(OVS_TYPEOF86,3429
#define OBJECT_OFFSETOF(OBJECT_OFFSETOF99,3944
#define OBJECT_OFFSETOF(OBJECT_OFFSETOF101,4026
#define MEMBER_SIZEOF(MEMBER_SIZEOF106,4176
#define OFFSETOFEND(OFFSETOFEND109,4311
#define CONTAINER_OF(CONTAINER_OF114,4520
#define OBJECT_CONTAINING(OBJECT_CONTAINING124,5034
#define ASSIGN_CONTAINER(ASSIGN_CONTAINER133,5497
#define INIT_CONTAINER(INIT_CONTAINER140,5898
#define ARRAY_SIZE(ARRAY_SIZE144,6061
#define DIV_ROUND_UP(DIV_ROUND_UP147,6185
#define ROUND_UP(ROUND_UP150,6296
#define PAD_SIZE(PAD_SIZE153,6425
#define ROUND_DOWN(ROUND_DOWN156,6531
#define IS_POW2(IS_POW2159,6633
#define PAD_PASTE2(PAD_PASTE2175,7102
#define PAD_PASTE(PAD_PASTE176,7132
#define PAD_ID PAD_ID177,7173
#define PADDED_MEMBERS(PADDED_MEMBERS179,7236
#define PADDED_MEMBERS(PADDED_MEMBERS188,7734
#define PADDED_MEMBERS_CACHELINE_MARKER(PADDED_MEMBERS_CACHELINE_MARKER228,9089
#define PADDED_MEMBERS_CACHELINE_MARKER(PADDED_MEMBERS_CACHELINE_MARKER235,9451
is_pow2(uintmax_t x)is_pow2245,9904
#define ROUND_UP_POW2(ROUND_UP_POW2251,10031
#define RUP2__(RUP2__252,10066
#define RUP2_1(RUP2_1253,10100
#define RUP2_2(RUP2_2254,10150
#define RUP2_3(RUP2_3255,10199
#define RUP2_4(RUP2_4256,10248
#define RUP2_5(RUP2_5257,10297
#define RUP2_6(RUP2_6258,10346
#define ROUND_DOWN_POW2(ROUND_DOWN_POW2261,10455
#define RDP2__(RDP2__262,10492
#define RDP2_1(RDP2_1263,10541
#define RDP2_2(RDP2_2264,10591
#define RDP2_3(RDP2_3265,10640
#define RDP2_4(RDP2_4266,10689
#define RDP2_5(RDP2_5267,10738
#define BITMAP_ULONG_BITS BITMAP_ULONG_BITS270,10820
#define BITMAP_N_LONGS(BITMAP_N_LONGS271,10881
#define ALIGNED_CAST(ALIGNED_CAST275,11100

include/openvswitch/uuid.h,263
#define OPENVSWITCH_UUID_H OPENVSWITCH_UUID_H17,638
#define UUID_BIT UUID_BIT25,739
#define UUID_OCTET UUID_OCTET26,803
struct uuid {uuid34,1197
    uint32_t parts[4];parts35,1211
BUILD_ASSERT_DECL(sizeof(struct uuid) == UUID_OCTET);UUID_OCTET37,1237

include/openvswitch/vconn.h,207
#define OPENVSWITCH_VCONN_H OPENVSWITCH_VCONN_H18,635
enum vconn_wait_type {vconn_wait_type79,2825
    WAIT_CONNECT,WAIT_CONNECT80,2848
    WAIT_RECV,WAIT_RECV81,2866
    WAIT_SENDWAIT_SEND82,2881

include/openvswitch/version.h,308
#define OPENVSWITCH_VERSION_H OPENVSWITCH_VERSION_H19,674
#define OVS_PACKAGE_STRING OVS_PACKAGE_STRING21,707
#define OVS_PACKAGE_VERSION OVS_PACKAGE_VERSION22,755
#define OVS_LIB_VERSION OVS_LIB_VERSION24,792
#define OVS_LIB_REVISION OVS_LIB_REVISION25,822
#define OVS_LIB_AGE OVS_LIB_AGE26,852

include/openvswitch/vlog.h,3160
#define OPENVSWITCH_VLOG_H OPENVSWITCH_VLOG_H18,665
#define VLOG_LEVELS VLOG_LEVELS46,1145
enum vlog_level {vlog_level53,1482
#define VLOG_LEVEL(VLOG_LEVEL54,1500
    VLOG_LEVELSVLOG_LEVELS55,1566
#undef VLOG_LEVELVLOG_LEVEL56,1582
    VLL_N_LEVELSVLL_N_LEVELS57,1600
#define VLOG_DESTINATIONS VLOG_DESTINATIONS64,1765
enum vlog_destination {vlog_destination68,2068
#define VLOG_DESTINATION(VLOG_DESTINATION69,2092
    VLOG_DESTINATIONSVLOG_DESTINATIONS70,2144
#undef VLOG_DESTINATIONVLOG_DESTINATION71,2166
    VLF_N_DESTINATIONS,VLF_N_DESTINATIONS72,2190
    VLF_ANY_DESTINATION = -1VLF_ANY_DESTINATION73,2214
struct vlog_module {vlog_module80,2396
    struct ovs_list list;list81,2417
    const char *name;             /* User-visible name. */name82,2443
    int levels[VLF_N_DESTINATIONS]; /* Minimum log level for eachlevels83,2502
    int min_level;                /* Minimum log level for any destination. */min_level85,2623
    bool honor_rate_limits;       /* Set false to ignore rate limits. */honor_rate_limits86,2702
struct vlog_rate_limit {vlog_rate_limit95,2985
    struct token_bucket token_bucket;token_bucket96,3010
    time_t first_dropped;       /* Time first message was dropped. */first_dropped97,3048
    time_t last_dropped;        /* Time of most recent message drop. */last_dropped98,3118
    unsigned int n_dropped;     /* Number of messages dropped. */n_dropped99,3190
    struct ovs_mutex mutex;     /* Mutual exclusion for rate limit. */mutex100,3256
#define VLOG_MSG_TOKENS VLOG_MSG_TOKENS105,3479
#define VLOG_RATE_LIMIT_INIT(VLOG_RATE_LIMIT_INIT109,3664
#define VLOG_DEFINE_THIS_MODULE(VLOG_DEFINE_THIS_MODULE176,6596
#define VLOG_FATAL(VLOG_FATAL198,7918
#define VLOG_ABORT(VLOG_ABORT199,7980
#define VLOG_EMER(VLOG_EMER200,8042
#define VLOG_ERR(VLOG_ERR201,8093
#define VLOG_WARN(VLOG_WARN202,8142
#define VLOG_INFO(VLOG_INFO203,8193
#define VLOG_DBG(VLOG_DBG204,8244
#define VLOG_IS_ERR_ENABLED(VLOG_IS_ERR_ENABLED208,8452
#define VLOG_IS_WARN_ENABLED(VLOG_IS_WARN_ENABLED209,8521
#define VLOG_IS_INFO_ENABLED(VLOG_IS_INFO_ENABLED210,8592
#define VLOG_IS_DBG_ENABLED(VLOG_IS_DBG_ENABLED211,8663
#define VLOG_ERR_RL(VLOG_ERR_RL216,8811
#define VLOG_WARN_RL(VLOG_WARN_RL217,8874
#define VLOG_INFO_RL(VLOG_INFO_RL218,8939
#define VLOG_DBG_RL(VLOG_DBG_RL219,9004
#define VLOG_ERR_BUF(VLOG_ERR_BUF223,9191
#define VLOG_WARN_BUF(VLOG_WARN_BUF224,9261
#define VLOG_DROP_ERR(VLOG_DROP_ERR226,9334
#define VLOG_DROP_WARN(VLOG_DROP_WARN227,9404
#define VLOG_DROP_INFO(VLOG_DROP_INFO228,9476
#define VLOG_DROP_DBG(VLOG_DROP_DBG229,9548
#define VLOG_ERR_ONCE(VLOG_ERR_ONCE232,9672
#define VLOG_WARN_ONCE(VLOG_WARN_ONCE233,9731
#define VLOG_INFO_ONCE(VLOG_INFO_ONCE234,9792
#define VLOG_DBG_ONCE(VLOG_DBG_ONCE235,9853
#define VLOG_OPTION_ENUMS VLOG_OPTION_ENUMS238,9944
#define VLOG_LONG_OPTIONS VLOG_LONG_OPTIONS243,10121
#define VLOG_OPTION_HANDLERS VLOG_OPTION_HANDLERS249,10488
#define VLOG(VLOG266,11162
#define VLOG_RL(VLOG_RL273,11526
#define VLOG_ONCE(VLOG_ONCE280,11986
#define VLOG_ERRP(VLOG_ERRP288,12520

include/aes128.h,102
#define AES128_HAES128_H26,930
struct aes128 {aes12830,969
    uint32_t rk[128/8 + 28];rk31,985

include/async-append.h,46
#define ASYNC_APPEND_H ASYNC_APPEND_H17,622

include/backtrace.h,328
#define BACKTRACE_H BACKTRACE_H18,622
#define log_backtrace(log_backtrace61,2160
#define log_backtrace_msg(log_backtrace_msg62,2228
#define BACKTRACE_MAX_FRAMES BACKTRACE_MAX_FRAMES64,2303
struct backtrace {backtrace66,2336
    int n_frames;n_frames67,2355
    uintptr_t frames[BACKTRACE_MAX_FRAMES];frames68,2373

include/bfd.h,118
#define BFD_H BFD_H16,613
#define BFD_PACKET_LEN BFD_PACKET_LEN18,630
#define BFD_DEST_PORT BFD_DEST_PORT19,656

include/bitmap.h,1977
#define BITMAP_H BITMAP_H18,655
bitmap_unit__(const unsigned long *bitmap, size_t offset)bitmap_unit__25,764
bitmap_bit__(size_t offset)bitmap_bit__31,932
bitmap_n_longs(size_t n_bits)bitmap_n_longs37,1034
bitmap_n_bytes(size_t n_bits)bitmap_n_bytes43,1125
bitmap_allocate(size_t n_bits)bitmap_allocate49,1253
bitmap_init1(unsigned long *bitmap, size_t n_bits)bitmap_init156,1434
bitmap_allocate1(size_t n_bits)bitmap_allocate171,1861
bitmap_clone(const unsigned long *bitmap, size_t n_bits)bitmap_clone77,1994
bitmap_free(unsigned long *bitmap)bitmap_free83,2127
bitmap_is_set(const unsigned long *bitmap, size_t offset)bitmap_is_set89,2204
bitmap_set1(unsigned long *bitmap, size_t offset)bitmap_set195,2370
bitmap_set0(unsigned long *bitmap, size_t offset)bitmap_set0102,2534
bitmap_set(unsigned long *bitmap, size_t offset, bool value)bitmap_set109,2699
bitmap_set_n__(unsigned long *bitmap, size_t start, size_t n, bool value)bitmap_set_n__116,2902
bitmap_set_multiple(unsigned long *bitmap, size_t start, size_t count,bitmap_set_multiple130,3311
bitmap_count1(const unsigned long int *bitmap, size_t n)bitmap_count1152,4003
bitmap_and(unsigned long *dst, const unsigned long *arg, size_t n)bitmap_and166,4330
bitmap_or(unsigned long *dst, const unsigned long *arg, size_t n)bitmap_or178,4585
bitmap_not(unsigned long *dst, size_t n)bitmap_not190,4831
bitmap_equal(const unsigned long *a, const unsigned long *b, size_t n)bitmap_equal206,5213
bitmap_scan(const unsigned long *bitmap, bool target, size_t start, size_t end)bitmap_scan226,6018
bitmap_is_all_zeros(const unsigned long *bitmap, size_t n)bitmap_is_all_zeros257,6941
#define BITMAP_FOR_EACH_1_RANGE(BITMAP_FOR_EACH_1_RANGE262,7054
#define BITMAP_FOR_EACH_1(BITMAP_FOR_EACH_1265,7258
#define ULLONG_FOR_EACH_1(ULLONG_FOR_EACH_1269,7418
#define ULLONG_SET0(ULLONG_SET0274,7626
#define ULLONG_SET1(ULLONG_SET1275,7690
#define ULLONG_GET(ULLONG_GET278,7805

include/bundle.h,87
#define BUNDLE_H BUNDLE_H17,640
#define BUNDLE_MAX_SLAVES BUNDLE_MAX_SLAVES41,1090

include/byte-order.h,1701
#define BYTE_ORDER_H BYTE_ORDER_H17,646
htonll(uint64_t n)htonll27,855
ntohll(ovs_be64 n)ntohll33,979
hton128(const ovs_u128 src)hton12846,1350
ntoh128(const ovs_be128 src)ntoh12856,1518
uint32_byteswap(uint32_t crc) {uint32_byteswap66,1686
#define CONSTANT_HTONS(CONSTANT_HTONS77,2166
#define CONSTANT_HTONL(CONSTANT_HTONL78,2238
#define CONSTANT_HTONLL(CONSTANT_HTONLL79,2314
#define CONSTANT_HTONS(CONSTANT_HTONS82,2425
#define CONSTANT_HTONL(CONSTANT_HTONL85,2582
#define CONSTANT_HTONLL(CONSTANT_HTONLL90,2868
bytes_to_be32(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)bytes_to_be32108,3767
static inline ovs_be32 be16_to_be32(ovs_be16 x) { return x; }be16_to_be32122,4204
static inline ovs_be64 be16_to_be64(ovs_be16 x) { return x; }be16_to_be64123,4266
static inline ovs_be64 be32_to_be64(ovs_be32 x) { return x; }be32_to_be64124,4328
static inline ovs_be32 be64_to_be32(ovs_be64 x) { return x; }be64_to_be32125,4390
static inline ovs_be16 be64_to_be16(ovs_be64 x) { return x; }be64_to_be16126,4452
static inline ovs_be16 be32_to_be16(ovs_be32 x) { return x; }be32_to_be16127,4514
static inline ovs_be32 be16_to_be32(ovs_be16 x) { return (ovs_be32) x << 16; }be16_to_be32129,4605
static inline ovs_be64 be16_to_be64(ovs_be16 x) { return (ovs_be64) x << 48; }be16_to_be64130,4684
static inline ovs_be64 be32_to_be64(ovs_be32 x) { return (ovs_be64) x << 32; }be32_to_be64131,4763
static inline ovs_be32 be64_to_be32(ovs_be64 x) { return x >> 32; }be64_to_be32132,4842
static inline ovs_be16 be64_to_be16(ovs_be64 x) { return x >> 48; }be64_to_be16133,4910
static inline ovs_be16 be32_to_be16(ovs_be32 x) { return x >> 16; }be32_to_be16134,4978

include/byteq.h,350
#define BYTEQ_H BYTEQ_H17,627
struct byteq {byteq24,755
    uint8_t *buffer;            /* Circular queue. */buffer25,770
    unsigned int size;          /* Number of bytes allocated for 'buffer'. */size26,824
    unsigned int head;          /* Head of queue. */head27,902
    unsigned int tail;          /* Chases the head. */tail28,955

include/ccmap.h,117
#define CCMAP_H CCMAP_H18,624
struct ccmap {ccmap46,1339
    OVSRCU_TYPE(struct ccmap_impl *) impl;impl47,1354

include/cfm.h,1534
#define CFM_H CFM_H17,625
#define CFM_RANDOM_VLAN CFM_RANDOM_VLAN30,816
#define CFM_FAULT_REASONS CFM_FAULT_REASONS32,852
enum cfm_fault_bit_index {cfm_fault_bit_index40,1164
#define CFM_FAULT_REASON(CFM_FAULT_REASON41,1191
    CFM_FAULT_REASONSCFM_FAULT_REASONS42,1251
#undef CFM_FAULT_REASONCFM_FAULT_REASON43,1273
    CFM_FAULT_N_REASONSCFM_FAULT_N_REASONS44,1297
enum cfm_fault_reason {cfm_fault_reason47,1325
#define CFM_FAULT_REASON(CFM_FAULT_REASON48,1349
    CFM_FAULT_REASONSCFM_FAULT_REASONS50,1439
#undef CFM_FAULT_REASONCFM_FAULT_REASON51,1461
struct cfm_settings {cfm_settings54,1489
    uint64_t mpid;              /* The MPID of this CFM. */mpid55,1511
    int interval;               /* The requested transmission interval. */interval56,1571
    bool extended;              /* Run in extended mode. */extended57,1646
    bool demand;                /* Run in demand mode. */demand58,1706
    bool opup;                  /* Operational State. */opup59,1764
    uint16_t ccm_vlan;          /* CCM Vlan tag. Zero if none.ccm_vlan60,1821
    uint8_t ccm_pcp;            /* CCM Priority. Zero if none. */ccm_pcp62,1949
    bool check_tnl_key;         /* Verify inbound packet key? */check_tnl_key64,2016
struct cfm_status {cfm_status68,2109
    enum cfm_fault_reason faults;faults70,2205
    int remote_opstate;remote_opstate76,2450
    uint64_t flap_count;flap_count78,2475
    int health;health83,2673
    uint64_t *rmps;rmps86,2766
    size_t n_rmps;n_rmps87,2786

include/classifier-private.h,3911
#define CLASSIFIER_PRIVATE_H CLASSIFIER_PRIVATE_H18,643
struct cls_subtable {cls_subtable29,904
    struct cmap_node cmap_node;    /* Within classifier's 'subtables_map'. */cmap_node30,926
    int max_priority;              /* Max priority of any rule in subtable. */max_priority33,1054
    unsigned int max_count;        /* Count of max_priority rules. */max_count34,1133
    struct rculist rules_list;              /* Unordered. */rules_list37,1237
    const uint8_t n_indices;                   /* How many indices to use. */n_indices43,1486
    const struct flowmap index_maps[CLS_MAX_INDICES + 1]; /* Stage maps. */index_maps44,1564
    unsigned int trie_plen[CLS_MAX_TRIES];  /* Trie prefix length in 'mask'trie_plen45,1640
    const int ports_mask_len;ports_mask_len47,1790
    struct ccmap indices[CLS_MAX_INDICES];  /* Staged lookup indices. */indices48,1820
    rcu_trie_ptr ports_trie;                /* NULL if none. */ports_trie49,1893
    struct cmap rules;                      /* Contains 'cls_match'es. */rules52,2010
    const struct minimask mask;             /* Wildcards for fields. */mask53,2084
struct cls_match {cls_match64,2569
    OVSRCU_TYPE(struct cls_match *) next; /* Equal, lower-priority matches. */next66,2621
    OVSRCU_TYPE(struct cls_conjunction_set *) conj_set;conj_set67,2700
    const int priority;         /* Larger numbers are higher priorities. */priority70,2814
    struct cmap_node cmap_node; /* Within struct cls_subtable 'rules'. */cmap_node73,2926
    struct versions versions;versions76,3028
    const struct cls_rule *cls_rule;cls_rule78,3059
    const struct miniflow flow; /* Matching rule. Mask is in the subtable. */flow79,3096
get_cls_match_protected(const struct cls_rule *rule)get_cls_match_protected85,3325
get_cls_match(const struct cls_rule *rule)get_cls_match91,3487
cls_match_set_remove_version(struct cls_match *rule, ovs_version_t version)cls_match_set_remove_version100,3689
cls_match_visible_in_version(const struct cls_match *rule,cls_match_visible_in_version106,3848
cls_match_is_eventually_invisible(const struct cls_match *rule)cls_match_is_eventually_invisible113,4049
cls_match_next(const struct cls_match *rule)cls_match_next122,4245
cls_match_next_protected(const struct cls_match *rule)cls_match_next_protected128,4384
cls_match_insert(struct cls_match *prev, struct cls_match *next,cls_match_insert139,4796
cls_match_replace(struct cls_match *prev,cls_match_replace157,5469
cls_match_remove(struct cls_match *prev, struct cls_match *rule)cls_match_remove174,6199
#define CLS_MATCH_FOR_EACH(CLS_MATCH_FOR_EACH181,6356
#define CLS_MATCH_FOR_EACH_AFTER_HEAD(CLS_MATCH_FOR_EACH_AFTER_HEAD184,6492
#define FOR_EACH_RULE_IN_LIST_PROTECTED(FOR_EACH_RULE_IN_LIST_PROTECTED188,6672
struct trie_node {trie_node195,6987
    uint32_t prefix;           /* Prefix bits for this node, MSB first. */prefix196,7006
    uint8_t  n_bits;           /* Never zero, except for the root node. */n_bits197,7081
    unsigned int n_rules;      /* Number of rules that have this prefix. */n_rules198,7156
    rcu_trie_ptr edges[2];     /* Both NULL if leaf. */edges199,7232
#define TRIE_PREFIX_BITS TRIE_PREFIX_BITS204,7422
flow_hash_in_minimask(const struct flow *flow, const struct minimask *mask,flow_hash_in_minimask216,7879
miniflow_hash_in_minimask(const struct miniflow *flow,miniflow_hash_in_minimask243,8748
flow_hash_in_minimask_range(const struct flow *flow,flow_hash_in_minimask_range272,9993
flow_wildcards_fold_minimask(struct flow_wildcards *wc,flow_wildcards_fold_minimask300,10916
flow_wildcards_fold_minimask_in_map(struct flow_wildcards *wc,flow_wildcards_fold_minimask_in_map309,11259
minimask_hash(const struct minimask *mask, uint32_t basis)minimask_hash318,11601
minimatch_hash_range(const struct minimatch *match,minimatch_hash_range350,12855

include/classifier.h,2424
#define CLASSIFIER_H CLASSIFIER_H18,665
typedef OVSRCU_TYPE(struct trie_node *) rcu_trie_ptr;rcu_trie_ptr318,15642
struct cls_trie {cls_trie321,15729
    const struct mf_field *field; /* Trie field, or NULL. */field322,15747
    rcu_trie_ptr root;            /* NULL if none. */root323,15808
    CLS_MAX_INDICES = 3,   /* Maximum number of lookup indices per subtable. */CLS_MAX_INDICES327,15873
    CLS_MAX_TRIES = 3      /* Maximum number of prefix trees per classifier. */CLS_MAX_TRIES328,15953
struct classifier {classifier332,16062
    int n_rules;                    /* Total number of rules. */n_rules333,16082
    uint8_t n_flow_segments;n_flow_segments334,16147
    uint8_t flow_segments[CLS_MAX_INDICES]; /* Flow segment boundaries to useflow_segments335,16176
    struct cmap subtables_map;      /* Contains "struct cls_subtable"s.  */subtables_map337,16323
    struct pvector subtables;subtables338,16399
    struct cmap partitions;         /* Contains "struct cls_partition"s. */partitions339,16429
    struct cls_trie tries[CLS_MAX_TRIES]; /* Prefix tries. */tries340,16505
    unsigned int n_tries;n_tries341,16567
    bool publish;                   /* Make changes visible to lookups? */publish342,16593
struct cls_conjunction {cls_conjunction345,16672
    uint32_t id;id346,16697
    uint8_t clause;clause347,16714
    uint8_t n_clauses;n_clauses348,16734
struct cls_rule {cls_rule352,16808
    struct rculist node;          /* In struct cls_subtable 'rules_list'. */node353,16826
    const int priority;           /* Larger numbers are higher priorities. */priority354,16903
    OVSRCU_TYPE(struct cls_match *) cls_match;  /* NULL if not in acls_match355,16981
    const struct minimatch match; /* Matching rule. */match357,17115
struct cls_cursor {cls_cursor434,21345
    const struct classifier *cls;cls435,21365
    const struct cls_subtable *subtable;subtable436,21399
    const struct cls_rule *target;target437,21440
    ovs_version_t version;   /* Version to iterate. */version438,21475
    struct pvector_cursor subtables;subtables439,21530
    const struct cls_rule *rule;rule440,21567
#define CLS_FOR_EACH(CLS_FOR_EACH448,21830
#define CLS_FOR_EACH_TARGET(CLS_FOR_EACH_TARGET450,21950
classifier_defer(struct classifier *cls)classifier_defer461,22506
classifier_publish(struct classifier *cls)classifier_publish467,22597

include/cmap.h,1599
#define CMAP_H CMAP_H18,623
struct cmap_node {cmap_node61,2071
    OVSRCU_TYPE(struct cmap_node *) next; /* Next node with same hash. */next62,2090
cmap_node_next(const struct cmap_node *node)cmap_node_next66,2201
cmap_node_next_protected(const struct cmap_node *node)cmap_node_next_protected72,2340
struct cmap {cmap78,2493
    OVSRCU_TYPE(struct cmap_impl *) impl;impl79,2507
#define CMAP_INITIALIZER CMAP_INITIALIZER83,2590
extern OVS_ALIGNED_VAR(CACHE_LINE_SIZE) const struct cmap_impl empty_cmap;empty_cmap86,2744
#define CMAP_NODE_FOR_EACH(CMAP_NODE_FOR_EACH131,4582
#define CMAP_NODE_FOR_EACH_PROTECTED(CMAP_NODE_FOR_EACH_PROTECTED135,4878
#define CMAP_FOR_EACH_WITH_HASH(CMAP_FOR_EACH_WITH_HASH140,5212
#define CMAP_FOR_EACH_WITH_HASH_PROTECTED(CMAP_FOR_EACH_WITH_HASH_PROTECTED142,5334
#define CMAP_CURSOR_FOR_EACH__(CMAP_CURSOR_FOR_EACH__211,8069
#define CMAP_CURSOR_FOR_EACH(CMAP_CURSOR_FOR_EACH218,8374
#define CMAP_CURSOR_FOR_EACH_CONTINUE(CMAP_CURSOR_FOR_EACH_CONTINUE223,8571
struct cmap_cursor {cmap_cursor226,8693
    const struct cmap_impl *impl;impl227,8714
    uint32_t bucket_idx;bucket_idx228,8748
    int entry_idx;entry_idx229,8773
    struct cmap_node *node;node230,8792
#define CMAP_FOR_EACH(CMAP_FOR_EACH236,8932
struct cmap_position {cmap_position245,9342
    unsigned int bucket;bucket246,9365
    unsigned int entry;entry247,9390
    unsigned int offset;offset248,9414
cmap_first(const struct cmap *cmap)cmap_first257,9698
cmap_remove(struct cmap *cmap, struct cmap_node *node, uint32_t hash)cmap_remove274,10300

include/colors.h,307
#define COLORS_H COLORS_H18,617
struct colors {colors22,659
    char *actions;actions27,854
    char *drop;drop28,873
    char *learn;learn29,889
    char *param;param30,906
    char *paren;paren31,923
    char *special;special32,940
    char *value;value33,959
    char *end;end36,1003

include/command-line.h,835
#define COMMAND_LINE_H COMMAND_LINE_H18,637
struct ovs_cmdl_context {ovs_cmdl_context27,775
    int argc;argc29,844
    char **argv;argv31,900
    void *pvt;pvt33,972
typedef void (*ovs_cmdl_handler)(struct ovs_cmdl_context *);ovs_cmdl_handler36,991
struct ovs_cmdl_command {ovs_cmdl_command38,1053
    const char *name;name39,1079
    const char *usage;usage40,1101
    int min_args;min_args41,1124
    int max_args;max_args42,1142
    ovs_cmdl_handler handler;handler43,1160
    enum { OVS_RO, OVS_RW } mode;    /* Does this command modify things? */OVS_RO44,1190
    enum { OVS_RO, OVS_RW } mode;    /* Does this command modify things? */OVS_RW44,1190
    enum { OVS_RO, OVS_RW } mode;    /* Does this command modify things? */mode44,1190
#define ovs_cmdl_proctitle_set ovs_cmdl_proctitle_set57,1824

include/compiler.h,498
#define COMPILER_H COMPILER_H18,657
#define STRFTIME_FORMAT(STRFTIME_FORMAT23,743
#define MALLOC_LIKE MALLOC_LIKE24,822
#define ALWAYS_INLINE ALWAYS_INLINE25,870
#define SENTINEL(SENTINEL26,923
#define STRFTIME_FORMAT(STRFTIME_FORMAT28,978
#define MALLOC_LIKEMALLOC_LIKE29,1007
#define ALWAYS_INLINEALWAYS_INLINE30,1027
#define SENTINEL(SENTINEL31,1049
#define DO_PRAGMA(DO_PRAGMA37,1198
#define BUILD_MESSAGE(BUILD_MESSAGE38,1231
#define BUILD_MESSAGE(BUILD_MESSAGE41,1290

include/coverage.h,815
#define COVERAGE_H COVERAGE_H18,651
#define COVERAGE_RUN_INTERVAL COVERAGE_RUN_INTERVAL36,1361
#define COVERAGE_CLEAR_INTERVAL COVERAGE_CLEAR_INTERVAL39,1455
#define MIN_AVG_LEN MIN_AVG_LEN43,1614
#define HR_AVG_LEN HR_AVG_LEN44,1664
struct coverage_counter {coverage_counter47,1714
    const char *const name;            /* Textual name. */name48,1740
    unsigned int (*const count)(void); /* Gets, zeros this thread's count. */count49,1799
    unsigned long long int total;      /* Total count. */total50,1877
    unsigned long long int last_total;last_total51,1935
    unsigned int min[MIN_AVG_LEN];min53,2011
    unsigned int hr[HR_AVG_LEN];hr54,2046
#define COVERAGE_DEFINE(COVERAGE_DEFINE61,2243
#define COVERAGE_INC(COVERAGE_INC83,3685
#define COVERAGE_ADD(COVERAGE_ADD86,3771

include/crc32c.h,34
#define CRC32C_H CRC32C_H19,657

include/dhcp.h,1754
#define DHCP_H DHCP_H18,623
#define DHCP_SERVER_PORT DHCP_SERVER_PORT25,727
#define DHCP_CLIENT_PORT DHCP_CLIENT_PORT26,800
#define DHCP_MAGIC_COOKIE DHCP_MAGIC_COOKIE28,874
#define DHCP_HEADER_LEN DHCP_HEADER_LEN30,912
struct dhcp_header {dhcp_header31,940
    uint8_t op;                 /* DHCP_BOOTREQUEST or DHCP_BOOTREPLY. */op32,961
    uint8_t htype;              /* ARP_HRD_ETHERNET (typically). */htype33,1035
    uint8_t hlen;               /* ETH_ADDR_LEN (typically). */hlen34,1103
    uint8_t hops;               /* Hop count; set to 0 by client. */hops35,1167
    ovs_be32 xid;               /* Transaction ID. */xid36,1236
    ovs_be16 secs;              /* Since client started address acquisition. */secs37,1290
    ovs_be16 flags;             /* DHCP_FLAGS_*. */flags38,1370
    ovs_be32 ciaddr;            /* Client IP, if it has a lease for one. */ciaddr39,1422
    ovs_be32 yiaddr;            /* Client ("your") IP address. */yiaddr40,1498
    ovs_be32 siaddr;            /* Next server IP address. */siaddr41,1564
    ovs_be32 giaddr;            /* Relay agent IP address. */giaddr42,1626
    uint8_t chaddr[16];         /* Client hardware address. */chaddr43,1688
    char sname[64];             /* Optional server host name. */sname44,1751
    char file[128];             /* Boot file name. */file45,1816
#define DHCP_OP_REQUEST DHCP_OP_REQUEST50,1993
#define DHCP_OP_REPLY DHCP_OP_REPLY51,2022
#define DHCP_MSG_DISCOVER DHCP_MSG_DISCOVER53,2052
#define DHCP_MSG_OFFER DHCP_MSG_OFFER54,2081
#define DHCP_MSG_REQUEST DHCP_MSG_REQUEST55,2110
#define DHCP_MSG_ACK DHCP_MSG_ACK56,2139
#define DHCP_OPT_MSG_TYPE DHCP_OPT_MSG_TYPE58,2169
#define DHCP_OPT_END DHCP_OPT_END59,2199

include/dhparams.h,38
#define DHPARAMS_H DHPARAMS_H18,627

include/dirs.h,30
#define DIRS_H DIRS_H18,641

include/dp-packet.h,8008
#define DPBUF_H DPBUF_H18,648
enum OVS_PACKED_ENUM dp_packet_source {dp_packet_source38,935
    DPBUF_MALLOC,              /* Obtained via malloc(). */DPBUF_MALLOC39,975
    DPBUF_STACK,               /* Un-movable stack space or static buffer. */DPBUF_STACK40,1035
    DPBUF_STUB,                /* Starts on stack, may expand into heap. */DPBUF_STUB41,1113
    DPBUF_DPDK,                /* buffer data is from DPDK allocated memory.DPBUF_DPDK42,1189
#define DP_PACKET_CONTEXT_SIZE DP_PACKET_CONTEXT_SIZE46,1352
struct dp_packet {dp_packet52,1591
    struct rte_mbuf mbuf;       /* DPDK mbuf */mbuf54,1629
    enum dp_packet_source source;  /* Source of memory allocated as 'base'. */source63,2066
    uint8_t l2_pad_size;           /* Detected l2 padding size.l2_pad_size64,2145
    uint16_t l2_5_ofs;             /* MPLS label stack offset, or UINT16_MAX */l2_5_ofs66,2275
    uint16_t l3_ofs;               /* Network-level header offset,l3_ofs67,2355
    uint16_t l4_ofs;               /* Transport-level header offset,l4_ofs69,2478
    uint32_t cutlen;               /* length in bytes to cut from the end. */cutlen71,2603
    ovs_be32 packet_type;          /* Packet type as defined in OpenFlow */packet_type72,2681
        struct pkt_metadata md;md74,2769
        uint64_t data[DP_PACKET_CONTEXT_SIZE / 8];data75,2801
dp_packet_delete(struct dp_packet *b)dp_packet_delete164,7304
dp_packet_at(const struct dp_packet *b, size_t offset, size_t size)dp_packet_at182,7804
dp_packet_at_assert(const struct dp_packet *b, size_t offset, size_t size)dp_packet_at_assert192,8123
dp_packet_tail(const struct dp_packet *b)dp_packet_tail200,8405
dp_packet_end(const struct dp_packet *b)dp_packet_end208,8646
dp_packet_headroom(const struct dp_packet *b)dp_packet_headroom218,9041
dp_packet_tailroom(const struct dp_packet *b)dp_packet_tailroom226,9314
dp_packet_clear(struct dp_packet *b)dp_packet_clear233,9483
dp_packet_pull(struct dp_packet *b, size_t size)dp_packet_pull242,9769
dp_packet_try_pull(struct dp_packet *b, size_t size)dp_packet_try_pull255,10279
dp_packet_equal(const struct dp_packet *a, const struct dp_packet *b)dp_packet_equal262,10462
dp_packet_is_eth(const struct dp_packet *b)dp_packet_is_eth269,10686
dp_packet_eth(const struct dp_packet *b)dp_packet_eth277,10921
dp_packet_reset_offsets(struct dp_packet *b)dp_packet_reset_offsets286,11176
dp_packet_l2_pad_size(const struct dp_packet *b)dp_packet_l2_pad_size295,11358
dp_packet_set_l2_pad_size(struct dp_packet *b, uint8_t pad_size)dp_packet_set_l2_pad_size301,11458
dp_packet_l2_5(const struct dp_packet *b)dp_packet_l2_5308,11627
dp_packet_set_l2_5(struct dp_packet *b, void *l2_5)dp_packet_set_l2_5316,11803
dp_packet_l3(const struct dp_packet *b)dp_packet_l3324,11999
dp_packet_set_l3(struct dp_packet *b, void *l3)dp_packet_set_l3332,12169
dp_packet_l4(const struct dp_packet *b)dp_packet_l4338,12319
dp_packet_set_l4(struct dp_packet *b, void *l4)dp_packet_set_l4346,12489
dp_packet_l4_size(const struct dp_packet *b)dp_packet_l4_size352,12639
dp_packet_get_tcp_payload(const struct dp_packet *b)dp_packet_get_tcp_payload361,12873
dp_packet_get_udp_payload(const struct dp_packet *b)dp_packet_get_udp_payload377,13310
dp_packet_get_sctp_payload(const struct dp_packet *b)dp_packet_get_sctp_payload384,13522
dp_packet_get_icmp_payload(const struct dp_packet *b)dp_packet_get_icmp_payload391,13737
dp_packet_get_nd_payload(const struct dp_packet *b)dp_packet_get_nd_payload398,13952
dp_packet_base(const struct dp_packet *b)dp_packet_base408,14227
dp_packet_set_base(struct dp_packet *b, void *d)dp_packet_set_base414,14322
dp_packet_size(const struct dp_packet *b)dp_packet_size420,14425
dp_packet_set_size(struct dp_packet *b, uint32_t v)dp_packet_set_size426,14519
__packet_data(const struct dp_packet *b)__packet_data442,15202
__packet_set_data(struct dp_packet *b, uint16_t v)__packet_set_data448,15296
dp_packet_get_allocated(const struct dp_packet *b)dp_packet_get_allocated454,15401
dp_packet_set_allocated(struct dp_packet *b, uint16_t s)dp_packet_set_allocated460,15504
dp_packet_base(const struct dp_packet *b)dp_packet_base466,15617
dp_packet_set_base(struct dp_packet *b, void *d)dp_packet_set_base472,15704
dp_packet_size(const struct dp_packet *b)dp_packet_size478,15799
dp_packet_set_size(struct dp_packet *b, uint32_t v)dp_packet_set_size484,15886
__packet_data(const struct dp_packet *b)__packet_data490,15984
__packet_set_data(struct dp_packet *b, uint16_t v)__packet_set_data496,16073
dp_packet_get_allocated(const struct dp_packet *b)dp_packet_get_allocated502,16173
dp_packet_set_allocated(struct dp_packet *b, uint16_t s)dp_packet_set_allocated508,16274
dp_packet_reset_cutlen(struct dp_packet *b)dp_packet_reset_cutlen515,16385
dp_packet_set_cutlen(struct dp_packet *b, uint32_t max_len)dp_packet_set_cutlen521,16476
dp_packet_get_cutlen(const struct dp_packet *b)dp_packet_get_cutlen536,16794
dp_packet_get_send_len(const struct dp_packet *b)dp_packet_get_send_len543,16959
dp_packet_data(const struct dp_packet *b)dp_packet_data549,17091
dp_packet_set_data(struct dp_packet *b, void *data)dp_packet_set_data556,17266
dp_packet_reset_packet(struct dp_packet *b, int off)dp_packet_reset_packet566,17493
dp_packet_get_rss_hash(struct dp_packet *p)dp_packet_get_rss_hash576,17866
dp_packet_set_rss_hash(struct dp_packet *p, uint32_t hash)dp_packet_set_rss_hash586,18019
dp_packet_rss_valid(struct dp_packet *p)dp_packet_rss_valid598,18258
dp_packet_rss_invalidate(struct dp_packet *p OVS_UNUSED)dp_packet_rss_invalidate608,18432
dp_packet_mbuf_rss_flag_reset(struct dp_packet *p OVS_UNUSED)dp_packet_mbuf_rss_flag_reset616,18571
dp_packet_mbuf_init(struct dp_packet *p OVS_UNUSED)dp_packet_mbuf_init628,18967
dp_packet_ip_checksum_valid(struct dp_packet *p)dp_packet_ip_checksum_valid636,19095
dp_packet_ip_checksum_bad(struct dp_packet *p)dp_packet_ip_checksum_bad647,19309
dp_packet_l4_checksum_valid(struct dp_packet *p)dp_packet_l4_checksum_valid658,19520
dp_packet_l4_checksum_bad(struct dp_packet *p)dp_packet_l4_checksum_bad669,19734
reset_dp_packet_checksum_ol_flags(struct dp_packet *p)reset_dp_packet_checksum_ol_flags681,19964
#define reset_dp_packet_checksum_ol_flags(reset_dp_packet_checksum_ol_flags687,20171
enum { NETDEV_MAX_BURST = 32 }; /* Maximum number packets in a batch. */NETDEV_MAX_BURST690,20226
struct dp_packet_batch {dp_packet_batch692,20300
    size_t count;count693,20325
    bool trunc; /* true if the batch needs truncate. */trunc694,20343
    struct dp_packet *packets[NETDEV_MAX_BURST];packets695,20399
dp_packet_batch_init(struct dp_packet_batch *batch)dp_packet_batch_init699,20471
dp_packet_batch_add__(struct dp_packet_batch *batch,dp_packet_batch_add__706,20595
dp_packet_batch_add(struct dp_packet_batch *batch, struct dp_packet *packet)dp_packet_batch_add718,20934
dp_packet_batch_size(const struct dp_packet_batch *batch)dp_packet_batch_size724,21097
dp_packet_batch_refill_init(struct dp_packet_batch *batch)dp_packet_batch_refill_init732,21306
dp_packet_batch_refill(struct dp_packet_batch *batch,dp_packet_batch_refill738,21412
dp_packet_batch_init_packet(struct dp_packet_batch *batch, struct dp_packet *p)dp_packet_batch_init_packet745,21625
dp_packet_batch_is_empty(const struct dp_packet_batch *batch)dp_packet_batch_is_empty753,21811
#define DP_PACKET_BATCH_FOR_EACH(DP_PACKET_BATCH_FOR_EACH758,21919
#define DP_PACKET_BATCH_REFILL_FOR_EACH(DP_PACKET_BATCH_REFILL_FOR_EACH773,22605
dp_packet_batch_clone(struct dp_packet_batch *dst,dp_packet_batch_clone778,22822
dp_packet_delete_batch(struct dp_packet_batch *batch, bool may_steal)dp_packet_delete_batch791,23149
dp_packet_batch_apply_cutlen(struct dp_packet_batch *batch)dp_packet_batch_apply_cutlen804,23441
dp_packet_batch_reset_cutlen(struct dp_packet_batch *batch)dp_packet_batch_reset_cutlen818,23797

include/dpctl.h,505
#define DPCTL_H DPCTL_H17,617
struct dpctl_params {dpctl_params23,681
    bool is_appctl;is_appctl25,757
    bool print_statistics;print_statistics28,834
    bool zero_statistics;zero_statistics31,938
    bool may_create;may_create34,1035
    bool read_only;read_only37,1105
    int verbosity;verbosity40,1175
    bool names;names43,1240
    void (*output)(void *aux, bool error, const char *string);output49,1506
    void *aux;aux50,1569
    void (*usage)(void *aux);usage53,1652

include/dummy.h,362
#define DUMMY_H DUMMY_H18,642
enum dummy_level {dummy_level27,913
    DUMMY_OVERRIDE_NONE,        /* Support dummy but don't force its use. */DUMMY_OVERRIDE_NONE28,932
    DUMMY_OVERRIDE_SYSTEM,      /* Replace "system" by dummy. */DUMMY_OVERRIDE_SYSTEM29,1009
    DUMMY_OVERRIDE_ALL,         /* Replace all types by dummy. */DUMMY_OVERRIDE_ALL30,1074

include/entropy.h,36
#define ENTROPY_H ENTROPY_H17,617

include/flow.h,8165
#define FLOW_H FLOW_H17,670
#define FLOW_MAX_PACKET_U64S FLOW_MAX_PACKET_U64S47,1407
#define FLOW_U64_OFFSET(FLOW_U64_OFFSET60,2006
#define FLOW_U64_OFFREM(FLOW_U64_OFFREM62,2118
#define FLOW_U64_SIZE(FLOW_U64_SIZE66,2282
flow_get_xreg(const struct flow *flow, int idx)flow_get_xreg135,5869
flow_set_xreg(struct flow *flow, int idx, uint64_t value)flow_set_xreg141,6018
flow_get_xxreg(const struct flow *flow, int idx)flow_get_xxreg148,6180
flow_set_xxreg(struct flow *flow, int idx, ovs_u128 value)flow_set_xxreg161,6501
flow_compare_3way(const struct flow *a, const struct flow *b)flow_compare_3way170,6767
flow_equal(const struct flow *a, const struct flow *b)flow_equal176,6889
flow_hash(const struct flow *flow, uint32_t basis)flow_hash182,7007
ofp_to_u16(ofp_port_t ofp_port)ofp_to_u16188,7156
odp_to_u32(odp_port_t odp_port)odp_to_u32194,7258
ofp11_to_u32(ofp11_port_t ofp11_port)ofp11_to_u32200,7360
u16_to_ofp(uint16_t port)u16_to_ofp206,7472
u32_to_odp(uint32_t port)u32_to_odp212,7557
u32_to_ofp11(uint32_t port)u32_to_ofp11218,7644
hash_ofp_port(ofp_port_t ofp_port)hash_ofp_port224,7731
hash_odp_port(odp_port_t odp_port)hash_odp_port230,7840
typedef unsigned long long map_t;map_t260,9139
#define MAP_T_BITS MAP_T_BITS261,9173
#define MAP_1 MAP_1262,9219
#define MAP_MAX MAP_MAX263,9242
#define MAP_IS_SET(MAP_IS_SET265,9279
#define MAP_FOR_EACH_INDEX(MAP_FOR_EACH_INDEX268,9394
#define FLOWMAP_UNITS FLOWMAP_UNITS271,9477
struct flowmap {flowmap273,9536
    map_t bits[FLOWMAP_UNITS];bits274,9553
#define FLOWMAP_EMPTY_INITIALIZER FLOWMAP_EMPTY_INITIALIZER277,9588
#define FLOWMAP_HAS_FIELD(FLOWMAP_HAS_FIELD293,10442
#define FLOWMAP_SET(FLOWMAP_SET296,10587
#define FLOWMAP_SET__(FLOWMAP_SET__299,10724
#define FLOWMAP_CLEAR(FLOWMAP_CLEAR304,10940
#define FLOWMAP_FOR_EACH_UNIT(FLOWMAP_FOR_EACH_UNIT310,11284
#define FLOWMAP_FOR_EACH_MAP(FLOWMAP_FOR_EACH_MAP314,11445
#define FLOWMAP_AUX_INITIALIZER(FLOWMAP_AUX_INITIALIZER322,11779
#define FLOWMAP_FOR_EACH_INDEX(FLOWMAP_FOR_EACH_INDEX327,12032
flowmap_init(struct flowmap *fm)flowmap_init333,12276
flowmap_equal(struct flowmap a, struct flowmap b)flowmap_equal339,12364
flowmap_is_set(const struct flowmap *fm, size_t idx)flowmap_is_set345,12476
flowmap_are_set(const struct flowmap *fm, size_t idx, unsigned int n_bits)flowmap_are_set353,12755
flowmap_set(struct flowmap *fm, size_t idx, unsigned int n_bits)flowmap_set375,13511
flowmap_clear(struct flowmap *fm, size_t idx, unsigned int n_bits)flowmap_clear395,14253
flowmap_or(struct flowmap a, struct flowmap b)flowmap_or414,14940
flowmap_and(struct flowmap a, struct flowmap b)flowmap_and427,15210
flowmap_is_empty(struct flowmap fm)flowmap_is_empty439,15435
flowmap_n_1bits(struct flowmap fm)flowmap_n_1bits452,15634
struct flowmap_aux {flowmap_aux463,15830
    size_t unit;unit464,15851
    struct flowmap map;map465,15868
flowmap_next_index(struct flowmap_aux *aux, size_t *idx)flowmap_next_index469,15915
struct miniflow {miniflow510,17583
    struct flowmap map;map511,17601
BUILD_ASSERT_DECL(sizeof(struct miniflow) % sizeof(uint64_t) == 0);uint64_t516,17731
#define MINIFLOW_VALUES_SIZE(MINIFLOW_VALUES_SIZE518,17800
static inline uint64_t *miniflow_values(struct miniflow *mf)miniflow_values520,17866
static inline const uint64_t *miniflow_get_values(const struct miniflow *mf)miniflow_get_values525,17965
static inline uint64_t flow_u64_value(const struct flow *flow, size_t index)flow_u64_value547,18860
static inline uint64_t *flow_u64_lvalue(struct flow *flow, size_t index)flow_u64_lvalue552,18980
miniflow_n_values(const struct miniflow *flow)miniflow_n_values558,19118
struct flow_for_each_in_maps_aux {flow_for_each_in_maps_aux563,19209
    const struct flow *flow;flow564,19244
    struct flowmap_aux map_aux;map_aux565,19273
flow_values_get_next_in_maps(struct flow_for_each_in_maps_aux *aux,flow_values_get_next_in_maps569,19328
#define FLOW_FOR_EACH_IN_MAPS(FLOW_FOR_EACH_IN_MAPS582,19672
struct mf_for_each_in_map_aux {mf_for_each_in_map_aux587,19917
    size_t unit;             /* Current 64-bit unit of the flowmapsunit588,19949
    struct flowmap fmap;     /* Remaining 1-bits corresponding to thefmap590,20069
    struct flowmap map;      /* Remaining 1-bits corresponding to themap592,20203
    const uint64_t *values;  /* 64-bit words corresponding to thevalues594,20334
mf_get_next_in_map(struct mf_for_each_in_map_aux *aux,mf_get_next_in_map610,21062
#define MINIFLOW_FOR_EACH_IN_FLOWMAP(MINIFLOW_FOR_EACH_IN_FLOWMAP653,22416
miniflow_values_get__(const uint64_t *values, map_t map, size_t idx)miniflow_values_get__660,22774
miniflow_get__(const struct miniflow *mf, size_t idx)miniflow_get__668,23025
#define MINIFLOW_IN_MAP(MINIFLOW_IN_MAP680,23333
#define MINIFLOW_GET_TYPE(MINIFLOW_GET_TYPE684,23510
#define MINIFLOW_GET_U128(MINIFLOW_GET_U128690,23821
#define MINIFLOW_GET_U8(MINIFLOW_GET_U8697,24264
#define MINIFLOW_GET_U16(MINIFLOW_GET_U16699,24358
#define MINIFLOW_GET_BE16(MINIFLOW_GET_BE16701,24453
#define MINIFLOW_GET_U32(MINIFLOW_GET_U32703,24548
#define MINIFLOW_GET_BE32(MINIFLOW_GET_BE32705,24643
#define MINIFLOW_GET_U64(MINIFLOW_GET_U64707,24738
#define MINIFLOW_GET_BE64(MINIFLOW_GET_BE64709,24833
struct minimask {minimask740,26324
    struct miniflow masks;masks741,26342
minimask_is_catchall(const struct minimask *mask)minimask_is_catchall766,27434
static inline uint64_t miniflow_get(const struct miniflow *flow,miniflow_get776,27830
static inline uint32_t miniflow_get_u32(const struct miniflow *flow,miniflow_get_u32782,28038
static inline ovs_be32 miniflow_get_be32(const struct miniflow *flow,miniflow_get_be32794,28358
miniflow_get_vid(const struct miniflow *flow, size_t n)miniflow_get_vid803,28681
minimask_get_u32(const struct minimask *mask, unsigned int u32_ofs)minimask_get_u32817,29093
minimask_get_be32(const struct minimask *mask, unsigned int be32_ofs)minimask_get_be32823,29241
minimask_get_vid_mask(const struct minimask *mask, size_t n)minimask_get_vid_mask831,29515
miniflow_get_tcp_flags(const struct miniflow *flow)miniflow_get_tcp_flags838,29710
miniflow_get_metadata(const struct miniflow *flow)miniflow_get_metadata845,29917
minimask_get_metadata_mask(const struct minimask *mask)minimask_get_metadata_mask857,30367
flow_union_with_miniflow_subset(struct flow *dst, const struct miniflow *src,flow_union_with_miniflow_subset866,30692
flow_union_with_miniflow(struct flow *dst, const struct miniflow *src)flow_union_with_miniflow886,31263
static inline bool is_ct_valid(const struct flow *flow,is_ct_valid891,31396
#define CS_VALID_MASK CS_VALID_MASK907,32235
pkt_metadata_from_flow(struct pkt_metadata *md, const struct flow *flow)pkt_metadata_from_flow915,32428
#define FLOW_WC_GET_AND_MASK_WC(FLOW_WC_GET_AND_MASK_WC960,33995
static inline bool is_ethernet(const struct flow *flow,is_ethernet963,34111
static inline ovs_be16 get_dl_type(const struct flow *flow)get_dl_type972,34337
static inline bool is_vlan(const struct flow *flow,is_vlan983,34650
static inline bool is_ip_any(const struct flow *flow)is_ip_any995,34962
static inline bool is_ip_proto(const struct flow *flow, uint8_t ip_proto,is_ip_proto1000,35070
static inline bool is_tcp(const struct flow *flow,is_tcp1012,35370
static inline bool is_udp(const struct flow *flow,is_udp1018,35526
static inline bool is_sctp(const struct flow *flow,is_sctp1024,35682
static inline bool is_icmpv4(const struct flow *flow,is_icmpv41030,35841
static inline bool is_icmpv6(const struct flow *flow,is_icmpv61042,36180
static inline bool is_nd(const struct flow *flow,is_nd1054,36523
static inline bool is_igmp(const struct flow *flow, struct flow_wildcards *wc)is_igmp1074,37080
static inline bool is_mld(const struct flow *flow,is_mld1085,37388
static inline bool is_mld_query(const struct flow *flow,is_mld_query1100,37859
static inline bool is_mld_report(const struct flow *flow,is_mld_report1112,38182
static inline bool is_stp(const struct flow *flow)is_stp1118,38361

include/guarded-list.h,264
#define GUARDED_LIST_H GUARDED_LIST_H18,625
struct guarded_list {guarded_list25,748
    struct ovs_mutex mutex;mutex26,770
    struct ovs_list list;list27,798
    size_t n;n28,824
#define GUARDED_OVS_LIST_INITIALIZER(GUARDED_OVS_LIST_INITIALIZER31,842

include/hash.h,3003
#define HASH_H HASH_H17,652
hash_rot(uint32_t x, int k)hash_rot30,833
static inline uint32_t mhash_add__(uint32_t hash, uint32_t data)mhash_add__63,2066
static inline uint32_t mhash_add(uint32_t hash, uint32_t data)mhash_add76,2346
static inline uint32_t mhash_finish(uint32_t hash)mhash_finish83,2515
static inline uint32_t hash_add(uint32_t hash, uint32_t data)hash_add104,3229
static inline uint32_t hash_add64(uint32_t hash, uint64_t data)hash_add64109,3330
static inline uint32_t hash_finish(uint32_t hash, uint32_t final)hash_finish114,3454
hash_words_inline(const uint32_t *p, size_t n_words, uint32_t basis)hash_words_inline125,3808
hash_words64_inline(const uint64_t *p, size_t n_words, uint32_t basis)hash_words64_inline131,3977
static inline uint32_t hash_pointer(const void *p, uint32_t basis)hash_pointer136,4127
static inline uint32_t hash_2words(uint32_t x, uint32_t y)hash_2words149,4789
static inline uint32_t hash_uint64_basis(const uint64_t x,hash_uint64_basis154,4909
static inline uint32_t hash_uint64(const uint64_t x)hash_uint64160,5085
static inline uint32_t hash_add(uint32_t hash, uint32_t data)hash_add168,5240
static inline uint32_t hash_add64(uint32_t hash, uint64_t data)hash_add64174,5397
static inline uint32_t hash_finish(uint64_t hash, uint64_t final)hash_finish179,5504
hash_words_inline(const uint32_t p_[], size_t n_words, uint32_t basis)hash_words_inline193,6102
hash_words64_inline(const uint64_t p[], size_t n_words, uint32_t basis)hash_words64_inline235,7405
static inline uint32_t hash_uint64_basis(const uint64_t x,hash_uint64_basis261,8090
static inline uint32_t hash_uint64(const uint64_t x)hash_uint64268,8335
static inline uint32_t hash_2words(uint32_t x, uint32_t y)hash_2words273,8429
static inline uint32_t hash_pointer(const void *p, uint32_t basis)hash_pointer278,8540
hash_words(const uint32_t p[], size_t n_words, uint32_t basis)hash_words291,8976
hash_words64(const uint64_t p[], size_t n_words, uint32_t basis)hash_words64301,9228
hash_words(const uint32_t p[], size_t n_words, uint32_t basis)hash_words313,9493
hash_words64(const uint64_t p[], size_t n_words, uint32_t basis)hash_words64319,9628
hash_bytes32(const uint32_t p[], size_t n_bytes, uint32_t basis)hash_bytes32326,9774
hash_bytes64(const uint64_t p[], size_t n_bytes, uint32_t basis)hash_bytes64332,9913
static inline uint32_t hash_string(const char *s, uint32_t basis)hash_string337,10031
static inline uint32_t hash_int(uint32_t x, uint32_t basis)hash_int342,10146
static inline uint32_t hash_boolean(bool x, uint32_t basis)hash_boolean349,10334
hash_add_words(uint32_t hash, const uint32_t *p, size_t n_words)hash_add_words362,10866
hash_add_words64(uint32_t hash, const uint64_t *p, size_t n_words)hash_add_words64371,11062
hash_add_bytes32(uint32_t hash, const uint32_t *p, size_t n_bytes)hash_add_bytes32380,11262
hash_add_bytes64(uint32_t hash, const uint64_t *p, size_t n_bytes)hash_add_bytes64386,11406

include/heap.h,993
#define HEAP_H HEAP_H18,623
struct heap_node {heap_node25,776
    size_t idx;idx26,795
    uint64_t priority;priority27,811
struct heap {heap31,856
    struct heap_node **array;   /* Data in elements 1...n, element 0 unused. */array32,870
    size_t n;                   /* Number of nodes currently in the heap. */n33,950
    size_t allocated;           /* Max 'n' before 'array' must be enlarged. */allocated34,1027
#define HEAP_FOR_EACH(HEAP_FOR_EACH69,2562
heap_parent__(size_t idx)heap_parent__83,3363
heap_left__(size_t idx)heap_left__91,3545
heap_right__(size_t idx)heap_right__99,3726
heap_is_leaf__(const struct heap *heap, size_t idx)heap_is_leaf__107,3886
heap_count(const struct heap *heap)heap_count114,4051
heap_is_empty(const struct heap *heap)heap_is_empty122,4216
heap_max(const struct heap *heap)heap_max135,4614
heap_pop(struct heap *heap)heap_pop145,4901
heap_raw_change(struct heap_node *node, uint64_t priority)heap_raw_change158,5316

include/hindex.h,1011
#define HINDEX_H HINDEX_H18,625
struct hindex_node {hindex_node72,2796
    size_t hash;hash74,2839
    struct hindex_node *d;d81,3114
    struct hindex_node *s;s85,3284
struct hindex {hindex89,3335
    struct hindex_node **buckets; /* Must point to 'one' iff 'mask' == 0. */buckets90,3351
    struct hindex_node *one;one91,3428
    size_t mask;      /* 0 or more lowest-order bits set, others cleared. */mask92,3457
    size_t n_unique;  /* Number of unique hashes (the number of head nodes). */n_unique93,3534
#define HINDEX_INITIALIZER(HINDEX_INITIALIZER97,3661
#define HINDEX_FOR_EACH_WITH_HASH(HINDEX_FOR_EACH_WITH_HASH130,4855
#define HINDEX_FOR_EACH_WITH_HASH_SAFE(HINDEX_FOR_EACH_WITH_HASH_SAFE137,5288
hindex_node_with_hash(const struct hindex *hindex, size_t hash)hindex_node_with_hash147,5843
#define HINDEX_FOR_EACH(HINDEX_FOR_EACH160,6133
#define HINDEX_FOR_EACH_SAFE(HINDEX_FOR_EACH_SAFE167,6576
hindex_is_empty(const struct hindex *hindex)hindex_is_empty180,7249

include/hmapx.h,362
#define HMAPX_HHMAPX_H18,624
struct hmapx_node {hmapx_node22,672
    struct hmap_node hmap_node;hmap_node23,692
    void *data;data24,724
struct hmapx {hmapx28,778
    struct hmap map;map29,793
#define HMAPX_INITIALIZER(HMAPX_INITIALIZER32,818
#define HMAPX_FOR_EACH(HMAPX_FOR_EACH63,1829
#define HMAPX_FOR_EACH_SAFE(HMAPX_FOR_EACH_SAFE70,2256

include/id-pool.h,35
#define ID_POOL_HID_POOL_H19,653

include/if-notifier.h,106
#define IF_NOTIFIER_H IF_NOTIFIER_H18,625
typedef void if_notify_func(void *aux);if_notify_func22,671

include/latch.h,126
#define LATCH_H LATCH_H18,618
struct latch {latch28,867
    int fds[2];fds30,897
#define latch_wait(latch_wait45,1204

include/lockfile.h,38
#define LOCKFILE_H LOCKFILE_H17,624

include/memory.h,34
#define MEMORY_H MEMORY_H18,619

include/netdev-linux.h,109
#define NETDEV_LINUX_H NETDEV_LINUX_H18,631
#define LINUX_FLOW_OFFLOAD_API LINUX_FLOW_OFFLOAD_API32,1014

include/netdev-native-tnl.h,344
#define NETDEV_VPORT_NATIVE_TNL_H NETDEV_VPORT_NATIVE_TNL_H18,654
netdev_tnl_is_header_ipv6(const void *header)netdev_tnl_is_header_ipv662,1975
netdev_tnl_ip_hdr(void *eth)netdev_tnl_ip_hdr70,2161
netdev_tnl_ipv6_hdr(void *eth)netdev_tnl_ipv6_hdr76,2303
netdev_tnl_get_src_port(struct dp_packet *packet)netdev_tnl_get_src_port90,2691

include/netdev-provider.h,6984
#define NETDEV_PROVIDER_H NETDEV_PROVIDER_H18,664
#define NETDEV_NUMA_UNSPEC NETDEV_NUMA_UNSPEC36,1004
struct netdev {netdev42,1189
    char *name;                         /* Name of network device. */name44,1283
    const struct netdev_class *netdev_class; /* Functions to controlnetdev_class45,1353
    bool auto_classified;auto_classified50,1637
    uint64_t change_seq;change_seq58,2014
    struct seq *reconfigure_seq;reconfigure_seq67,2545
    uint64_t last_reconfigure_seq;last_reconfigure_seq68,2578
    bool mtu_user_config;mtu_user_config72,2756
    int n_txq;n_txq77,2959
    int n_rxq;n_rxq78,2974
    int ref_cnt;                        /* Times this devices was opened. */ref_cnt79,2989
    struct shash_node *node;            /* Pointer to element in global map. */node80,3066
    struct ovs_list saved_flags_list; /* Contains "struct netdev_saved_flags". */saved_flags_list81,3146
netdev_change_seq_changed(const struct netdev *netdev_)netdev_change_seq_changed85,3251
netdev_request_reconfigure(struct netdev *netdev)netdev_request_reconfigure96,3530
struct netdev_rxq {netdev_rxq115,4249
    struct netdev *netdev;      /* Owns a reference to the netdev. */netdev116,4269
    int queue_id;queue_id117,4339
struct netdev_flow_dump {netdev_flow_dump123,4428
    struct netdev *netdev;netdev124,4454
    odp_port_t port;port125,4481
    struct nl_dump *nl_dump;nl_dump126,4502
    bool terse;terse127,4531
struct netdev_class {netdev_class230,9273
    const char *type;type237,9610
    bool is_pmd;is_pmd240,9703
    int (*init)(void);init252,10149
    void (*run)(const struct netdev_class *netdev_class);run259,10430
    void (*wait)(const struct netdev_class *netdev_class);wait269,10960
    struct netdev *(*alloc)(void);alloc277,11213
    int (*construct)(struct netdev *);construct278,11248
    void (*destruct)(struct netdev *);destruct279,11287
    void (*dealloc)(struct netdev *);dealloc280,11326
    int (*get_config)(const struct netdev *netdev, struct smap *args);get_config287,11624
    int (*set_config)(struct netdev *netdev, const struct smap *args,set_config297,12061
        (*get_tunnel_config)(const struct netdev *netdev);get_tunnel_config305,12396
    int (*build_header)(const struct netdev *, struct ovs_action_push_tnl *data,build_header309,12610
    void (*push_header)(struct dp_packet *packet,push_header316,13040
    struct dp_packet * (*pop_header)(struct dp_packet *packet);pop_header323,13375
    int (*get_numa_id)(const struct netdev *netdev);get_numa_id327,13564
    int (*set_tx_multiq)(struct netdev *netdev, unsigned int n_txq);set_tx_multiq339,14094
    int (*send)(struct netdev *netdev, int qid, struct dp_packet_batch *batch,send371,15902
    void (*send_wait)(struct netdev *netdev, int qid);send_wait386,16716
    int (*set_etheraddr)(struct netdev *netdev, const struct eth_addr mac);set_etheraddr389,16824
    int (*get_etheraddr)(const struct netdev *netdev, struct eth_addr *mac);get_etheraddr395,17089
    int (*get_mtu)(const struct netdev *netdev, int *mtup);get_mtu406,17622
    int (*set_mtu)(struct netdev *netdev, int mtu);set_mtu413,17932
    int (*get_ifindex)(const struct netdev *netdev);get_ifindex426,18590
    int (*get_carrier)(const struct netdev *netdev, bool *carrier);get_carrier434,18862
    long long int (*get_carrier_resets)(const struct netdev *netdev);get_carrier_resets440,19113
    int (*set_miimon_interval)(struct netdev *netdev, long long int interval);set_miimon_interval452,19752
    int (*get_stats)(const struct netdev *netdev, struct netdev_stats *);get_stats459,20074
    int (*get_features)(const struct netdev *netdev,get_features467,20416
    int (*set_advertisements)(struct netdev *netdev,set_advertisements478,20926
    enum netdev_pt_mode (*get_pt_mode)(const struct netdev *netdev);get_pt_mode485,21202
    int (*set_policing)(struct netdev *netdev, unsigned int kbits_rate,set_policing492,21540
    int (*get_qos_types)(const struct netdev *netdev, struct sset *types);get_qos_types508,22355
    int (*get_qos_capabilities)(const struct netdev *netdev,get_qos_capabilities515,22721
    int (*get_qos)(const struct netdev *netdev,get_qos538,23825
    int (*set_qos)(struct netdev *netdev,set_qos558,24832
    int (*get_queue)(const struct netdev *netdev,get_queue577,25802
    int (*set_queue)(struct netdev *netdev,set_queue597,26843
    int (*delete_queue)(struct netdev *netdev, unsigned int queue_id);delete_queue610,27543
    int (*get_queue_stats)(const struct netdev *netdev, unsigned int queue_id,get_queue_stats617,27885
    int (*queue_dump_start)(const struct netdev *netdev, void **statep);queue_dump_start625,28298
    int (*queue_dump_next)(const struct netdev *netdev, void *state,queue_dump_next645,29421
    int (*queue_dump_done)(const struct netdev *netdev, void *state);queue_dump_done652,29787
    int (*dump_queue_stats)(const struct netdev *netdev,dump_queue_stats660,30190
    int (*set_in4)(struct netdev *netdev, struct in_addr addr,set_in4671,30716
    int (*get_addr_list)(const struct netdev *netdev, struct in6_addr **in,get_addr_list687,31384
    int (*add_router)(struct netdev *netdev, struct in_addr router);add_router695,31728
    int (*get_next_hop)(const struct in_addr *host, struct in_addr *next_hop,get_next_hop705,32277
    int (*get_status)(const struct netdev *netdev, struct smap *smap);get_status719,32883
    int (*arp_lookup)(const struct netdev *netdev, ovs_be32 ip,arp_lookup728,33292
    int (*update_flags)(struct netdev *netdev, enum netdev_flags off,update_flags738,33832
    int (*reconfigure)(struct netdev *netdev);reconfigure749,34426
    struct netdev_rxq *(*rxq_alloc)(void);rxq_alloc759,34799
    int (*rxq_construct)(struct netdev_rxq *);rxq_construct760,34842
    void (*rxq_destruct)(struct netdev_rxq *);rxq_destruct761,34889
    void (*rxq_dealloc)(struct netdev_rxq *);rxq_dealloc762,34936
    int (*rxq_recv)(struct netdev_rxq *rx, struct dp_packet_batch *batch);rxq_recv781,35953
    void (*rxq_wait)(struct netdev_rxq *rx);rxq_wait786,36198
    int (*rxq_drain)(struct netdev_rxq *rx);rxq_drain789,36309
    int (*flow_flush)(struct netdev *);flow_flush800,36751
    int (*flow_dump_create)(struct netdev *, struct netdev_flow_dump **dump);flow_dump_create810,37101
    int (*flow_dump_destroy)(struct netdev_flow_dump *);flow_dump_destroy811,37179
    bool (*flow_dump_next)(struct netdev_flow_dump *, struct match *,flow_dump_next818,37560
    int (*flow_put)(struct netdev *, struct match *, struct nlattr *actions,flow_put830,38235
    int (*flow_get)(struct netdev *, struct match *, struct nlattr **actions,flow_get838,38678
    int (*flow_del)(struct netdev *, const ovs_u128 *ufid,flow_del846,39113
    int (*init_flow_api)(struct netdev *);init_flow_api851,39337
#define NO_OFFLOAD_API NO_OFFLOAD_API871,39874

include/netdev-tc-offloads.h,58
#define NETDEV_TC_OFFLOADS_H NETDEV_TC_OFFLOADS_H18,646

include/netdev-vport-private.h,602
#define NETDEV_VPORT_PRAVITE_H NETDEV_VPORT_PRAVITE_H18,651
struct netdev_vport {netdev_vport27,822
    struct netdev up;up28,844
    struct ovs_mutex mutex;mutex31,905
    struct eth_addr etheraddr;etheraddr33,934
    struct netdev_stats stats;stats34,965
    struct netdev_tunnel_config tnl_cfg;tnl_cfg37,1016
    char egress_iface[IFNAMSIZ];egress_iface38,1057
    bool carrier_status;carrier_status39,1090
    char *peer;peer42,1139
is_vport_class(const struct netdev_class *class)is_vport_class48,1217
netdev_vport_cast(const struct netdev *netdev)netdev_vport_cast54,1362

include/netdev-vport.h,197
#define NETDEV_VPORT_H NETDEV_VPORT_H18,643
enum { NETDEV_VPORT_NAME_BUFSIZE = 16 };NETDEV_VPORT_NAME_BUFSIZE46,1404
enum { NETDEV_VPORT_NAME_BUFSIZE = 256 };NETDEV_VPORT_NAME_BUFSIZE48,1451

include/netdev.h,2640
#define NETDEV_H NETDEV_H18,649
enum netdev_pt_mode {netdev_pt_mode74,2314
    NETDEV_PT_AWARE,NETDEV_PT_AWARE80,2667
    NETDEV_PT_LEGACY_L2,NETDEV_PT_LEGACY_L286,2959
    NETDEV_PT_LEGACY_L3,NETDEV_PT_LEGACY_L397,3530
struct netdev_tunnel_config {netdev_tunnel_config101,3600
    bool in_key_present;in_key_present102,3630
    bool in_key_flow;in_key_flow103,3655
    ovs_be64 in_key;in_key104,3677
    bool out_key_present;out_key_present106,3699
    bool out_key_flow;out_key_flow107,3725
    ovs_be64 out_key;out_key108,3748
    ovs_be16 dst_port;dst_port110,3771
    bool ip_src_flow;ip_src_flow112,3795
    bool ip_dst_flow;ip_dst_flow113,3817
    struct in6_addr ipv6_src;ipv6_src114,3839
    struct in6_addr ipv6_dst;ipv6_dst115,3869
    uint32_t exts;exts117,3900
    bool set_egress_pkt_mark;set_egress_pkt_mark118,3919
    uint32_t egress_pkt_mark;egress_pkt_mark119,3949
    uint8_t ttl;ttl121,3980
    bool ttl_inherit;ttl_inherit122,3997
    uint8_t tos;tos124,4020
    bool tos_inherit;tos_inherit125,4037
    bool csum;csum127,4060
    bool dont_fragment;dont_fragment128,4075
    enum netdev_pt_mode pt_mode;pt_mode129,4099
struct offload_info {offload_info188,6269
    const struct dpif_class *dpif_class;dpif_class189,6291
    ovs_be16 tp_dst_port; /* Destination port for tunnel in SET action */tp_dst_port190,6332
struct netdev_tnl_build_header_params {netdev_tnl_build_header_params233,8609
    const struct flow *flow;flow234,8649
    const struct in6_addr *s_ip;s_ip235,8678
    struct eth_addr dmac;dmac236,8711
    struct eth_addr smac;smac237,8737
    bool is_ipv6;is_ipv6238,8763
enum netdev_flags {netdev_flags266,9905
    NETDEV_UP = 0x0001,         /* Device enabled? */NETDEV_UP267,9925
    NETDEV_PROMISC = 0x0002,    /* Promiscuous mode? */NETDEV_PROMISC268,9979
    NETDEV_LOOPBACK = 0x0004    /* This is a loopback device. */NETDEV_LOOPBACK269,10035
struct netdev_qos_capabilities {netdev_qos_capabilities301,11437
    unsigned int n_queues;n_queues302,11470
struct netdev_queue_stats {netdev_queue_stats305,11501
    uint64_t tx_bytes;tx_bytes307,11608
    uint64_t tx_packets;tx_packets308,11631
    uint64_t tx_errors;tx_errors309,11656
    long long int created;created312,11760
struct netdev_queue_dump {netdev_queue_dump343,13098
    struct netdev *netdev;netdev344,13125
    int error;error345,13152
    void *state;state346,13167
#define NETDEV_QUEUE_FOR_EACH(NETDEV_QUEUE_FOR_EACH362,13824
typedef void netdev_dump_queue_stats_cb(unsigned int queue_id,netdev_dump_queue_stats_cb369,14165

include/netflow.h,2418
#define NETFLOW_H NETFLOW_H18,638
#define NETFLOW_V5_VERSION NETFLOW_V5_VERSION26,769
struct netflow_v5_header {netflow_v5_header32,997
    ovs_be16 version;              /* NetFlow version is 5. */version33,1024
    ovs_be16 count;                /* Number of records in this message. */count34,1087
    ovs_be32 sysuptime;            /* System uptime in milliseconds. */sysuptime35,1163
    ovs_be32 unix_secs;            /* Number of seconds since Unix epoch. */unix_secs36,1235
    ovs_be32 unix_nsecs;           /* Number of residual nanosecondsunix_nsecs37,1312
    ovs_be32 flow_seq;             /* Number of flows since sendingflow_seq39,1443
    uint8_t  engine_type;          /* Engine type. */engine_type41,1568
    uint8_t  engine_id;            /* Engine id. */engine_id42,1622
    ovs_be16 sampling_interval;    /* Set to zero. */sampling_interval43,1674
struct netflow_v5_record {netflow_v5_record50,1889
    ovs_be32 src_addr;             /* Source IP address. */src_addr51,1916
    ovs_be32 dst_addr;             /* Destination IP address. */dst_addr52,1976
    ovs_be32 nexthop;              /* IP address of next hop.  Set to 0. */nexthop53,2041
    ovs_be16 input;                /* Input interface index. */input54,2117
    ovs_be16 output;               /* Output interface index. */output55,2181
    ovs_be32 packet_count;         /* Number of packets. */packet_count56,2246
    ovs_be32 byte_count;           /* Number of bytes. */byte_count57,2306
    ovs_be32 init_time;            /* Value of sysuptime on first packet. */init_time58,2364
    ovs_be32 used_time;            /* Value of sysuptime on last packet. */used_time59,2441
    ovs_be16 src_port;src_port65,2767
    ovs_be16 dst_port;dst_port66,2790
    uint8_t  pad1;pad168,2814
    uint8_t  tcp_flags;            /* Union of seen TCP flags. */tcp_flags69,2833
    uint8_t  ip_proto;             /* IP protocol. */ip_proto70,2899
    uint8_t  ip_tos;               /* IP TOS value. */ip_tos71,2953
    ovs_be16 src_as;               /* Source AS ID.  Set to 0. */src_as72,3008
    ovs_be16 dst_as;               /* Destination AS ID.  Set to 0. */dst_as73,3074
    uint8_t  src_mask;             /* Source mask bits.  Set to 0. */src_mask74,3145
    uint8_t  dst_mask;             /* Destination mask bits.  Set to 0. */dst_mask75,3215
    uint8_t  pad[2];pad76,3290

include/netlink-conntrack.h,277
#define NETLINK_CONNTRACK_HNETLINK_CONNTRACK_H18,630
enum nl_ct_event_type {nl_ct_event_type30,889
    NL_CT_EVENT_NEW    = 1 << 0,NL_CT_EVENT_NEW31,913
    NL_CT_EVENT_UPDATE = 1 << 1,NL_CT_EVENT_UPDATE32,946
    NL_CT_EVENT_DELETE = 1 << 2,NL_CT_EVENT_DELETE33,979

include/netlink-notifier.h,224
#define NETLINK_NOTIFIER_H NETLINK_NOTIFIER_H18,629
typedef void nln_notify_func(const void *change, void *aux);nln_notify_func36,1189
typedef int nln_parse_func(struct ofpbuf *buf, void *change);nln_parse_func42,1472

include/netlink-protocol.h,3804
#define NETLINK_PROTOCOL_H NETLINK_PROTOCOL_H18,647
#define NETLINK_NETFILTER NETLINK_NETFILTER41,1384
#define NETLINK_GENERIC NETLINK_GENERIC42,1419
#define NLM_F_REQUEST NLM_F_REQUEST45,1479
#define NLM_F_MULTI NLM_F_MULTI46,1517
#define NLM_F_ACK NLM_F_ACK47,1555
#define NLM_F_ECHO NLM_F_ECHO48,1593
#define NLM_F_ROOT NLM_F_ROOT50,1632
#define NLM_F_MATCH NLM_F_MATCH51,1670
#define NLM_F_EXCL NLM_F_EXCL52,1708
#define NLM_F_ATOMIC NLM_F_ATOMIC53,1746
#define NLM_F_CREATE NLM_F_CREATE54,1784
#define NLM_F_DUMP NLM_F_DUMP55,1822
#define NLMSG_NOOP NLMSG_NOOP58,1907
#define NLMSG_ERROR NLMSG_ERROR59,1941
#define NLMSG_DONE NLMSG_DONE60,1975
#define NLMSG_OVERRUN NLMSG_OVERRUN61,2009
#define NLMSG_MIN_TYPE NLMSG_MIN_TYPE63,2044
#define MAX_LINKS MAX_LINKS65,2082
struct nlmsghdr {nlmsghdr67,2118
    uint32_t nlmsg_len;nlmsg_len68,2136
    uint16_t nlmsg_type;nlmsg_type69,2160
    uint16_t nlmsg_flags;nlmsg_flags70,2185
    uint32_t nlmsg_seq;nlmsg_seq71,2211
    uint32_t nlmsg_pid;nlmsg_pid72,2235
#define NLMSG_ALIGNTO NLMSG_ALIGNTO76,2313
#define NLMSG_ALIGN(NLMSG_ALIGN77,2337
#define NLMSG_HDRLEN NLMSG_HDRLEN78,2393
struct nlmsgerrnlmsgerr80,2460
        int error;error82,2478
        struct nlmsghdr msg;msg83,2497
struct genlmsghdr {genlmsghdr87,2580
    uint8_t cmd;cmd88,2600
    uint8_t version;version89,2617
    uint16_t reserved;reserved90,2638
#define GENL_HDRLEN GENL_HDRLEN94,2716
struct nlattr {nlattr96,2776
    uint16_t nla_len;nla_len97,2792
    uint16_t nla_type;nla_type98,2814
#define NLA_ALIGNTO NLA_ALIGNTO102,2888
#define NLA_ALIGN(NLA_ALIGN103,2910
#define NLA_HDRLEN NLA_HDRLEN104,2962
#define GENL_MIN_ID GENL_MIN_ID106,3023
#define GENL_MAX_ID GENL_MAX_ID107,3062
#define GENL_ID_CTRL GENL_ID_CTRL109,3092
        CTRL_CMD_UNSPEC,CTRL_CMD_UNSPEC112,3147
        CTRL_CMD_NEWFAMILY,CTRL_CMD_NEWFAMILY113,3172
        CTRL_CMD_DELFAMILY,CTRL_CMD_DELFAMILY114,3200
        CTRL_CMD_GETFAMILY,CTRL_CMD_GETFAMILY115,3228
        CTRL_CMD_NEWOPS,CTRL_CMD_NEWOPS116,3256
        CTRL_CMD_DELOPS,CTRL_CMD_DELOPS117,3281
        CTRL_CMD_GETOPS,CTRL_CMD_GETOPS118,3306
        __CTRL_CMD_MAX,__CTRL_CMD_MAX119,3331
#define CTRL_CMD_MAX CTRL_CMD_MAX122,3359
        CTRL_ATTR_UNSPEC,CTRL_ATTR_UNSPEC125,3409
        CTRL_ATTR_FAMILY_ID,CTRL_ATTR_FAMILY_ID126,3435
        CTRL_ATTR_FAMILY_NAME,CTRL_ATTR_FAMILY_NAME127,3464
        CTRL_ATTR_VERSION,CTRL_ATTR_VERSION128,3495
        CTRL_ATTR_HDRSIZE,CTRL_ATTR_HDRSIZE129,3522
        CTRL_ATTR_MAXATTR,CTRL_ATTR_MAXATTR130,3549
        CTRL_ATTR_OPS,CTRL_ATTR_OPS131,3576
        __CTRL_ATTR_MAX,__CTRL_ATTR_MAX132,3599
#define CTRL_ATTR_MAX CTRL_ATTR_MAX135,3628
        CTRL_ATTR_OP_UNSPEC,CTRL_ATTR_OP_UNSPEC138,3680
        CTRL_ATTR_OP_ID,CTRL_ATTR_OP_ID139,3709
        CTRL_ATTR_OP_FLAGS,CTRL_ATTR_OP_FLAGS140,3734
        __CTRL_ATTR_OP_MAX,__CTRL_ATTR_OP_MAX141,3762
#define CTRL_ATTR_OP_MAX CTRL_ATTR_OP_MAX144,3794
#define NLA_F_NESTED NLA_F_NESTED149,3947
#define NLA_F_NET_BYTEORDER NLA_F_NET_BYTEORDER150,3985
#define NLA_TYPE_MASK NLA_TYPE_MASK151,4023
#define NETLINK_ADD_MEMBERSHIP NETLINK_ADD_MEMBERSHIP157,4281
#define NETLINK_DROP_MEMBERSHIP NETLINK_DROP_MEMBERSHIP158,4314
#undef CTRL_ATTR_MAXCTRL_ATTR_MAX165,4542
#define CTRL_ATTR_MAX CTRL_ATTR_MAX166,4563
#define CTRL_ATTR_MCAST_GROUPS CTRL_ATTR_MCAST_GROUPS167,4587
    CTRL_ATTR_MCAST_GRP_UNSPEC,CTRL_ATTR_MCAST_GRP_UNSPEC170,4628
    CTRL_ATTR_MCAST_GRP_NAME,CTRL_ATTR_MCAST_GRP_NAME171,4660
    CTRL_ATTR_MCAST_GRP_ID,CTRL_ATTR_MCAST_GRP_ID172,4690
    __CTRL_ATTR_MCAST_GRP_MAX,__CTRL_ATTR_MCAST_GRP_MAX173,4718
#define CTRL_ATTR_MCAST_GRP_MAX CTRL_ATTR_MCAST_GRP_MAX176,4753

include/netlink-socket.h,778
#define NETLINK_SOCKET_H NETLINK_SOCKET_H18,663
struct nl_transaction {nl_transaction236,11446
    struct ofpbuf *request;     /* Request to send. */request238,11501
    struct ofpbuf *reply;       /* Reply (empty if reply was an error code). */reply247,11794
    int error;                  /* Positive errno value, 0 if no error. */error248,11874
#define NL_DUMP_BUFSIZE NL_DUMP_BUFSIZE257,12201
struct nl_dump {nl_dump259,12239
    struct nl_sock *sock;       /* Socket being dumped. */sock261,12330
    uint32_t nl_seq;            /* Expected nlmsg_seq for replies. */nl_seq262,12389
    int status OVS_GUARDED;     /* 0: dump in progress,OVS_GUARDED263,12459
    struct ovs_mutex mutex;     /* Protects 'status', synchronizes recv(). */mutex268,12735

include/netlink.h,1978
#define NETLINK_H NETLINK_H18,650
#define NL_ATTR_SIZE(NL_ATTR_SIZE116,5432
#define NL_A_U8_SIZE NL_A_U8_SIZE117,5506
#define NL_A_U16_SIZE NL_A_U16_SIZE118,5559
#define NL_A_U32_SIZE NL_A_U32_SIZE119,5613
#define NL_A_U64_SIZE NL_A_U64_SIZE120,5667
#define NL_A_U128_SIZE NL_A_U128_SIZE121,5721
#define NL_A_BE16_SIZE NL_A_BE16_SIZE122,5776
#define NL_A_BE32_SIZE NL_A_BE32_SIZE123,5830
#define NL_A_BE64_SIZE NL_A_BE64_SIZE124,5884
#define NL_A_BE128_SIZE NL_A_BE128_SIZE125,5938
#define NL_A_FLAG_SIZE NL_A_FLAG_SIZE126,5994
#define NL_A_IPV6_SIZE NL_A_IPV6_SIZE127,6033
enum nl_attr_typenl_attr_type132,6173
    NL_A_NO_ATTR = 0,NL_A_NO_ATTR134,6193
    NL_A_UNSPEC,NL_A_UNSPEC135,6215
    NL_A_U8,NL_A_U8136,6232
    NL_A_U16,NL_A_U16137,6245
    NL_A_BE16 = NL_A_U16,NL_A_BE16138,6259
    NL_A_U32,NL_A_U32139,6285
    NL_A_BE32 = NL_A_U32,NL_A_BE32140,6299
    NL_A_U64,NL_A_U64141,6325
    NL_A_BE64 = NL_A_U64,NL_A_BE64142,6339
    NL_A_U128,NL_A_U128143,6365
    NL_A_BE128 = NL_A_U128,NL_A_BE128144,6380
    NL_A_STRING,NL_A_STRING145,6408
    NL_A_FLAG,NL_A_FLAG146,6425
    NL_A_IPV6,NL_A_IPV6147,6440
    NL_A_NESTED,NL_A_NESTED148,6455
    N_NL_ATTR_TYPESN_NL_ATTR_TYPES149,6472
nl_attr_next(const struct nlattr *nla)nl_attr_next154,6561
nl_attr_is_valid(const struct nlattr *nla, size_t maxlen)nl_attr_is_valid160,6689
nl_attr_len_pad(const struct nlattr *nla, size_t maxlen)nl_attr_len_pad168,6890
#define NL_ATTR_FOR_EACH(NL_ATTR_FOR_EACH176,7112
#define NL_ATTR_FOR_EACH_UNSAFE(NL_ATTR_FOR_EACH_UNSAFE185,7624
#define NL_NESTED_FOR_EACH(NL_NESTED_FOR_EACH191,7993
#define NL_NESTED_FOR_EACH_UNSAFE(NL_NESTED_FOR_EACH_UNSAFE193,8137
struct nl_policynl_policy220,9373
    enum nl_attr_type type;type222,9392
    size_t min_len, max_len;min_len223,9420
    size_t min_len, max_len;max_len223,9420
    bool optional;optional224,9449
#define NL_POLICY_FOR(NL_POLICY_FOR227,9472

include/object-collection.h,486
#define OBJECT_COLLECTION_H OBJECT_COLLECTION_H18,630
struct object_collection {object_collection24,734
    void **objs;                /* Objects. */objs25,761
    size_t n;                   /* Number of objects collected. */n26,808
    size_t capacity;            /* Number of objects that fit in 'objs'. */capacity27,875
    void *stub[5];              /* Preallocated array to avoid malloc(). */stub28,951
#define DECL_OBJECT_COLLECTION(DECL_OBJECT_COLLECTION43,1638

include/odp-netlink.h,25365
#define ODP_NETLINK_H ODP_NETLINK_H46,2028
struct ovs_header {ovs_header61,2430
	int dp_ifindex;dp_ifindex62,2450
#define OVS_DATAPATH_FAMILY OVS_DATAPATH_FAMILY67,2489
#define OVS_DATAPATH_MCGROUP OVS_DATAPATH_MCGROUP68,2533
#define OVS_DATAPATH_VERSION OVS_DATAPATH_VERSION74,2691
#define OVS_DP_VER_FEATURES OVS_DP_VER_FEATURES77,2776
enum ovs_datapath_cmd {ovs_datapath_cmd79,2807
	OVS_DP_CMD_UNSPEC,OVS_DP_CMD_UNSPEC80,2831
	OVS_DP_CMD_NEW,OVS_DP_CMD_NEW81,2851
	OVS_DP_CMD_DEL,OVS_DP_CMD_DEL82,2868
	OVS_DP_CMD_GET,OVS_DP_CMD_GET83,2885
	OVS_DP_CMD_SETOVS_DP_CMD_SET84,2902
enum ovs_datapath_attr {ovs_datapath_attr106,3953
	OVS_DP_ATTR_UNSPEC,OVS_DP_ATTR_UNSPEC107,3978
	OVS_DP_ATTR_NAME,		/* name of dp_ifindex netdev */OVS_DP_ATTR_NAME108,3999
	OVS_DP_ATTR_UPCALL_PID,		/* Netlink PID to receive upcalls */OVS_DP_ATTR_UPCALL_PID109,4051
	OVS_DP_ATTR_STATS,		/* struct ovs_dp_stats */OVS_DP_ATTR_STATS110,4114
	OVS_DP_ATTR_MEGAFLOW_STATS,	/* struct ovs_dp_megaflow_stats */OVS_DP_ATTR_MEGAFLOW_STATS111,4161
	OVS_DP_ATTR_USER_FEATURES,	/* OVS_DP_F_*  */OVS_DP_ATTR_USER_FEATURES112,4225
	OVS_DP_ATTR_PAD,OVS_DP_ATTR_PAD113,4271
	__OVS_DP_ATTR_MAX__OVS_DP_ATTR_MAX114,4289
#define OVS_DP_ATTR_MAX OVS_DP_ATTR_MAX117,4312
struct ovs_dp_stats {ovs_dp_stats120,4436
	ovs_32aligned_u64 n_hit;             /* Number of flow table matches. */n_hit121,4458
	ovs_32aligned_u64 n_missed;          /* Number of flow table misses. */n_missed122,4532
	ovs_32aligned_u64 n_lost;            /* Number of misses not sent to userspace. */n_lost123,4605
	ovs_32aligned_u64 n_flows;           /* Number of flows present */n_flows124,4689
struct ovs_dp_megaflow_stats {ovs_dp_megaflow_stats127,4761
	ovs_32aligned_u64 n_mask_hit;	 /* Number of masks used for flow lookups. */n_mask_hit128,4792
	uint32_t n_masks;		 /* Number of masks for the datapath. */n_masks129,4869
	uint32_t pad0;		 /* Pad for future expension. */pad0130,4930
	ovs_32aligned_u64 pad1;		 /* Pad for future expension. */pad1131,4980
	ovs_32aligned_u64 pad2;		 /* Pad for future expension. */pad2132,5039
struct ovs_vport_stats {ovs_vport_stats135,5102
	ovs_32aligned_u64   rx_packets;		/* total packets received       */rx_packets136,5127
	ovs_32aligned_u64   tx_packets;		/* total packets transmitted    */tx_packets137,5196
	ovs_32aligned_u64   rx_bytes;		/* total bytes received         */rx_bytes138,5265
	ovs_32aligned_u64   tx_bytes;		/* total bytes transmitted      */tx_bytes139,5332
	ovs_32aligned_u64   rx_errors;		/* bad packets received         */rx_errors140,5399
	ovs_32aligned_u64   tx_errors;		/* packet transmit problems     */tx_errors141,5467
	ovs_32aligned_u64   rx_dropped;		/* no space in linux buffers    */rx_dropped142,5535
	ovs_32aligned_u64   tx_dropped;		/* no space available in linux  */tx_dropped143,5604
#define OVS_DP_F_UNALIGNED	OVS_DP_F_UNALIGNED147,5728
#define OVS_DP_F_VPORT_PIDS	OVS_DP_F_VPORT_PIDS150,5835
#define OVSP_LOCAL OVSP_LOCAL153,5900
#define OVS_PACKET_FAMILY OVS_PACKET_FAMILY157,5963
#define OVS_PACKET_VERSION OVS_PACKET_VERSION158,6002
enum ovs_packet_cmd {ovs_packet_cmd160,6034
	OVS_PACKET_CMD_UNSPEC,OVS_PACKET_CMD_UNSPEC161,6056
	OVS_PACKET_CMD_MISS,    /* Flow table miss. */OVS_PACKET_CMD_MISS164,6118
	OVS_PACKET_CMD_ACTION,  /* OVS_ACTION_ATTR_USERSPACE action. */OVS_PACKET_CMD_ACTION165,6166
	OVS_PACKET_CMD_EXECUTE  /* Apply actions to a packet. */OVS_PACKET_CMD_EXECUTE168,6259
enum ovs_packet_attr {ovs_packet_attr205,8397
	OVS_PACKET_ATTR_UNSPEC,OVS_PACKET_ATTR_UNSPEC206,8420
	OVS_PACKET_ATTR_PACKET,      /* Packet data. */OVS_PACKET_ATTR_PACKET207,8445
	OVS_PACKET_ATTR_KEY,         /* Nested OVS_KEY_ATTR_* attributes. */OVS_PACKET_ATTR_KEY208,8494
	OVS_PACKET_ATTR_ACTIONS,     /* Nested OVS_ACTION_ATTR_* attributes. */OVS_PACKET_ATTR_ACTIONS209,8564
	OVS_PACKET_ATTR_USERDATA,    /* OVS_ACTION_ATTR_USERSPACE arg. */OVS_PACKET_ATTR_USERDATA210,8637
	OVS_PACKET_ATTR_EGRESS_TUN_KEY,  /* Nested OVS_TUNNEL_KEY_ATTR_*OVS_PACKET_ATTR_EGRESS_TUN_KEY211,8704
	OVS_PACKET_ATTR_UNUSED1,OVS_PACKET_ATTR_UNUSED1213,8794
	OVS_PACKET_ATTR_UNUSED2,OVS_PACKET_ATTR_UNUSED2214,8820
	OVS_PACKET_ATTR_PROBE,      /* Packet operation is a feature probe,OVS_PACKET_ATTR_PROBE215,8846
	OVS_PACKET_ATTR_MRU,	    /* Maximum received IP fragment size. */OVS_PACKET_ATTR_MRU217,8965
	OVS_PACKET_ATTR_LEN,		/* Packet size before truncation. */OVS_PACKET_ATTR_LEN218,9032
	__OVS_PACKET_ATTR_MAX__OVS_PACKET_ATTR_MAX219,9092
#define OVS_PACKET_ATTR_MAX OVS_PACKET_ATTR_MAX222,9119
#define OVS_VPORT_FAMILY OVS_VPORT_FAMILY226,9198
#define OVS_VPORT_MCGROUP OVS_VPORT_MCGROUP227,9236
#define OVS_VPORT_VERSION OVS_VPORT_VERSION228,9274
enum ovs_vport_cmd {ovs_vport_cmd230,9305
	OVS_VPORT_CMD_UNSPEC,OVS_VPORT_CMD_UNSPEC231,9326
	OVS_VPORT_CMD_NEW,OVS_VPORT_CMD_NEW232,9349
	OVS_VPORT_CMD_DEL,OVS_VPORT_CMD_DEL233,9369
	OVS_VPORT_CMD_GET,OVS_VPORT_CMD_GET234,9389
	OVS_VPORT_CMD_SETOVS_VPORT_CMD_SET235,9409
enum ovs_vport_type {ovs_vport_type238,9432
	OVS_VPORT_TYPE_UNSPEC,OVS_VPORT_TYPE_UNSPEC239,9454
	OVS_VPORT_TYPE_NETDEV,   /* network device */OVS_VPORT_TYPE_NETDEV240,9478
	OVS_VPORT_TYPE_INTERNAL, /* network device implemented by datapath */OVS_VPORT_TYPE_INTERNAL241,9525
	OVS_VPORT_TYPE_GRE,      /* GRE tunnel. */OVS_VPORT_TYPE_GRE242,9596
	OVS_VPORT_TYPE_VXLAN,	 /* VXLAN tunnel. */OVS_VPORT_TYPE_VXLAN243,9640
	OVS_VPORT_TYPE_GENEVE,	 /* Geneve tunnel. */OVS_VPORT_TYPE_GENEVE244,9684
	OVS_VPORT_TYPE_LISP = 105,  /* LISP tunnel */OVS_VPORT_TYPE_LISP245,9730
	OVS_VPORT_TYPE_STT = 106, /* STT tunnel */OVS_VPORT_TYPE_STT246,9777
	__OVS_VPORT_TYPE_MAX__OVS_VPORT_TYPE_MAX247,9821
#define OVS_VPORT_TYPE_MAX OVS_VPORT_TYPE_MAX250,9847
enum ovs_vport_attr {ovs_vport_attr282,11478
	OVS_VPORT_ATTR_UNSPEC,OVS_VPORT_ATTR_UNSPEC283,11500
	OVS_VPORT_ATTR_PORT_NO,	/* u32 port number within datapath */OVS_VPORT_ATTR_PORT_NO284,11524
	OVS_VPORT_ATTR_TYPE,	/* u32 OVS_VPORT_TYPE_* constant. */OVS_VPORT_ATTR_TYPE285,11587
	OVS_VPORT_ATTR_NAME,	/* string name, up to IFNAMSIZ bytes long */OVS_VPORT_ATTR_NAME286,11646
	OVS_VPORT_ATTR_OPTIONS, /* nested attributes, varies by vport type */OVS_VPORT_ATTR_OPTIONS287,11713
	OVS_VPORT_ATTR_UPCALL_PID, /* array of u32 Netlink socket PIDs for */OVS_VPORT_ATTR_UPCALL_PID288,11784
	OVS_VPORT_ATTR_STATS,	/* struct ovs_vport_stats */OVS_VPORT_ATTR_STATS290,11883
	OVS_VPORT_ATTR_PAD,OVS_VPORT_ATTR_PAD291,11935
	__OVS_VPORT_ATTR_MAX__OVS_VPORT_ATTR_MAX292,11956
#define OVS_VPORT_ATTR_MAX OVS_VPORT_ATTR_MAX295,11982
	OVS_VXLAN_EXT_UNSPEC,OVS_VXLAN_EXT_UNSPEC298,12044
	OVS_VXLAN_EXT_GBP,OVS_VXLAN_EXT_GBP299,12067
	OVS_VXLAN_EXT_GPE = 8,OVS_VXLAN_EXT_GPE301,12129
	__OVS_VXLAN_EXT_MAX,__OVS_VXLAN_EXT_MAX302,12153
#define OVS_VXLAN_EXT_MAX OVS_VXLAN_EXT_MAX305,12179
	OVS_TUNNEL_ATTR_UNSPEC,OVS_TUNNEL_ATTR_UNSPEC310,12293
	OVS_TUNNEL_ATTR_DST_PORT, /* 16-bit UDP port, used by L4 tunnels. */OVS_TUNNEL_ATTR_DST_PORT311,12318
	OVS_TUNNEL_ATTR_EXTENSION,OVS_TUNNEL_ATTR_EXTENSION312,12388
	__OVS_TUNNEL_ATTR_MAX__OVS_TUNNEL_ATTR_MAX313,12416
#define OVS_TUNNEL_ATTR_MAX OVS_TUNNEL_ATTR_MAX316,12443
#define OVS_FLOW_FAMILY OVS_FLOW_FAMILY320,12514
#define OVS_FLOW_MCGROUP OVS_FLOW_MCGROUP321,12550
#define OVS_FLOW_VERSION OVS_FLOW_VERSION322,12586
enum ovs_flow_cmd {ovs_flow_cmd324,12616
	OVS_FLOW_CMD_UNSPEC,OVS_FLOW_CMD_UNSPEC325,12636
	OVS_FLOW_CMD_NEW,OVS_FLOW_CMD_NEW326,12658
	OVS_FLOW_CMD_DEL,OVS_FLOW_CMD_DEL327,12677
	OVS_FLOW_CMD_GET,OVS_FLOW_CMD_GET328,12696
	OVS_FLOW_CMD_SETOVS_FLOW_CMD_SET329,12715
struct ovs_flow_stats {ovs_flow_stats332,12737
	ovs_32aligned_u64 n_packets;         /* Number of matched packets. */n_packets333,12761
	ovs_32aligned_u64 n_bytes;           /* Number of matched bytes. */n_bytes334,12832
enum ovs_key_attr {ovs_key_attr337,12905
	OVS_KEY_ATTR_UNSPEC,OVS_KEY_ATTR_UNSPEC338,12925
	OVS_KEY_ATTR_ENCAP,	/* Nested set of encapsulated attributes. */OVS_KEY_ATTR_ENCAP339,12947
	OVS_KEY_ATTR_PRIORITY,  /* u32 skb->priority */OVS_KEY_ATTR_PRIORITY340,13013
	OVS_KEY_ATTR_IN_PORT,   /* u32 OVS dp port number */OVS_KEY_ATTR_IN_PORT341,13062
	OVS_KEY_ATTR_ETHERNET,  /* struct ovs_key_ethernet */OVS_KEY_ATTR_ETHERNET342,13116
	OVS_KEY_ATTR_VLAN,	/* be16 VLAN TCI */OVS_KEY_ATTR_VLAN343,13171
	OVS_KEY_ATTR_ETHERTYPE,	/* be16 Ethernet type */OVS_KEY_ATTR_ETHERTYPE344,13211
	OVS_KEY_ATTR_IPV4,      /* struct ovs_key_ipv4 */OVS_KEY_ATTR_IPV4345,13261
	OVS_KEY_ATTR_IPV6,      /* struct ovs_key_ipv6 */OVS_KEY_ATTR_IPV6346,13312
	OVS_KEY_ATTR_TCP,       /* struct ovs_key_tcp */OVS_KEY_ATTR_TCP347,13363
	OVS_KEY_ATTR_UDP,       /* struct ovs_key_udp */OVS_KEY_ATTR_UDP348,13413
	OVS_KEY_ATTR_ICMP,      /* struct ovs_key_icmp */OVS_KEY_ATTR_ICMP349,13463
	OVS_KEY_ATTR_ICMPV6,    /* struct ovs_key_icmpv6 */OVS_KEY_ATTR_ICMPV6350,13514
	OVS_KEY_ATTR_ARP,       /* struct ovs_key_arp */OVS_KEY_ATTR_ARP351,13567
	OVS_KEY_ATTR_ND,        /* struct ovs_key_nd */OVS_KEY_ATTR_ND352,13617
	OVS_KEY_ATTR_SKB_MARK,  /* u32 skb mark */OVS_KEY_ATTR_SKB_MARK353,13666
	OVS_KEY_ATTR_TUNNEL,    /* Nested set of ovs_tunnel attributes */OVS_KEY_ATTR_TUNNEL354,13710
	OVS_KEY_ATTR_SCTP,      /* struct ovs_key_sctp */OVS_KEY_ATTR_SCTP355,13777
	OVS_KEY_ATTR_TCP_FLAGS,	/* be16 TCP flags. */OVS_KEY_ATTR_TCP_FLAGS356,13828
	OVS_KEY_ATTR_DP_HASH,   /* u32 hash value. Value 0 indicates the hashOVS_KEY_ATTR_DP_HASH357,13875
	OVS_KEY_ATTR_RECIRC_ID, /* u32 recirc id */OVS_KEY_ATTR_RECIRC_ID359,13989
	OVS_KEY_ATTR_MPLS,      /* array of struct ovs_key_mpls.OVS_KEY_ATTR_MPLS360,14034
	OVS_KEY_ATTR_CT_STATE,	/* u32 bitmask of OVS_CS_F_* */OVS_KEY_ATTR_CT_STATE363,14175
	OVS_KEY_ATTR_CT_ZONE,	/* u16 connection tracking zone. */OVS_KEY_ATTR_CT_ZONE364,14231
	OVS_KEY_ATTR_CT_MARK,	/* u32 connection tracking mark */OVS_KEY_ATTR_CT_MARK365,14290
	OVS_KEY_ATTR_CT_LABELS,	/* 16-octet connection tracking labels */OVS_KEY_ATTR_CT_LABELS366,14348
	OVS_KEY_ATTR_CT_ORIG_TUPLE_IPV4,   /* struct ovs_key_ct_tuple_ipv4 */OVS_KEY_ATTR_CT_ORIG_TUPLE_IPV4367,14415
	OVS_KEY_ATTR_CT_ORIG_TUPLE_IPV6,   /* struct ovs_key_ct_tuple_ipv6 */OVS_KEY_ATTR_CT_ORIG_TUPLE_IPV6368,14486
	OVS_KEY_ATTR_TUNNEL_INFO,  /* struct ovs_tunnel_info */OVS_KEY_ATTR_TUNNEL_INFO372,14618
	OVS_KEY_ATTR_PACKET_TYPE,  /* be32 packet type */OVS_KEY_ATTR_PACKET_TYPE377,14747
	OVS_KEY_ATTR_NSH,	   /* struct ovs_key_nsh */OVS_KEY_ATTR_NSH378,14798
	__OVS_KEY_ATTR_MAX__OVS_KEY_ATTR_MAX381,14853
#define OVS_KEY_ATTR_MAX OVS_KEY_ATTR_MAX384,14877
enum ovs_tunnel_key_attr {ovs_tunnel_key_attr386,14928
	OVS_TUNNEL_KEY_ATTR_ID,                 /* be64 Tunnel ID */OVS_TUNNEL_KEY_ATTR_ID387,14955
	OVS_TUNNEL_KEY_ATTR_IPV4_SRC,           /* be32 src IP address. */OVS_TUNNEL_KEY_ATTR_IPV4_SRC388,15017
	OVS_TUNNEL_KEY_ATTR_IPV4_DST,           /* be32 dst IP address. */OVS_TUNNEL_KEY_ATTR_IPV4_DST389,15085
	OVS_TUNNEL_KEY_ATTR_TOS,                /* u8 Tunnel IP ToS. */OVS_TUNNEL_KEY_ATTR_TOS390,15153
	OVS_TUNNEL_KEY_ATTR_TTL,                /* u8 Tunnel IP TTL. */OVS_TUNNEL_KEY_ATTR_TTL391,15218
	OVS_TUNNEL_KEY_ATTR_DONT_FRAGMENT,      /* No argument, set DF. */OVS_TUNNEL_KEY_ATTR_DONT_FRAGMENT392,15283
	OVS_TUNNEL_KEY_ATTR_CSUM,               /* No argument. CSUM packet. */OVS_TUNNEL_KEY_ATTR_CSUM393,15351
	OVS_TUNNEL_KEY_ATTR_OAM,                /* No argument. OAM frame.  */OVS_TUNNEL_KEY_ATTR_OAM394,15424
	OVS_TUNNEL_KEY_ATTR_GENEVE_OPTS,        /* Array of Geneve options. */OVS_TUNNEL_KEY_ATTR_GENEVE_OPTS395,15496
	OVS_TUNNEL_KEY_ATTR_TP_SRC,		/* be16 src Transport Port. */OVS_TUNNEL_KEY_ATTR_TP_SRC396,15568
	OVS_TUNNEL_KEY_ATTR_TP_DST,		/* be16 dst Transport Port. */OVS_TUNNEL_KEY_ATTR_TP_DST397,15629
	OVS_TUNNEL_KEY_ATTR_VXLAN_OPTS,		/* Nested OVS_VXLAN_EXT_* */OVS_TUNNEL_KEY_ATTR_VXLAN_OPTS398,15690
	OVS_TUNNEL_KEY_ATTR_IPV6_SRC,		/* struct in6_addr src IPv6 address. */OVS_TUNNEL_KEY_ATTR_IPV6_SRC399,15753
	OVS_TUNNEL_KEY_ATTR_IPV6_DST,		/* struct in6_addr dst IPv6 address. */OVS_TUNNEL_KEY_ATTR_IPV6_DST400,15825
	OVS_TUNNEL_KEY_ATTR_PAD,OVS_TUNNEL_KEY_ATTR_PAD401,15897
	__OVS_TUNNEL_KEY_ATTR_MAX__OVS_TUNNEL_KEY_ATTR_MAX402,15923
#define OVS_TUNNEL_KEY_ATTR_MAX OVS_TUNNEL_KEY_ATTR_MAX405,15954
enum ovs_frag_type {ovs_frag_type416,16353
	OVS_FRAG_TYPE_NONE,OVS_FRAG_TYPE_NONE417,16374
	OVS_FRAG_TYPE_FIRST,OVS_FRAG_TYPE_FIRST418,16395
	OVS_FRAG_TYPE_LATER,OVS_FRAG_TYPE_LATER419,16417
	__OVS_FRAG_TYPE_MAX__OVS_FRAG_TYPE_MAX420,16439
#define OVS_FRAG_TYPE_MAX OVS_FRAG_TYPE_MAX423,16464
struct ovs_key_ethernet {ovs_key_ethernet425,16517
	struct eth_addr eth_src;eth_src426,16543
	struct eth_addr eth_dst;eth_dst427,16569
struct ovs_key_mpls {ovs_key_mpls430,16599
	ovs_be32 mpls_lse;mpls_lse431,16621
struct ovs_key_ipv4 {ovs_key_ipv4434,16645
	ovs_be32 ipv4_src;ipv4_src435,16667
	ovs_be32 ipv4_dst;ipv4_dst436,16687
	uint8_t   ipv4_proto;ipv4_proto437,16707
	uint8_t   ipv4_tos;ipv4_tos438,16730
	uint8_t   ipv4_ttl;ipv4_ttl439,16751
	uint8_t   ipv4_frag;	/* One of OVS_FRAG_TYPE_*. */ipv4_frag440,16772
struct ovs_key_ipv6 {ovs_key_ipv6443,16828
	struct in6_addr ipv6_src;ipv6_src444,16850
	struct in6_addr ipv6_dst;ipv6_dst445,16877
	ovs_be32 ipv6_label;	/* 20-bits in least-significant bits. */ipv6_label446,16904
	uint8_t   ipv6_proto;ipv6_proto447,16967
	uint8_t   ipv6_tclass;ipv6_tclass448,16990
	uint8_t   ipv6_hlimit;ipv6_hlimit449,17014
	uint8_t   ipv6_frag;	/* One of OVS_FRAG_TYPE_*. */ipv6_frag450,17038
struct ovs_key_tcp {ovs_key_tcp453,17094
	ovs_be16 tcp_src;tcp_src454,17115
	ovs_be16 tcp_dst;tcp_dst455,17134
struct ovs_key_udp {ovs_key_udp458,17157
	ovs_be16 udp_src;udp_src459,17178
	ovs_be16 udp_dst;udp_dst460,17197
struct ovs_key_sctp {ovs_key_sctp463,17220
	ovs_be16 sctp_src;sctp_src464,17242
	ovs_be16 sctp_dst;sctp_dst465,17262
struct ovs_key_icmp {ovs_key_icmp468,17286
	uint8_t icmp_type;icmp_type469,17308
	uint8_t icmp_code;icmp_code470,17328
struct ovs_key_icmpv6 {ovs_key_icmpv6473,17352
	uint8_t icmpv6_type;icmpv6_type474,17376
	uint8_t icmpv6_code;icmpv6_code475,17398
struct ovs_key_arp {ovs_key_arp478,17424
	ovs_be32 arp_sip;arp_sip479,17445
	ovs_be32 arp_tip;arp_tip480,17464
	ovs_be16 arp_op;arp_op481,17483
	struct eth_addr arp_sha;arp_sha482,17501
	struct eth_addr arp_tha;arp_tha483,17527
struct ovs_key_nd {ovs_key_nd486,17557
	struct in6_addr nd_target;nd_target487,17577
	struct eth_addr nd_sll;nd_sll488,17605
	struct eth_addr nd_tll;nd_tll489,17630
#define OVS_CT_LABELS_LEN_32	OVS_CT_LABELS_LEN_32492,17659
#define OVS_CT_LABELS_LEN	OVS_CT_LABELS_LEN493,17690
struct ovs_key_ct_labels {ovs_key_ct_labels494,17758
		uint8_t	ct_labels[OVS_CT_LABELS_LEN];ct_labels496,17794
		uint32_t	ct_labels_32[OVS_CT_LABELS_LEN_32];ct_labels_32497,17834
struct ovs_key_nsh {ovs_key_nsh501,17889
    uint8_t flags;flags502,17910
    uint8_t mdtype;mdtype503,17929
    uint8_t np;np504,17949
    uint8_t pad;pad505,17965
    ovs_be32 path_hdr;path_hdr506,17982
    ovs_be32 c[4];c507,18005
#define OVS_CS_F_NEW OVS_CS_F_NEW511,18062
#define OVS_CS_F_ESTABLISHED OVS_CS_F_ESTABLISHED512,18139
#define OVS_CS_F_RELATED OVS_CS_F_RELATED513,18217
#define OVS_CS_F_REPLY_DIR OVS_CS_F_REPLY_DIR515,18309
#define OVS_CS_F_INVALID OVS_CS_F_INVALID516,18387
#define OVS_CS_F_TRACKED OVS_CS_F_TRACKED517,18461
#define OVS_CS_F_SRC_NAT OVS_CS_F_SRC_NAT518,18531
#define OVS_CS_F_DST_NAT OVS_CS_F_DST_NAT520,18634
#define OVS_CS_F_NAT_MASK OVS_CS_F_NAT_MASK523,18743
struct ovs_key_ct_tuple_ipv4 {ovs_key_ct_tuple_ipv4525,18808
	ovs_be32 ipv4_src;ipv4_src526,18839
	ovs_be32 ipv4_dst;ipv4_dst527,18859
	ovs_be16 src_port;src_port528,18879
	ovs_be16 dst_port;dst_port529,18899
	uint8_t   ipv4_proto;ipv4_proto530,18919
struct ovs_key_ct_tuple_ipv6 {ovs_key_ct_tuple_ipv6533,18946
	struct in6_addr ipv6_src;ipv6_src534,18977
	struct in6_addr ipv6_dst;ipv6_dst535,19004
	ovs_be16 src_port;src_port536,19031
	ovs_be16 dst_port;dst_port537,19051
	uint8_t   ipv6_proto;ipv6_proto538,19071
enum ovs_flow_attr {ovs_flow_attr583,21655
	OVS_FLOW_ATTR_UNSPEC,OVS_FLOW_ATTR_UNSPEC584,21676
	OVS_FLOW_ATTR_KEY,       /* Sequence of OVS_KEY_ATTR_* attributes. */OVS_FLOW_ATTR_KEY585,21699
	OVS_FLOW_ATTR_ACTIONS,   /* Nested OVS_ACTION_ATTR_* attributes. */OVS_FLOW_ATTR_ACTIONS586,21770
	OVS_FLOW_ATTR_STATS,     /* struct ovs_flow_stats. */OVS_FLOW_ATTR_STATS587,21839
	OVS_FLOW_ATTR_TCP_FLAGS, /* 8-bit OR'd TCP flags. */OVS_FLOW_ATTR_TCP_FLAGS588,21894
	OVS_FLOW_ATTR_USED,      /* u64 msecs last used in monotonic time. */OVS_FLOW_ATTR_USED589,21948
	OVS_FLOW_ATTR_CLEAR,     /* Flag to clear stats, tcp_flags, used. */OVS_FLOW_ATTR_CLEAR590,22019
	OVS_FLOW_ATTR_MASK,      /* Sequence of OVS_KEY_ATTR_* attributes. */OVS_FLOW_ATTR_MASK591,22089
	OVS_FLOW_ATTR_PROBE,     /* Flow operation is a feature probe, errorOVS_FLOW_ATTR_PROBE592,22160
	OVS_FLOW_ATTR_UFID,      /* Variable length unique flow identifier. */OVS_FLOW_ATTR_UFID594,22271
	OVS_FLOW_ATTR_UFID_FLAGS,/* u32 of OVS_UFID_F_*. */OVS_FLOW_ATTR_UFID_FLAGS595,22343
	OVS_FLOW_ATTR_PAD,OVS_FLOW_ATTR_PAD596,22396
	__OVS_FLOW_ATTR_MAX__OVS_FLOW_ATTR_MAX597,22416
#define OVS_FLOW_ATTR_MAX OVS_FLOW_ATTR_MAX600,22441
#define OVS_UFID_F_OMIT_KEY OVS_UFID_F_OMIT_KEY608,22687
#define OVS_UFID_F_OMIT_MASK OVS_UFID_F_OMIT_MASK609,22729
#define OVS_UFID_F_OMIT_ACTIONS OVS_UFID_F_OMIT_ACTIONS610,22771
enum ovs_sample_attr {ovs_sample_attr624,23355
	OVS_SAMPLE_ATTR_UNSPEC,OVS_SAMPLE_ATTR_UNSPEC625,23378
	OVS_SAMPLE_ATTR_PROBABILITY, /* u32 number */OVS_SAMPLE_ATTR_PROBABILITY626,23403
	OVS_SAMPLE_ATTR_ACTIONS,     /* Nested OVS_ACTION_ATTR_* attributes. */OVS_SAMPLE_ATTR_ACTIONS627,23450
	__OVS_SAMPLE_ATTR_MAX,__OVS_SAMPLE_ATTR_MAX628,23523
	OVS_SAMPLE_ATTR_ARG          /* struct sample_arg  */OVS_SAMPLE_ATTR_ARG631,23566
#define OVS_SAMPLE_ATTR_MAX OVS_SAMPLE_ATTR_MAX635,23632
struct sample_arg {sample_arg638,23707
	bool exec;                   /* When true, actions in sample will notexec639,23727
	u32  probability;            /* Same value asprobability642,23858
enum ovs_userspace_attr {ovs_userspace_attr658,24493
	OVS_USERSPACE_ATTR_UNSPEC,OVS_USERSPACE_ATTR_UNSPEC659,24519
	OVS_USERSPACE_ATTR_PID,	      /* u32 Netlink PID to receive upcalls. */OVS_USERSPACE_ATTR_PID660,24547
	OVS_USERSPACE_ATTR_USERDATA,  /* Optional user-specified cookie. */OVS_USERSPACE_ATTR_USERDATA661,24620
	OVS_USERSPACE_ATTR_EGRESS_TUN_PORT,  /* Optional, u32 output portOVS_USERSPACE_ATTR_EGRESS_TUN_PORT662,24689
	OVS_USERSPACE_ATTR_ACTIONS,   /* Optional flag to get actions. */OVS_USERSPACE_ATTR_ACTIONS664,24792
	__OVS_USERSPACE_ATTR_MAX__OVS_USERSPACE_ATTR_MAX665,24859
#define OVS_USERSPACE_ATTR_MAX OVS_USERSPACE_ATTR_MAX668,24889
struct ovs_action_trunc {ovs_action_trunc670,24952
	uint32_t max_len; /* Max packet size in bytes. */max_len671,24978
struct ovs_action_push_mpls {ovs_action_push_mpls682,25397
	ovs_be32 mpls_lse;mpls_lse683,25427
	ovs_be16 mpls_ethertype; /* Either %ETH_P_MPLS_UC or %ETH_P_MPLS_MC */mpls_ethertype684,25447
struct ovs_action_push_vlan {ovs_action_push_vlan698,26100
	ovs_be16 vlan_tpid;	/* 802.1Q or 802.1ad TPID. */vlan_tpid699,26130
	ovs_be16 vlan_tci;	/* 802.1Q TCI (VLAN ID and priority). */vlan_tci700,26181
enum ovs_hash_alg {ovs_hash_alg710,26520
	OVS_HASH_ALG_L4,OVS_HASH_ALG_L4711,26540
struct ovs_action_hash {ovs_action_hash719,26752
	uint32_t  hash_alg;     /* One of ovs_hash_alg. */hash_alg720,26777
	uint32_t  hash_basis;hash_basis721,26829
#define TNL_PUSH_HEADER_SIZE TNL_PUSH_HEADER_SIZE725,26875
struct ovs_action_push_tnl {ovs_action_push_tnl737,27396
	odp_port_t tnl_port;tnl_port738,27425
	odp_port_t out_port;out_port739,27447
	uint32_t header_len;header_len740,27469
	uint32_t tnl_type;     /* For logging. */tnl_type741,27491
	uint32_t header[TNL_PUSH_HEADER_SIZE / 4];header742,27534
enum ovs_ct_attr {ovs_ct_attr778,29705
	OVS_CT_ATTR_UNSPEC,OVS_CT_ATTR_UNSPEC779,29724
	OVS_CT_ATTR_COMMIT,     /* No argument, commits connection. */OVS_CT_ATTR_COMMIT780,29745
	OVS_CT_ATTR_ZONE,       /* u16 zone id. */OVS_CT_ATTR_ZONE781,29809
	OVS_CT_ATTR_MARK,       /* mark to associate with this connection. */OVS_CT_ATTR_MARK782,29853
	OVS_CT_ATTR_LABELS,     /* label to associate with this connection. */OVS_CT_ATTR_LABELS783,29924
	OVS_CT_ATTR_HELPER,     /* netlink helper to assist detection ofOVS_CT_ATTR_HELPER784,29996
	OVS_CT_ATTR_NAT,        /* Nested OVS_NAT_ATTR_* */OVS_CT_ATTR_NAT786,30093
	OVS_CT_ATTR_FORCE_COMMIT,  /* No argument */OVS_CT_ATTR_FORCE_COMMIT787,30146
	OVS_CT_ATTR_EVENTMASK,  /* u32 mask of IPCT_* events. */OVS_CT_ATTR_EVENTMASK788,30192
	__OVS_CT_ATTR_MAX__OVS_CT_ATTR_MAX789,30250
#define OVS_CT_ATTR_MAX OVS_CT_ATTR_MAX792,30273
struct ovs_action_push_eth {ovs_action_push_eth798,30457
	struct ovs_key_ethernet addresses;addresses799,30486
#define OVS_ENCAP_NSH_MAX_MD_LEN OVS_ENCAP_NSH_MAX_MD_LEN802,30526
struct ovs_action_encap_nsh {ovs_action_encap_nsh812,30878
    uint8_t flags;flags813,30908
    uint8_t mdtype;mdtype814,30927
    uint8_t mdlen;mdlen815,30947
    uint8_t np;np816,30966
    ovs_be32 path_hdr;path_hdr817,30982
    uint8_t metadata[OVS_ENCAP_NSH_MAX_MD_LEN];metadata818,31005
enum ovs_nat_attr {ovs_nat_attr842,32358
	OVS_NAT_ATTR_UNSPEC,OVS_NAT_ATTR_UNSPEC843,32378
	OVS_NAT_ATTR_SRC,OVS_NAT_ATTR_SRC844,32400
	OVS_NAT_ATTR_DST,OVS_NAT_ATTR_DST845,32419
	OVS_NAT_ATTR_IP_MIN,OVS_NAT_ATTR_IP_MIN846,32438
	OVS_NAT_ATTR_IP_MAX,OVS_NAT_ATTR_IP_MAX847,32460
	OVS_NAT_ATTR_PROTO_MIN,OVS_NAT_ATTR_PROTO_MIN848,32482
	OVS_NAT_ATTR_PROTO_MAX,OVS_NAT_ATTR_PROTO_MAX849,32507
	OVS_NAT_ATTR_PERSISTENT,OVS_NAT_ATTR_PERSISTENT850,32532
	OVS_NAT_ATTR_PROTO_HASH,OVS_NAT_ATTR_PROTO_HASH851,32558
	OVS_NAT_ATTR_PROTO_RANDOM,OVS_NAT_ATTR_PROTO_RANDOM852,32584
	__OVS_NAT_ATTR_MAX,__OVS_NAT_ATTR_MAX853,32612
#define OVS_NAT_ATTR_MAX OVS_NAT_ATTR_MAX856,32637
enum ovs_action_attr {ovs_action_attr913,35684
	OVS_ACTION_ATTR_UNSPEC,OVS_ACTION_ATTR_UNSPEC914,35707
	OVS_ACTION_ATTR_OUTPUT,	      /* u32 port number. */OVS_ACTION_ATTR_OUTPUT915,35732
	OVS_ACTION_ATTR_USERSPACE,    /* Nested OVS_USERSPACE_ATTR_*. */OVS_ACTION_ATTR_USERSPACE916,35786
	OVS_ACTION_ATTR_SET,          /* One nested OVS_KEY_ATTR_*. */OVS_ACTION_ATTR_SET917,35852
	OVS_ACTION_ATTR_PUSH_VLAN,    /* struct ovs_action_push_vlan. */OVS_ACTION_ATTR_PUSH_VLAN918,35916
	OVS_ACTION_ATTR_POP_VLAN,     /* No argument. */OVS_ACTION_ATTR_POP_VLAN919,35982
	OVS_ACTION_ATTR_SAMPLE,       /* Nested OVS_SAMPLE_ATTR_*. */OVS_ACTION_ATTR_SAMPLE920,36032
	OVS_ACTION_ATTR_RECIRC,       /* u32 recirc_id. */OVS_ACTION_ATTR_RECIRC921,36095
	OVS_ACTION_ATTR_HASH,	      /* struct ovs_action_hash. */OVS_ACTION_ATTR_HASH922,36147
	OVS_ACTION_ATTR_PUSH_MPLS,    /* struct ovs_action_push_mpls. */OVS_ACTION_ATTR_PUSH_MPLS923,36206
	OVS_ACTION_ATTR_POP_MPLS,     /* ovs_be16 ethertype. */OVS_ACTION_ATTR_POP_MPLS924,36272
	OVS_ACTION_ATTR_SET_MASKED,   /* One nested OVS_KEY_ATTR_* includingOVS_ACTION_ATTR_SET_MASKED925,36329
	OVS_ACTION_ATTR_CT,           /* Nested OVS_CT_ATTR_* . */OVS_ACTION_ATTR_CT929,36523
	OVS_ACTION_ATTR_TRUNC,        /* u32 struct ovs_action_trunc. */OVS_ACTION_ATTR_TRUNC930,36583
	OVS_ACTION_ATTR_PUSH_ETH,     /* struct ovs_action_push_eth. */OVS_ACTION_ATTR_PUSH_ETH931,36649
	OVS_ACTION_ATTR_POP_ETH,      /* No argument. */OVS_ACTION_ATTR_POP_ETH932,36714
	OVS_ACTION_ATTR_TUNNEL_PUSH,   /* struct ovs_action_push_tnl*/OVS_ACTION_ATTR_TUNNEL_PUSH935,36784
	OVS_ACTION_ATTR_TUNNEL_POP,    /* u32 port number. */OVS_ACTION_ATTR_TUNNEL_POP936,36848
	OVS_ACTION_ATTR_CLONE,         /* Nested OVS_CLONE_ATTR_*.  */OVS_ACTION_ATTR_CLONE937,36903
	OVS_ACTION_ATTR_METER,         /* u32 meter number. */OVS_ACTION_ATTR_METER938,36967
	OVS_ACTION_ATTR_ENCAP_NSH,    /* struct ovs_action_encap_nsh. */OVS_ACTION_ATTR_ENCAP_NSH939,37023
	OVS_ACTION_ATTR_DECAP_NSH,    /* No argument. */OVS_ACTION_ATTR_DECAP_NSH940,37089
	__OVS_ACTION_ATTR_MAX,	      /* Nothing past this will be accepted__OVS_ACTION_ATTR_MAX942,37146
	OVS_ACTION_ATTR_SET_TO_MASKED, /* Kernel module internal maskedOVS_ACTION_ATTR_SET_TO_MASKED946,37265
#define OVS_ACTION_ATTR_MAX OVS_ACTION_ATTR_MAX952,37405
#define OVS_CT_EVENT_NEW	OVS_CT_EVENT_NEW960,37624
#define OVS_CT_EVENT_RELATED	OVS_CT_EVENT_RELATED961,37680
#define OVS_CT_EVENT_DESTROY	OVS_CT_EVENT_DESTROY962,37744
#define OVS_CT_EVENT_REPLY	OVS_CT_EVENT_REPLY963,37808
#define OVS_CT_EVENT_ASSURED	OVS_CT_EVENT_ASSURED964,37868
#define OVS_CT_EVENT_PROTOINFO	OVS_CT_EVENT_PROTOINFO965,37932
#define OVS_CT_EVENT_HELPER	OVS_CT_EVENT_HELPER966,38000
#define OVS_CT_EVENT_MARK	OVS_CT_EVENT_MARK967,38062
#define OVS_CT_EVENT_SEQADJ	OVS_CT_EVENT_SEQADJ968,38120
#define OVS_CT_EVENT_SECMARK	OVS_CT_EVENT_SECMARK969,38182
#define OVS_CT_EVENT_LABEL	OVS_CT_EVENT_LABEL970,38246
#define OVS_CT_EVENTMASK_DEFAULT OVS_CT_EVENTMASK_DEFAULT972,38307

include/ofp-version-opt.h,179
#define OFP_VERSION_H OFP_VERSION_H2,22
#define OFP_VERSION_LONG_OPTIONS OFP_VERSION_LONG_OPTIONS8,138
#define OFP_VERSION_OPTION_HANDLERS OFP_VERSION_OPTION_HANDLERS12,323

include/ovs-atomic-c11.h,675
#define OMIT_STANDARD_ATOMIC_TYPES OMIT_STANDARD_ATOMIC_TYPES25,861
#define ATOMIC(ATOMIC26,898
#define atomic_read(atomic_read28,934
#define atomic_read_explicit(atomic_read_explicit30,1023
#define atomic_add(atomic_add34,1139
#define atomic_sub(atomic_sub36,1238
#define atomic_or(atomic_or38,1337
#define atomic_xor(atomic_xor40,1434
#define atomic_and(atomic_and42,1533
#define atomic_add_explicit(atomic_add_explicit45,1633
#define atomic_sub_explicit(atomic_sub_explicit47,1755
#define atomic_or_explicit(atomic_or_explicit49,1877
#define atomic_xor_explicit(atomic_xor_explicit51,1997
#define atomic_and_explicit(atomic_and_explicit53,2119

include/ovs-atomic-clang.h,1706
#define OVS_ATOMIC_CLANG_IMPL OVS_ATOMIC_CLANG_IMPL22,781
#define ATOMIC(ATOMIC24,814
#define ATOMIC_VAR_INIT(ATOMIC_VAR_INIT26,850
#define atomic_init(atomic_init28,890
    memory_order_relaxed = 0,memory_order_relaxed33,1080
    memory_order_consume = 1,memory_order_consume34,1110
    memory_order_acquire = 2,memory_order_acquire35,1140
    memory_order_release = 3,memory_order_release36,1170
    memory_order_acq_rel = 4,memory_order_acq_rel37,1200
    memory_order_seq_cst = 5memory_order_seq_cst38,1230
} memory_order;memory_order39,1259
#define atomic_thread_fence(atomic_thread_fence41,1276
#define atomic_signal_fence(atomic_signal_fence42,1344
#define atomic_store(atomic_store44,1413
#define atomic_store_explicit(atomic_store_explicit46,1504
#define atomic_read(atomic_read50,1595
#define atomic_read_explicit(atomic_read_explicit52,1684
#define atomic_compare_exchange_strong(atomic_compare_exchange_strong56,1797
#define atomic_compare_exchange_strong_explicit(atomic_compare_exchange_strong_explicit60,2085
#define atomic_compare_exchange_weak(atomic_compare_exchange_weak63,2231
#define atomic_compare_exchange_weak_explicit(atomic_compare_exchange_weak_explicit67,2496
#define atomic_add(atomic_add70,2638
#define atomic_sub(atomic_sub72,2737
#define atomic_or(atomic_or74,2836
#define atomic_xor(atomic_xor76,2933
#define atomic_and(atomic_and78,3032
#define atomic_add_explicit(atomic_add_explicit81,3132
#define atomic_sub_explicit(atomic_sub_explicit83,3251
#define atomic_or_explicit(atomic_or_explicit85,3370
#define atomic_xor_explicit(atomic_xor_explicit87,3487
#define atomic_and_explicit(atomic_and_explicit89,3606

include/ovs-atomic-flag-gcc4.7+.h,493
    unsigned char b;b25,826
} atomic_flag;atomic_flag26,847
#define ATOMIC_FLAG_INIT ATOMIC_FLAG_INIT27,862
atomic_flag_test_and_set_explicit(volatile atomic_flag *object,atomic_flag_test_and_set_explicit30,922
atomic_flag_test_and_set(volatile atomic_flag *object)atomic_flag_test_and_set37,1117
atomic_flag_clear_explicit(volatile atomic_flag *object, memory_order order)atomic_flag_clear_explicit43,1272
atomic_flag_clear(volatile atomic_flag *object)atomic_flag_clear49,1408

include/ovs-atomic-gcc4+.h,2827
#define OVS_ATOMIC_GCC4P_IMPL OVS_ATOMIC_GCC4P_IMPL23,814
#define ATOMIC(ATOMIC25,847
#define ATOMIC_BOOL_LOCK_FREE ATOMIC_BOOL_LOCK_FREE27,874
#define ATOMIC_CHAR_LOCK_FREE ATOMIC_CHAR_LOCK_FREE28,906
#define ATOMIC_SHORT_LOCK_FREE ATOMIC_SHORT_LOCK_FREE29,938
#define ATOMIC_INT_LOCK_FREE ATOMIC_INT_LOCK_FREE30,971
#define ATOMIC_LONG_LOCK_FREE ATOMIC_LONG_LOCK_FREE31,1002
#define ATOMIC_LLONG_LOCK_FREE ATOMIC_LLONG_LOCK_FREE32,1067
#define ATOMIC_POINTER_LOCK_FREE ATOMIC_POINTER_LOCK_FREE33,1134
    memory_order_relaxed,memory_order_relaxed36,1185
    memory_order_consume,memory_order_consume37,1211
    memory_order_acquire,memory_order_acquire38,1237
    memory_order_release,memory_order_release39,1263
    memory_order_acq_rel,memory_order_acq_rel40,1289
    memory_order_seq_cstmemory_order_seq_cst41,1315
} memory_order;memory_order42,1340
#define IS_LOCKLESS_ATOMIC(IS_LOCKLESS_ATOMIC44,1358
#define ATOMIC_VAR_INIT(ATOMIC_VAR_INIT46,1430
#define atomic_init(atomic_init47,1467
atomic_thread_fence(memory_order order)atomic_thread_fence50,1554
atomic_thread_fence_if_seq_cst(memory_order order)atomic_thread_fence_if_seq_cst58,1695
atomic_signal_fence(memory_order order)atomic_signal_fence66,1847
#define atomic_is_lock_free(atomic_is_lock_free73,1980
#define atomic_store(atomic_store77,2122
#define atomic_store_explicit(atomic_store_explicit79,2213
#define atomic_read(atomic_read93,2974
#define atomic_read_explicit(atomic_read_explicit95,3063
#define atomic_compare_exchange_strong(atomic_compare_exchange_strong109,3767
#define atomic_compare_exchange_strong_explicit(atomic_compare_exchange_strong_explicit123,4578
#define atomic_compare_exchange_weak atomic_compare_exchange_weak126,4744
#define atomic_compare_exchange_weak_explicit atomic_compare_exchange_weak_explicit128,4829
#define atomic_op__(atomic_op__131,4924
#define atomic_add(atomic_add145,5676
#define atomic_sub(atomic_sub146,5744
#define atomic_or(atomic_or147,5812
#define atomic_xor(atomic_xor148,5879
#define atomic_and(atomic_and149,5947
#define atomic_add_explicit(atomic_add_explicit151,6016
#define atomic_sub_explicit(atomic_sub_explicit153,6127
#define atomic_or_explicit(atomic_or_explicit155,6238
#define atomic_xor_explicit(atomic_xor_explicit157,6348
#define atomic_and_explicit(atomic_and_explicit159,6459
    int b;b165,6608
} atomic_flag;atomic_flag166,6619
#define ATOMIC_FLAG_INIT ATOMIC_FLAG_INIT167,6634
atomic_flag_test_and_set_explicit(volatile atomic_flag *object,atomic_flag_test_and_set_explicit170,6689
#define atomic_flag_test_and_set(atomic_flag_test_and_set186,7149
atomic_flag_clear_explicit(volatile atomic_flag *object,atomic_flag_clear_explicit190,7309
#define atomic_flag_clear(atomic_flag_clear202,7705

include/ovs-atomic-gcc4.7+.h,1791
#define ATOMIC(ATOMIC22,793
    memory_order_relaxed = __ATOMIC_RELAXED,memory_order_relaxed25,835
    memory_order_consume = __ATOMIC_CONSUME,memory_order_consume26,880
    memory_order_acquire = __ATOMIC_ACQUIRE,memory_order_acquire27,925
    memory_order_release = __ATOMIC_RELEASE,memory_order_release28,970
    memory_order_acq_rel = __ATOMIC_ACQ_REL,memory_order_acq_rel29,1015
    memory_order_seq_cst = __ATOMIC_SEQ_CSTmemory_order_seq_cst30,1060
} memory_order;memory_order31,1104
#define ATOMIC_VAR_INIT(ATOMIC_VAR_INIT33,1121
#define atomic_init(atomic_init34,1160
#define atomic_thread_fence atomic_thread_fence36,1228
#define atomic_signal_fence atomic_signal_fence37,1278
#define atomic_is_lock_free atomic_is_lock_free38,1328
#define atomic_store(atomic_store40,1379
#define atomic_store_explicit atomic_store_explicit42,1470
#define atomic_read(atomic_read44,1518
#define atomic_read_explicit(atomic_read_explicit46,1607
#define atomic_compare_exchange_strong(atomic_compare_exchange_strong50,1723
#define atomic_compare_exchange_strong_explicit(atomic_compare_exchange_strong_explicit54,1996
#define atomic_compare_exchange_weak(atomic_compare_exchange_weak57,2140
#define atomic_compare_exchange_weak_explicit(atomic_compare_exchange_weak_explicit61,2405
#define atomic_add(atomic_add64,2546
#define atomic_sub(atomic_sub66,2657
#define atomic_or(atomic_or68,2768
#define atomic_xor(atomic_xor70,2877
#define atomic_and(atomic_and72,2988
#define atomic_add_explicit(atomic_add_explicit75,3100
#define atomic_sub_explicit(atomic_sub_explicit77,3224
#define atomic_or_explicit(atomic_or_explicit79,3348
#define atomic_xor_explicit(atomic_xor_explicit81,3470
#define atomic_and_explicit(atomic_and_explicit83,3594

include/ovs-atomic-i586.h,3607
#define OVS_ATOMIC_I586_IMPL OVS_ATOMIC_I586_IMPL23,791
#define compiler_barrier(compiler_barrier81,3817
#define cpu_barrier(cpu_barrier82,3878
#define ATOMIC(ATOMIC99,4767
    memory_order_relaxed,memory_order_relaxed103,4914
    memory_order_consume,memory_order_consume104,4940
    memory_order_acquire,memory_order_acquire105,4966
    memory_order_release,memory_order_release106,4992
    memory_order_acq_rel,memory_order_acq_rel107,5018
    memory_order_seq_cstmemory_order_seq_cst108,5044
} memory_order;memory_order109,5069
#define ATOMIC_BOOL_LOCK_FREE ATOMIC_BOOL_LOCK_FREE111,5087
#define ATOMIC_CHAR_LOCK_FREE ATOMIC_CHAR_LOCK_FREE112,5119
#define ATOMIC_SHORT_LOCK_FREE ATOMIC_SHORT_LOCK_FREE113,5151
#define ATOMIC_INT_LOCK_FREE ATOMIC_INT_LOCK_FREE114,5184
#define ATOMIC_LONG_LOCK_FREE ATOMIC_LONG_LOCK_FREE115,5215
#define ATOMIC_LLONG_LOCK_FREE ATOMIC_LLONG_LOCK_FREE116,5247
#define ATOMIC_POINTER_LOCK_FREE ATOMIC_POINTER_LOCK_FREE117,5280
#define IS_LOCKLESS_ATOMIC(IS_LOCKLESS_ATOMIC119,5316
#define ATOMIC_VAR_INIT(ATOMIC_VAR_INIT122,5429
#define atomic_init(atomic_init123,5466
atomic_compiler_barrier(memory_order order)atomic_compiler_barrier146,6621
atomic_thread_fence(memory_order order)atomic_thread_fence154,6763
atomic_signal_fence(memory_order order)atomic_signal_fence164,6950
#define atomic_is_lock_free(atomic_is_lock_free169,7031
#define atomic_exchange_8__(atomic_exchange_8__183,7671
#define atomic_exchange_8__(atomic_exchange_8__200,8445
#define atomic_exchange__(atomic_exchange__212,8967
#define atomic_store_8__(atomic_store_8__243,10773
#define atomic_store_8__(atomic_store_8__249,11044
#define atomic_store_explicit(atomic_store_explicit253,11138
#define atomic_store(atomic_store270,12073
#define atomic_read_8__(atomic_read_8__276,12359
#define atomic_read_8__(atomic_read_8__290,13020
#define atomic_read_explicit(atomic_read_explicit305,13635
#define atomic_read(atomic_read318,14242
#define atomic_compare_exchange_8__(atomic_compare_exchange_8__326,14623
#define atomic_compare_exchange_8__(atomic_compare_exchange_8__339,15452
#define atomic_compare_exchange__(atomic_compare_exchange__351,16139
#define atomic_compare_exchange_strong_explicit(atomic_compare_exchange_strong_explicit363,16892
#define atomic_compare_exchange_strong(atomic_compare_exchange_strong394,19127
#define atomic_compare_exchange_weak atomic_compare_exchange_weak398,19397
#define atomic_compare_exchange_weak_explicit atomic_compare_exchange_weak_explicit400,19482
#define atomic_add__(atomic_add__403,19577
#define atomic_add_32__(atomic_add_32__410,19860
#define atomic_op__(atomic_op__425,20538
#define atomic_add_explicit(atomic_add_explicit441,21554
#define atomic_add(atomic_add445,21798
#define atomic_sub_explicit(atomic_sub_explicit448,21927
#define atomic_sub(atomic_sub452,22171
#define atomic_or_explicit(atomic_or_explicit455,22300
#define atomic_or(atomic_or457,22400
#define atomic_xor_explicit(atomic_xor_explicit460,22527
#define atomic_xor(atomic_xor462,22627
#define atomic_and_explicit(atomic_and_explicit465,22756
#define atomic_and(atomic_and467,22856
typedef ATOMIC(int) atomic_flag;atomic_flag473,23006
#define ATOMIC_FLAG_INIT ATOMIC_FLAG_INIT474,23039
#define atomic_flag_test_and_set_explicit(atomic_flag_test_and_set_explicit476,23075
#define atomic_flag_test_and_set(atomic_flag_test_and_set478,23179
#define atomic_flag_clear_explicit(atomic_flag_clear_explicit481,23320
#define atomic_flag_clear(atomic_flag_clear483,23412

include/ovs-atomic-locked.h,593
#define OVS_ATOMIC_LOCKED_IMPL OVS_ATOMIC_LOCKED_IMPL6,169
#define atomic_store_locked(atomic_store_locked11,262
#define atomic_read_locked(atomic_read_locked17,478
#define atomic_compare_exchange_locked(atomic_compare_exchange_locked24,735
#define atomic_op_locked_add atomic_op_locked_add34,1218
#define atomic_op_locked_sub atomic_op_locked_sub35,1250
#define atomic_op_locked_or atomic_op_locked_or36,1282
#define atomic_op_locked_xor atomic_op_locked_xor37,1314
#define atomic_op_locked_and atomic_op_locked_and38,1346
#define atomic_op_locked(atomic_op_locked39,1378

include/ovs-atomic-msvc.h,3800
#define ATOMIC(ATOMIC33,1468
    memory_order_relaxed,memory_order_relaxed36,1519
    memory_order_consume,memory_order_consume37,1545
    memory_order_acquire,memory_order_acquire38,1571
    memory_order_release,memory_order_release39,1597
    memory_order_acq_rel,memory_order_acq_rel40,1623
    memory_order_seq_cstmemory_order_seq_cst41,1649
} memory_order;memory_order42,1674
#define ATOMIC_BOOL_LOCK_FREE ATOMIC_BOOL_LOCK_FREE44,1691
#define ATOMIC_CHAR_LOCK_FREE ATOMIC_CHAR_LOCK_FREE45,1723
#define ATOMIC_SHORT_LOCK_FREE ATOMIC_SHORT_LOCK_FREE46,1755
#define ATOMIC_INT_LOCK_FREE ATOMIC_INT_LOCK_FREE47,1788
#define ATOMIC_LONG_LOCK_FREE ATOMIC_LONG_LOCK_FREE48,1819
#define ATOMIC_LLONG_LOCK_FREE ATOMIC_LLONG_LOCK_FREE49,1851
#define ATOMIC_POINTER_LOCK_FREE ATOMIC_POINTER_LOCK_FREE50,1884
#define IS_LOCKLESS_ATOMIC(IS_LOCKLESS_ATOMIC52,1920
#define ATOMIC_VAR_INIT(ATOMIC_VAR_INIT55,2032
#define atomic_init(atomic_init56,2071
atomic_compiler_barrier(memory_order order)atomic_compiler_barrier59,2158
atomic_thread_fence(memory_order order)atomic_thread_fence70,2504
atomic_signal_fence(memory_order order)atomic_signal_fence82,2807
#define atomic_store32(atomic_store3292,3162
#define atomic_store64(atomic_store64110,4206
#define atomic_storeX(atomic_storeX119,4715
#define atomic_store(atomic_store127,5166
#define atomic_store_explicit(atomic_store_explicit130,5292
#define atomic_readX(atomic_readX157,6998
#define atomic_read64(atomic_read64163,7310
#define atomic_read(atomic_read169,7647
#define atomic_read_explicit(atomic_read_explicit172,7771
#define atomic_op(atomic_op188,8708
#define atomic_add32(atomic_add32193,8869
#define atomic_add_generic(atomic_add_generic198,9103
#define atomic_add(atomic_add202,9319
#define atomic_add_explicit(atomic_add_explicit205,9453
#define atomic_sub(atomic_sub220,10212
#define atomic_sub_explicit(atomic_sub_explicit223,10352
#define atomic_and32(atomic_and32228,10503
#define atomic_and_generic(atomic_and_generic232,10687
#define atomic_and(atomic_and236,10897
#define atomic_and_explicit(atomic_and_explicit239,11031
#define atomic_or32(atomic_or32254,11780
#define atomic_or_generic(atomic_or_generic258,11962
#define atomic_or(atomic_or262,12169
#define atomic_or_explicit(atomic_or_explicit265,12301
#define atomic_xor32(atomic_xor32280,13049
#define atomic_xor_generic(atomic_xor_generic284,13233
#define atomic_xor(atomic_xor288,13443
#define atomic_xor_explicit(atomic_xor_explicit291,13577
#define atomic_compare_exchange_strong(atomic_compare_exchange_strong304,14299
#define atomic_compare_exchange_weak atomic_compare_exchange_weak309,14553
#define atomic_compare_exchange_weak_explicit atomic_compare_exchange_weak_explicit310,14621
atomic_compare_exchange8(int8_t volatile *dst, int8_t *expected, int8_t src)atomic_compare_exchange8317,14901
atomic_compare_exchange16(int16_t volatile *dst, int16_t *expected,atomic_compare_exchange16329,15200
atomic_compare_exchange32(int32_t volatile *dst, int32_t *expected,atomic_compare_exchange32342,15530
atomic_compare_exchange64(int64_t volatile *dst, int64_t *expected,atomic_compare_exchange64355,15858
atomic_compare_unreachable()atomic_compare_unreachable368,16188
#define atomic_compare_exchange_strong_explicit(atomic_compare_exchange_strong_explicit373,16239
typedef ATOMIC(int32_t) atomic_flag;atomic_flag392,17421
#define ATOMIC_FLAG_INIT ATOMIC_FLAG_INIT393,17458
#define atomic_flag_test_and_set(atomic_flag_test_and_set395,17486
#define atomic_flag_test_and_set_explicit(atomic_flag_test_and_set_explicit398,17589
#define atomic_flag_clear_explicit(atomic_flag_clear_explicit401,17686
#define atomic_flag_clear(atomic_flag_clear403,17764

include/ovs-atomic-pthreads.h,2691
#define OVS_ATOMIC_PTHREADS_IMPL OVS_ATOMIC_PTHREADS_IMPL24,819
#define ATOMIC(ATOMIC26,855
#define ATOMIC_BOOL_LOCK_FREE ATOMIC_BOOL_LOCK_FREE28,882
#define ATOMIC_CHAR_LOCK_FREE ATOMIC_CHAR_LOCK_FREE29,914
#define ATOMIC_SHORT_LOCK_FREE ATOMIC_SHORT_LOCK_FREE30,946
#define ATOMIC_INT_LOCK_FREE ATOMIC_INT_LOCK_FREE31,979
#define ATOMIC_LONG_LOCK_FREE ATOMIC_LONG_LOCK_FREE32,1010
#define ATOMIC_LLONG_LOCK_FREE ATOMIC_LLONG_LOCK_FREE33,1042
#define ATOMIC_POINTER_LOCK_FREE ATOMIC_POINTER_LOCK_FREE34,1075
    memory_order_relaxed,memory_order_relaxed37,1126
    memory_order_consume,memory_order_consume38,1152
    memory_order_acquire,memory_order_acquire39,1178
    memory_order_release,memory_order_release40,1204
    memory_order_acq_rel,memory_order_acq_rel41,1230
    memory_order_seq_cstmemory_order_seq_cst42,1256
} memory_order;memory_order43,1281
#define ATOMIC_VAR_INIT(ATOMIC_VAR_INIT45,1298
#define atomic_init(atomic_init46,1337
atomic_thread_fence(memory_order order OVS_UNUSED)atomic_thread_fence49,1424
atomic_signal_fence(memory_order order OVS_UNUSED)atomic_signal_fence55,1524
#define atomic_is_lock_free(atomic_is_lock_free60,1605
#define atomic_store(atomic_store62,1645
#define atomic_store_explicit(atomic_store_explicit63,1706
#define atomic_read(atomic_read66,1801
#define atomic_read_explicit(atomic_read_explicit67,1860
#define atomic_compare_exchange_strong(atomic_compare_exchange_strong70,1955
#define atomic_compare_exchange_strong_explicit(atomic_compare_exchange_strong_explicit72,2063
#define atomic_compare_exchange_weak atomic_compare_exchange_weak75,2266
#define atomic_compare_exchange_weak_explicit atomic_compare_exchange_weak_explicit77,2351
#define atomic_add(atomic_add80,2446
#define atomic_sub(atomic_sub81,2519
#define atomic_or(atomic_or82,2592
#define atomic_xor(atomic_xor83,2664
#define atomic_and(atomic_and84,2737
#define atomic_add_explicit(atomic_add_explicit86,2811
#define atomic_sub_explicit(atomic_sub_explicit88,2914
#define atomic_or_explicit(atomic_or_explicit90,3017
#define atomic_xor_explicit(atomic_xor_explicit92,3119
#define atomic_and_explicit(atomic_and_explicit94,3222
    bool b;b100,3363
} atomic_flag;atomic_flag101,3375
#define ATOMIC_FLAG_INIT ATOMIC_FLAG_INIT102,3390
atomic_flag_test_and_set(volatile atomic_flag *flag_)atomic_flag_test_and_set105,3445
atomic_flag_test_and_set_explicit(volatile atomic_flag *flag,atomic_flag_test_and_set_explicit119,3722
atomic_flag_clear(volatile atomic_flag *flag_)atomic_flag_clear126,3916
atomic_flag_clear_explicit(volatile atomic_flag *flag,atomic_flag_clear_explicit136,4119

include/ovs-atomic-x86_64.h,3082
#define OVS_ATOMIC_X86_64_IMPL OVS_ATOMIC_X86_64_IMPL22,785
#define compiler_barrier(compiler_barrier85,4147
#define cpu_barrier(cpu_barrier86,4212
#define ATOMIC(ATOMIC100,4887
    memory_order_relaxed,memory_order_relaxed104,4995
    memory_order_consume,memory_order_consume105,5021
    memory_order_acquire,memory_order_acquire106,5047
    memory_order_release,memory_order_release107,5073
    memory_order_acq_rel,memory_order_acq_rel108,5099
    memory_order_seq_cstmemory_order_seq_cst109,5125
} memory_order;memory_order110,5150
#define ATOMIC_BOOL_LOCK_FREE ATOMIC_BOOL_LOCK_FREE112,5168
#define ATOMIC_CHAR_LOCK_FREE ATOMIC_CHAR_LOCK_FREE113,5200
#define ATOMIC_SHORT_LOCK_FREE ATOMIC_SHORT_LOCK_FREE114,5232
#define ATOMIC_INT_LOCK_FREE ATOMIC_INT_LOCK_FREE115,5265
#define ATOMIC_LONG_LOCK_FREE ATOMIC_LONG_LOCK_FREE116,5296
#define ATOMIC_LLONG_LOCK_FREE ATOMIC_LLONG_LOCK_FREE117,5328
#define ATOMIC_POINTER_LOCK_FREE ATOMIC_POINTER_LOCK_FREE118,5361
#define IS_LOCKLESS_ATOMIC(IS_LOCKLESS_ATOMIC120,5397
#define ATOMIC_VAR_INIT(ATOMIC_VAR_INIT123,5510
#define atomic_init(atomic_init124,5547
atomic_compiler_barrier(memory_order order)atomic_compiler_barrier147,6702
atomic_thread_fence(memory_order order)atomic_thread_fence155,6844
atomic_signal_fence(memory_order order)atomic_signal_fence165,7031
#define atomic_is_lock_free(atomic_is_lock_free170,7112
#define atomic_exchange__(atomic_exchange__174,7254
#define atomic_store_explicit(atomic_store_explicit198,8400
#define atomic_store(atomic_store211,9103
#define atomic_read_explicit(atomic_read_explicit218,9373
#define atomic_read(atomic_read227,9844
#define atomic_compare_exchange__(atomic_compare_exchange__230,9968
#define atomic_compare_exchange_strong_explicit(atomic_compare_exchange_strong_explicit247,10970
#define atomic_compare_exchange_strong(atomic_compare_exchange_strong268,12389
#define atomic_compare_exchange_weak atomic_compare_exchange_weak272,12659
#define atomic_compare_exchange_weak_explicit atomic_compare_exchange_weak_explicit274,12744
#define atomic_add__(atomic_add__277,12839
#define atomic_add_explicit(atomic_add_explicit284,13122
#define atomic_add(atomic_add296,13723
#define atomic_sub_explicit(atomic_sub_explicit299,13852
#define atomic_sub(atomic_sub301,13960
#define atomic_op__(atomic_op__306,14176
#define atomic_or_explicit(atomic_or_explicit322,15192
#define atomic_or(atomic_or324,15292
#define atomic_xor_explicit(atomic_xor_explicit327,15419
#define atomic_xor(atomic_xor329,15519
#define atomic_and_explicit(atomic_and_explicit332,15648
#define atomic_and(atomic_and334,15748
typedef ATOMIC(int) atomic_flag;atomic_flag340,15898
#define ATOMIC_FLAG_INIT ATOMIC_FLAG_INIT341,15931
#define atomic_flag_test_and_set_explicit(atomic_flag_test_and_set_explicit343,15967
#define atomic_flag_test_and_set(atomic_flag_test_and_set345,16071
#define atomic_flag_clear_explicit(atomic_flag_clear_explicit348,16212
#define atomic_flag_clear(atomic_flag_clear350,16304

include/ovs-atomic.h,3758
#define OVS_ATOMIC_H OVS_ATOMIC_H18,635
#define IN_OVS_ATOMIC_HIN_OVS_ATOMIC_H320,12716
#undef IN_OVS_ATOMIC_HIN_OVS_ATOMIC_H346,13746
typedef ATOMIC(bool)               atomic_bool;atomic_bool349,13805
typedef ATOMIC(char)               atomic_char;atomic_char351,13854
typedef ATOMIC(signed char)        atomic_schar;atomic_schar352,13902
typedef ATOMIC(unsigned char)      atomic_uchar;atomic_uchar353,13951
typedef ATOMIC(short)              atomic_short;atomic_short355,14001
typedef ATOMIC(unsigned short)     atomic_ushort;atomic_ushort356,14050
typedef ATOMIC(int)                atomic_int;atomic_int358,14101
typedef ATOMIC(unsigned int)       atomic_uint;atomic_uint359,14148
typedef ATOMIC(long)               atomic_long;atomic_long361,14197
typedef ATOMIC(unsigned long)      atomic_ulong;atomic_ulong362,14245
typedef ATOMIC(long long)          atomic_llong;atomic_llong364,14295
typedef ATOMIC(unsigned long long) atomic_ullong;atomic_ullong365,14344
typedef ATOMIC(size_t)             atomic_size_t;atomic_size_t367,14395
typedef ATOMIC(ptrdiff_t)          atomic_ptrdiff_t;atomic_ptrdiff_t368,14445
typedef ATOMIC(intmax_t)           atomic_intmax_t;atomic_intmax_t370,14499
typedef ATOMIC(uintmax_t)          atomic_uintmax_t;atomic_uintmax_t371,14551
typedef ATOMIC(intptr_t)           atomic_intptr_t;atomic_intptr_t373,14605
typedef ATOMIC(uintptr_t)          atomic_uintptr_t;atomic_uintptr_t374,14657
typedef ATOMIC(uint8_t)   atomic_uint8_t;atomic_uint8_t378,14785
typedef ATOMIC(uint16_t)  atomic_uint16_t;atomic_uint16_t379,14827
typedef ATOMIC(uint32_t)  atomic_uint32_t;atomic_uint32_t380,14870
typedef ATOMIC(int8_t)    atomic_int8_t;atomic_int8_t382,14914
typedef ATOMIC(int16_t)   atomic_int16_t;atomic_int16_t383,14955
typedef ATOMIC(int32_t)   atomic_int32_t;atomic_int32_t384,14997
#define atomic_store_relaxed(atomic_store_relaxed392,15356
#define atomic_read_relaxed(atomic_read_relaxed394,15482
#define atomic_compare_exchange_strong_relaxed(atomic_compare_exchange_strong_relaxed396,15613
#define atomic_compare_exchange_weak_relaxed(atomic_compare_exchange_weak_relaxed400,15883
#define atomic_add_relaxed(atomic_add_relaxed404,16151
#define atomic_sub_relaxed(atomic_sub_relaxed406,16287
#define atomic_or_relaxed(atomic_or_relaxed408,16423
#define atomic_xor_relaxed(atomic_xor_relaxed410,16558
#define atomic_and_relaxed(atomic_and_relaxed412,16694
#define atomic_flag_test_and_set_relaxed(atomic_flag_test_and_set_relaxed414,16830
#define atomic_flag_clear_relaxed(atomic_flag_clear_relaxed416,16970
typedef struct atomic_count {atomic_count428,17537
    atomic_uint count;count429,17567
} atomic_count;atomic_count430,17590
#define ATOMIC_COUNT_INIT(ATOMIC_COUNT_INIT432,17607
atomic_count_init(atomic_count *count, unsigned int value)atomic_count_init435,17670
atomic_count_inc(atomic_count *count)atomic_count_inc441,17800
atomic_count_dec(atomic_count *count)atomic_count_dec451,17958
atomic_count_get(atomic_count *count)atomic_count_get461,18116
atomic_count_set(atomic_count *count, unsigned int value)atomic_count_set471,18270
struct ovs_refcount {ovs_refcount477,18404
    atomic_uint count;count478,18426
ovs_refcount_init(struct ovs_refcount *refcount)ovs_refcount_init483,18539
ovs_refcount_ref(struct ovs_refcount *refcount)ovs_refcount_ref493,18795
ovs_refcount_unref(struct ovs_refcount *refcount)ovs_refcount_unref516,19634
ovs_refcount_read(const struct ovs_refcount *refcount_)ovs_refcount_read540,20450
ovs_refcount_try_ref_rcu(struct ovs_refcount *refcount)ovs_refcount_try_ref_rcu567,21492
ovs_refcount_unref_relaxed(struct ovs_refcount *refcount)ovs_refcount_unref_relaxed614,23072

include/ovs-lldp.h,1576
#define OVS_LLDP_HOVS_LLDP_H20,697
#define LLDP_DEFAULT_TRANSMIT_INTERVAL_MS LLDP_DEFAULT_TRANSMIT_INTERVAL_MS32,957
struct lldp {lldp40,1143
    struct hmap_node    hmap_node;        /* Node in all_lldps list. */hmap_node41,1157
    struct lldpd        *lldpd;lldpd42,1229
    char                *name;            /* Name of the port. */name43,1261
    struct timer        tx_timer;         /* Send LLDP when expired. */tx_timer44,1327
    struct hmap         mappings_by_isid; /* "struct" indexed by ISID */mappings_by_isid45,1399
    struct hmap         mappings_by_aux;  /* "struct" indexed by aux */mappings_by_aux46,1472
    struct ovs_list     active_mapping_queue;active_mapping_queue47,1544
    struct ovs_refcount ref_cnt;ref_cnt48,1590
    bool                enabled;          /* LLDP enabled on port */enabled49,1623
struct aa_settings {aa_settings54,1742
    char *system_description;system_description55,1763
    char *system_name;system_name56,1793
struct aa_mapping_settings {aa_mapping_settings61,1866
    uint32_t isid;isid62,1895
    uint16_t vlan;vlan63,1914
enum bridge_aa_vlan_oper {bridge_aa_vlan_oper66,1937
   BRIDGE_AA_VLAN_OPER_UNDEF,BRIDGE_AA_VLAN_OPER_UNDEF67,1964
   BRIDGE_AA_VLAN_OPER_ADD,BRIDGE_AA_VLAN_OPER_ADD68,1994
   BRIDGE_AA_VLAN_OPER_REMOVEBRIDGE_AA_VLAN_OPER_REMOVE69,2022
struct bridge_aa_vlan {bridge_aa_vlan75,2185
    struct ovs_list list_node;list_node76,2209
    char *port_name;port_name77,2240
    uint16_t vlan;vlan78,2261
    enum bridge_aa_vlan_oper oper;oper79,2280

include/ovs-numa.h,720
#define OVS_NUMA_H OVS_NUMA_H18,621
#define OVS_CORE_UNSPEC OVS_CORE_UNSPEC26,738
#define OVS_NUMA_UNSPEC OVS_NUMA_UNSPEC27,770
struct ovs_numa_dump {ovs_numa_dump30,851
    struct hmap cores;cores31,874
    struct hmap numas;numas32,897
struct ovs_numa_info_core {ovs_numa_info_core36,956
    struct hmap_node hmap_node;hmap_node37,984
    int numa_id;numa_id38,1016
    unsigned core_id;core_id39,1033
struct ovs_numa_info_numa {ovs_numa_info_numa43,1078
    struct hmap_node hmap_node;hmap_node44,1106
    int numa_id;numa_id45,1138
    size_t n_cores;n_cores46,1155
#define FOR_EACH_CORE_ON_DUMP(FOR_EACH_CORE_ON_DUMP66,1999
#define FOR_EACH_NUMA_ON_DUMP(FOR_EACH_NUMA_ON_DUMP69,2116

include/ovs-rcu.h,1822
#define OVS_RCU_H OVS_RCU_H18,632
#define OVSRCU_TYPE(OVSRCU_TYPE164,6330
#define OVSRCU_INITIALIZER(OVSRCU_INITIALIZER165,6383
#define ovsrcu_get__(ovsrcu_get__166,6444
#define ovsrcu_get(ovsrcu_get176,7118
#define ovsrcu_get_protected(ovsrcu_get_protected178,7200
#define ovsrcu_set__(ovsrcu_set__185,7529
struct ovsrcu_pointer { ATOMIC(void *) p; };ovsrcu_pointer195,8154
struct ovsrcu_pointer { ATOMIC(void *) p; };p195,8154
#define OVSRCU_TYPE(OVSRCU_TYPE196,8199
#define OVSRCU_INITIALIZER(OVSRCU_INITIALIZER197,8247
ovsrcu_get__(const struct ovsrcu_pointer *pointer, memory_order order)ovsrcu_get__199,8329
#define ovsrcu_get(ovsrcu_get206,8555
#define ovsrcu_get_protected(ovsrcu_get_protected208,8649
static inline void ovsrcu_set__(struct ovsrcu_pointer *pointer,ovsrcu_set__211,8754
#define ovsrcu_set(ovsrcu_set223,9176
#define ovsrcu_set_hidden(ovsrcu_set_hidden229,9450
#define ovsrcu_init(ovsrcu_init234,9632
#define ovsrcu_postpone(ovsrcu_postpone239,9892
typedef struct { atomic_int v; } ovsrcu_index;v248,10412
typedef struct { atomic_int v; } ovsrcu_index;ovsrcu_index248,10412
static inline int ovsrcu_index_get__(const ovsrcu_index *i, memory_order order)ovsrcu_index_get__250,10460
static inline int ovsrcu_index_get(const ovsrcu_index *i)ovsrcu_index_get259,10752
static inline int ovsrcu_index_get_protected(const ovsrcu_index *i)ovsrcu_index_get_protected267,11026
static inline void ovsrcu_index_set__(ovsrcu_index *i, int value,ovsrcu_index_set__272,11155
static inline void ovsrcu_index_set(ovsrcu_index *i, int value)ovsrcu_index_set280,11459
static inline void ovsrcu_index_set_hidden(ovsrcu_index *i, int value)ovsrcu_index_set_hidden288,11736
static inline void ovsrcu_index_init(ovsrcu_index *i, int value)ovsrcu_index_init295,11973

include/ovs-router.h,50
#define OVS_TNL_ROUTER_H OVS_TNL_ROUTER_H18,627

include/ovs-thread.h,2045
#define OVS_THREAD_H OVS_THREAD_H18,629
struct ovs_barrier {ovs_barrier30,867
    uint32_t size;            /* Number of threads to wait. */size31,888
    atomic_count count;       /* Number of threads already hit the barrier. */count32,951
    struct seq *seq;seq33,1030
struct OVS_LOCKABLE ovs_rwlock {ovs_rwlock59,2193
    pthread_rwlock_t lock;lock60,2226
    const char *where;          /* NULL if and only if uninitialized. */where61,2253
#define OVS_RWLOCK_INITIALIZER OVS_RWLOCK_INITIALIZER66,2406
#define OVS_RWLOCK_INITIALIZER OVS_RWLOCK_INITIALIZER69,2521
void ovs_rwlock_unlock(const struct ovs_rwlock *rwlock) OVS_RELEASES(rwlock);rwlock79,2994
    OVS_ACQ_WRLOCK(rwlock);rwlock89,3479
#define ovs_rwlock_wrlock(ovs_rwlock_wrlock90,3507
#define ovs_rwlock_trywrlock(ovs_rwlock_trywrlock95,3712
    OVS_ACQ_RDLOCK(rwlock);rwlock99,3886
#define ovs_rwlock_rdlock(ovs_rwlock_rdlock100,3914
#define ovs_rwlock_tryrdlock(ovs_rwlock_tryrdlock105,4119
#define thread_local thread_local236,9729
#define DEFINE_STATIC_PER_THREAD_DATA(DEFINE_STATIC_PER_THREAD_DATA241,9780
#define DECLARE_EXTERN_PER_THREAD_DATA(DECLARE_EXTERN_PER_THREAD_DATA256,10822
#define DEFINE_EXTERN_PER_THREAD_DATA(DEFINE_EXTERN_PER_THREAD_DATA271,11864
#define DEFINE_STATIC_PER_THREAD_DATA(DEFINE_STATIC_PER_THREAD_DATA274,12045
#define DECLARE_EXTERN_PER_THREAD_DATA(DECLARE_EXTERN_PER_THREAD_DATA312,14789
#define DEFINE_EXTERN_PER_THREAD_DATA(DEFINE_EXTERN_PER_THREAD_DATA323,15564
#define DEFINE_PER_THREAD_MALLOCED_DATA(DEFINE_PER_THREAD_MALLOCED_DATA384,19010
typedef struct ovsthread_key *ovsthread_key_t;ovsthread_key_t453,22695
ovsthread_id_self(void)ovsthread_id_self473,23354
struct ovsthread_stats {ovsthread_stats491,23779
    struct ovs_mutex mutex;mutex492,23804
    void *volatile buckets[16];buckets493,23832
#define OVSTHREAD_STATS_FOR_EACH_BUCKET(OVSTHREAD_STATS_FOR_EACH_BUCKET502,24099
#define assert_single_threaded(assert_single_threaded513,24693
#define xfork(xfork517,24823

include/packets.h,24790
#define PACKETS_H PACKETS_H18,674
#define FLOW_TNL_F_UDPIF FLOW_TNL_F_UDPIF43,1289
flow_tnl_dst_is_set(const struct flow_tnl *tnl)flow_tnl_dst_is_set48,1410
flow_tnl_size(const struct flow_tnl *src)flow_tnl_size58,1739
flow_tnl_copy__(struct flow_tnl *dst, const struct flow_tnl *src)flow_tnl_copy__81,2564
flow_tnl_equal(const struct flow_tnl *a, const struct flow_tnl *b)flow_tnl_equal87,2696
struct pkt_metadata {pkt_metadata95,2902
                  CACHE_LINE_SIZE);CACHE_LINE_SIZE128,4485
                  2 * CACHE_LINE_SIZE);CACHE_LINE_SIZE130,4584
pkt_metadata_init_tnl(struct pkt_metadata *md)pkt_metadata_init_tnl133,4644
pkt_metadata_init(struct pkt_metadata *md, odp_port_t port)pkt_metadata_init142,4956
pkt_metadata_prefetch_init(struct pkt_metadata *md)pkt_metadata_prefetch_init164,5872
#define ETH_ADDR_LEN ETH_ADDR_LEN176,6257
static const struct eth_addr eth_addr_broadcast OVS_UNUSEDOVS_UNUSED178,6291
static const struct eth_addr eth_addr_exact OVS_UNUSEDOVS_UNUSED181,6405
static const struct eth_addr eth_addr_zero OVS_UNUSEDOVS_UNUSED184,6515
static const struct eth_addr64 eth_addr64_zero OVS_UNUSEDOVS_UNUSED186,6623
static const struct eth_addr eth_addr_stp OVS_UNUSEDOVS_UNUSED189,6748
static const struct eth_addr eth_addr_lacp OVS_UNUSEDOVS_UNUSED192,6856
static const struct eth_addr eth_addr_bfd OVS_UNUSEDOVS_UNUSED195,6965
static inline bool eth_addr_is_broadcast(const struct eth_addr a)eth_addr_is_broadcast198,7073
static inline bool eth_addr_is_multicast(const struct eth_addr a)eth_addr_is_multicast203,7209
static inline bool eth_addr_is_local(const struct eth_addr a)eth_addr_is_local208,7304
static inline bool eth_addr_is_zero(const struct eth_addr a)eth_addr_is_zero216,7592
static inline bool eth_addr64_is_zero(const struct eth_addr64 a)eth_addr64_is_zero220,7706
static inline int eth_mask_is_exact(const struct eth_addr a)eth_mask_is_exact225,7837
static inline int eth_addr_compare_3way(const struct eth_addr a,eth_addr_compare_3way230,7968
static inline int eth_addr64_compare_3way(const struct eth_addr64 a,eth_addr64_compare_3way235,8139
static inline bool eth_addr_equals(const struct eth_addr a,eth_addr_equals241,8319
static inline bool eth_addr64_equals(const struct eth_addr64 a,eth_addr64_equals246,8484
static inline bool eth_addr_equal_except(const struct eth_addr a,eth_addr_equal_except252,8660
static inline uint64_t eth_addr_to_uint64(const struct eth_addr ea)eth_addr_to_uint64261,9036
static inline uint64_t eth_addr_vlan_to_uint64(const struct eth_addr ea,eth_addr_vlan_to_uint64268,9243
static inline void eth_addr_from_uint64(uint64_t x, struct eth_addr *ea)eth_addr_from_uint64274,9445
static inline struct eth_addr eth_addr_invert(const struct eth_addr src)eth_addr_invert281,9643
static inline void eth_addr_mark_random(struct eth_addr *ea)eth_addr_mark_random292,9859
static inline void eth_addr_random(struct eth_addr *ea)eth_addr_random298,10027
static inline void eth_addr_nicira_random(struct eth_addr *ea)eth_addr_nicira_random304,10163
static inline uint32_t hash_mac(const struct eth_addr ea,hash_mac316,10448
#define ETH_ADDR_FMT ETH_ADDR_FMT352,11766
#define ETH_ADDR_ARGS(ETH_ADDR_ARGS354,11910
#define ETH_ADDR_BYTES_ARGS(ETH_ADDR_BYTES_ARGS355,11965
#define ETH_ADDR_STRLEN ETH_ADDR_STRLEN357,12068
#define ETH_ADDR64_FMT ETH_ADDR64_FMT366,12235
#define ETH_ADDR64_ARGS(ETH_ADDR64_ARGS369,12361
#define ETH_ADDR64_BYTES_ARGS(ETH_ADDR64_BYTES_ARGS370,12422
#define ETH_ADDR64_STRLEN ETH_ADDR64_STRLEN373,12558
#define ETH_ADDR_SCAN_FMT ETH_ADDR_SCAN_FMT386,12809
#define ETH_ADDR_SCAN_ARGS(ETH_ADDR_SCAN_ARGS387,12889
#define ETH_TYPE_IP ETH_TYPE_IP390,13004
#define ETH_TYPE_ARP ETH_TYPE_ARP391,13042
#define ETH_TYPE_TEB ETH_TYPE_TEB392,13080
#define ETH_TYPE_VLAN_8021Q ETH_TYPE_VLAN_8021Q393,13118
#define ETH_TYPE_VLAN ETH_TYPE_VLAN394,13156
#define ETH_TYPE_VLAN_8021AD ETH_TYPE_VLAN_8021AD395,13207
#define ETH_TYPE_IPV6 ETH_TYPE_IPV6396,13245
#define ETH_TYPE_LACP ETH_TYPE_LACP397,13283
#define ETH_TYPE_RARP ETH_TYPE_RARP398,13321
#define ETH_TYPE_MPLS ETH_TYPE_MPLS399,13359
#define ETH_TYPE_MPLS_MCAST ETH_TYPE_MPLS_MCAST400,13397
#define ETH_TYPE_NSH ETH_TYPE_NSH401,13435
static inline bool eth_type_mpls(ovs_be16 eth_type)eth_type_mpls403,13474
static inline bool eth_type_vlan(ovs_be16 eth_type)eth_type_vlan409,13626
#define ETH_TYPE_MIN ETH_TYPE_MIN418,13880
#define ETH_HEADER_LEN ETH_HEADER_LEN420,13918
#define ETH_PAYLOAD_MIN ETH_PAYLOAD_MIN421,13944
#define ETH_PAYLOAD_MAX ETH_PAYLOAD_MAX422,13971
#define ETH_TOTAL_MIN ETH_TOTAL_MIN423,14000
#define ETH_TOTAL_MAX ETH_TOTAL_MAX424,14057
#define ETH_VLAN_TOTAL_MAX ETH_VLAN_TOTAL_MAX425,14114
struct eth_header {eth_header426,14194
    struct eth_addr eth_dst;eth_dst427,14214
    struct eth_addr eth_src;eth_src428,14243
    ovs_be16 eth_type;eth_type429,14272
#define LLC_DSAP_SNAP LLC_DSAP_SNAP441,14661
#define LLC_SSAP_SNAP LLC_SSAP_SNAP442,14688
#define LLC_CNTL_SNAP LLC_CNTL_SNAP443,14715
#define LLC_HEADER_LEN LLC_HEADER_LEN445,14740
struct llc_header {llc_header446,14765
    uint8_t llc_dsap;llc_dsap447,14785
    uint8_t llc_ssap;llc_ssap448,14807
    uint8_t llc_cntl;llc_cntl449,14829
#define STP_LLC_SSAP STP_LLC_SSAP454,14963
#define STP_LLC_DSAP STP_LLC_DSAP455,14989
#define STP_LLC_CNTL STP_LLC_CNTL456,15015
#define SNAP_ORG_ETHERNET SNAP_ORG_ETHERNET458,15042
#define SNAP_HEADER_LEN SNAP_HEADER_LEN460,15183
#define LLC_SNAP_HEADER_LEN LLC_SNAP_HEADER_LEN468,15362
#define VLAN_VID_MASK VLAN_VID_MASK476,15597
#define VLAN_VID_SHIFT VLAN_VID_SHIFT477,15626
#define VLAN_PCP_MASK VLAN_PCP_MASK479,15652
#define VLAN_PCP_SHIFT VLAN_PCP_SHIFT480,15681
#define VLAN_CFI VLAN_CFI482,15708
#define VLAN_CFI_SHIFT VLAN_CFI_SHIFT483,15732
vlan_tci_to_vid(ovs_be16 vlan_tci)vlan_tci_to_vid488,15902
vlan_tci_to_pcp(ovs_be16 vlan_tci)vlan_tci_to_pcp496,16162
vlan_tci_to_cfi(ovs_be16 vlan_tci)vlan_tci_to_cfi504,16410
#define VLAN_HEADER_LEN VLAN_HEADER_LEN509,16496
struct vlan_header {vlan_header510,16522
    ovs_be16 vlan_tci;          /* Lowest 12 bits are VLAN ID. */vlan_tci511,16543
    ovs_be16 vlan_next_type;vlan_next_type512,16609
#define VLAN_ETH_HEADER_LEN VLAN_ETH_HEADER_LEN516,16708
struct vlan_eth_header {vlan_eth_header517,16771
    struct eth_addr veth_dst;veth_dst518,16796
    struct eth_addr veth_src;veth_src519,16826
    ovs_be16 veth_type;         /* Always htons(ETH_TYPE_VLAN). */veth_type520,16856
    ovs_be16 veth_tci;          /* Lowest 12 bits are VLAN ID. */veth_tci521,16923
    ovs_be16 veth_next_type;veth_next_type522,16989
#define MPLS_TTL_MASK MPLS_TTL_MASK527,17127
#define MPLS_TTL_SHIFT MPLS_TTL_SHIFT528,17166
#define MPLS_BOS_MASK MPLS_BOS_MASK530,17197
#define MPLS_BOS_SHIFT MPLS_BOS_SHIFT531,17236
#define MPLS_TC_MASK MPLS_TC_MASK533,17267
#define MPLS_TC_SHIFT MPLS_TC_SHIFT534,17306
#define MPLS_LABEL_MASK MPLS_LABEL_MASK536,17337
#define MPLS_LABEL_SHIFT MPLS_LABEL_SHIFT537,17376
#define MPLS_HLEN MPLS_HLEN539,17408
struct mpls_hdr {mpls_hdr541,17439
    ovs_16aligned_be32 mpls_lse;mpls_lse542,17457
mpls_lse_to_label(ovs_be32 mpls_lse)mpls_lse_to_label549,17673
mpls_lse_to_tc(ovs_be32 mpls_lse)mpls_lse_to_tc557,17882
mpls_lse_to_ttl(ovs_be32 mpls_lse)mpls_lse_to_ttl565,18083
flow_set_mpls_lse_ttl(ovs_be32 *mpls_lse, uint8_t ttl)flow_set_mpls_lse_ttl572,18233
mpls_lse_to_bos(ovs_be32 mpls_lse)mpls_lse_to_bos581,18485
#define IP_FMT IP_FMT586,18576
#define IP_ARGS(IP_ARGS587,18631
#define IP_SCAN_FMT IP_SCAN_FMT603,19032
#define IP_SCAN_ARGS(IP_SCAN_ARGS604,19088
#define IP_PORT_SCAN_FMT IP_PORT_SCAN_FMT610,19366
#define IP_PORT_SCAN_ARGS(IP_PORT_SCAN_ARGS611,19437
ip_is_cidr(ovs_be32 netmask)ip_is_cidr621,19961
ip_is_multicast(ovs_be32 ip)ip_is_multicast627,20074
ip_is_local_multicast(ovs_be32 ip)ip_is_local_multicast632,20184
#define IP_VER(IP_VER651,20957
#define IP_IHL(IP_IHL652,21004
#define IP_IHL_VER(IP_IHL_VER653,21051
#define IPPROTO_SCTP IPPROTO_SCTP656,21125
#define IPPROTO_DCCP IPPROTO_DCCP660,21179
#define IPPROTO_IGMP IPPROTO_IGMP664,21232
#define IPPROTO_UDPLITE IPPROTO_UDPLITE668,21287
#define IP_ECN_NOT_ECT IP_ECN_NOT_ECT672,21341
#define IP_ECN_ECT_1 IP_ECN_ECT_1673,21368
#define IP_ECN_ECT_0 IP_ECN_ECT_0674,21394
#define IP_ECN_CE IP_ECN_CE675,21420
#define IP_ECN_MASK IP_ECN_MASK676,21443
#define IP_DSCP_MASK IP_DSCP_MASK677,21468
IP_ECN_is_ce(uint8_t dsfield)IP_ECN_is_ce680,21513
#define IP_VERSION IP_VERSION685,21597
#define IP_DONT_FRAGMENT IP_DONT_FRAGMENT687,21619
#define IP_MORE_FRAGMENTS IP_MORE_FRAGMENTS688,21674
#define IP_FRAG_OFF_MASK IP_FRAG_OFF_MASK689,21729
#define IP_IS_FRAGMENT(IP_IS_FRAGMENT690,21785
#define IP_HEADER_LEN IP_HEADER_LEN693,21894
struct ip_header {ip_header694,21919
    uint8_t ip_ihl_ver;ip_ihl_ver695,21938
    uint8_t ip_tos;ip_tos696,21962
    ovs_be16 ip_tot_len;ip_tot_len697,21982
    ovs_be16 ip_id;ip_id698,22007
    ovs_be16 ip_frag_off;ip_frag_off699,22027
    uint8_t ip_ttl;ip_ttl700,22053
    uint8_t ip_proto;ip_proto701,22073
    ovs_be16 ip_csum;ip_csum702,22095
    ovs_16aligned_be32 ip_src;ip_src703,22117
    ovs_16aligned_be32 ip_dst;ip_dst704,22148
#define ICMP4_ECHO_REPLY ICMP4_ECHO_REPLY709,22265
#define ICMP4_DST_UNREACH ICMP4_DST_UNREACH710,22292
#define ICMP4_SOURCEQUENCH ICMP4_SOURCEQUENCH711,22320
#define ICMP4_REDIRECT ICMP4_REDIRECT712,22349
#define ICMP4_ECHO_REQUEST ICMP4_ECHO_REQUEST713,22374
#define ICMP4_TIME_EXCEEDED ICMP4_TIME_EXCEEDED714,22403
#define ICMP4_PARAM_PROB ICMP4_PARAM_PROB715,22434
#define ICMP4_TIMESTAMP ICMP4_TIMESTAMP716,22462
#define ICMP4_TIMESTAMPREPLY ICMP4_TIMESTAMPREPLY717,22489
#define ICMP4_INFOREQUEST ICMP4_INFOREQUEST718,22521
#define ICMP4_INFOREPLY ICMP4_INFOREPLY719,22550
#define ICMP_HEADER_LEN ICMP_HEADER_LEN721,22578
struct icmp_header {icmp_header722,22604
    uint8_t icmp_type;icmp_type723,22625
    uint8_t icmp_code;icmp_code724,22648
    ovs_be16 icmp_csum;icmp_csum725,22671
            ovs_be16 id;id728,22724
            ovs_be16 seq;seq729,22749
        } echo;echo730,22775
            ovs_be16 empty;empty732,22808
            ovs_be16 mtu;mtu733,22836
        } frag;frag734,22862
        ovs_16aligned_be32 gateway;gateway735,22878
    } icmp_fields;icmp_fields736,22914
#define IGMP_HEADER_LEN IGMP_HEADER_LEN740,23003
struct igmp_header {igmp_header741,23029
    uint8_t igmp_type;igmp_type742,23050
    uint8_t igmp_code;igmp_code743,23073
    ovs_be16 igmp_csum;igmp_csum744,23096
    ovs_16aligned_be32 group;group745,23120
#define IGMPV3_HEADER_LEN IGMPV3_HEADER_LEN749,23220
struct igmpv3_header {igmpv3_header750,23248
    uint8_t type;type751,23271
    uint8_t rsvr1;rsvr1752,23289
    ovs_be16 csum;csum753,23308
    ovs_be16 rsvr2;rsvr2754,23327
    ovs_be16 ngrp;ngrp755,23347
#define IGMPV3_RECORD_LEN IGMPV3_RECORD_LEN759,23440
struct igmpv3_record {igmpv3_record760,23468
    uint8_t type;type761,23491
    uint8_t aux_len;aux_len762,23509
    ovs_be16 nsrcs;nsrcs763,23530
    ovs_16aligned_be32 maddr;maddr764,23550
#define IGMP_HOST_MEMBERSHIP_QUERY IGMP_HOST_MEMBERSHIP_QUERY768,23654
#define IGMP_HOST_MEMBERSHIP_REPORT IGMP_HOST_MEMBERSHIP_REPORT769,23716
#define IGMPV2_HOST_MEMBERSHIP_REPORT IGMPV2_HOST_MEMBERSHIP_REPORT770,23771
#define IGMP_HOST_LEAVE_MESSAGE IGMP_HOST_LEAVE_MESSAGE771,23839
#define IGMPV3_HOST_MEMBERSHIP_REPORT IGMPV3_HOST_MEMBERSHIP_REPORT772,23882
#define IGMPV3_MODE_IS_INCLUDE IGMPV3_MODE_IS_INCLUDE777,23998
#define IGMPV3_MODE_IS_EXCLUDE IGMPV3_MODE_IS_EXCLUDE778,24031
#define IGMPV3_CHANGE_TO_INCLUDE_MODE IGMPV3_CHANGE_TO_INCLUDE_MODE779,24064
#define IGMPV3_CHANGE_TO_EXCLUDE_MODE IGMPV3_CHANGE_TO_EXCLUDE_MODE780,24104
#define IGMPV3_ALLOW_NEW_SOURCES IGMPV3_ALLOW_NEW_SOURCES781,24144
#define IGMPV3_BLOCK_OLD_SOURCES IGMPV3_BLOCK_OLD_SOURCES782,24179
#define SCTP_HEADER_LEN SCTP_HEADER_LEN784,24215
struct sctp_header {sctp_header785,24242
    ovs_be16 sctp_src;sctp_src786,24263
    ovs_be16 sctp_dst;sctp_dst787,24286
    ovs_16aligned_be32 sctp_vtag;sctp_vtag788,24309
    ovs_16aligned_be32 sctp_csum;sctp_csum789,24343
#define UDP_HEADER_LEN UDP_HEADER_LEN793,24447
struct udp_header {udp_header794,24472
    ovs_be16 udp_src;udp_src795,24492
    ovs_be16 udp_dst;udp_dst796,24514
    ovs_be16 udp_len;udp_len797,24536
    ovs_be16 udp_csum;udp_csum798,24558
#define TCP_FIN TCP_FIN802,24649
#define TCP_SYN TCP_SYN803,24671
#define TCP_RST TCP_RST804,24693
#define TCP_PSH TCP_PSH805,24715
#define TCP_ACK TCP_ACK806,24737
#define TCP_URG TCP_URG807,24759
#define TCP_ECE TCP_ECE808,24781
#define TCP_CWR TCP_CWR809,24803
#define TCP_NS TCP_NS810,24825
#define TCP_CTL(TCP_CTL812,24848
#define TCP_FLAGS(TCP_FLAGS813,24915
#define TCP_FLAGS_BE16(TCP_FLAGS_BE16814,24968
#define TCP_OFFSET(TCP_OFFSET815,25028
#define TCP_HEADER_LEN TCP_HEADER_LEN817,25080
struct tcp_header {tcp_header818,25106
    ovs_be16 tcp_src;tcp_src819,25126
    ovs_be16 tcp_dst;tcp_dst820,25148
    ovs_16aligned_be32 tcp_seq;tcp_seq821,25170
    ovs_16aligned_be32 tcp_ack;tcp_ack822,25202
    ovs_be16 tcp_ctl;tcp_ctl823,25234
    ovs_be16 tcp_winsz;tcp_winsz824,25256
    ovs_be16 tcp_csum;tcp_csum825,25280
    ovs_be16 tcp_urg;tcp_urg826,25303
#define CS_STATES CS_STATES834,25529
#define CS_STATE(CS_STATE845,25974
    CS_STATESCS_STATES848,26071
#undef CS_STATECS_STATE849,26085
#define CS_STATE(CS_STATE854,26151
    CS_SUPPORTED_MASK = CS_STATESCS_SUPPORTED_MASK855,26198
#undef CS_STATECS_STATE856,26232
#define CS_UNSUPPORTED_MASK CS_UNSUPPORTED_MASK858,26251
#define ARP_HRD_ETHERNET ARP_HRD_ETHERNET860,26312
#define ARP_PRO_IP ARP_PRO_IP861,26339
#define ARP_OP_REQUEST ARP_OP_REQUEST862,26365
#define ARP_OP_REPLY ARP_OP_REPLY863,26390
#define ARP_OP_RARP ARP_OP_RARP864,26413
#define ARP_ETH_HEADER_LEN ARP_ETH_HEADER_LEN866,26436
struct arp_eth_header {arp_eth_header867,26466
    ovs_be16 ar_hrd;           /* Hardware type. */ar_hrd869,26517
    ovs_be16 ar_pro;           /* Protocol type. */ar_pro870,26569
    uint8_t ar_hln;            /* Hardware address length. */ar_hln871,26621
    uint8_t ar_pln;            /* Protocol address length. */ar_pln872,26683
    ovs_be16 ar_op;            /* Opcode. */ar_op873,26745
    struct eth_addr ar_sha;     /* Sender hardware address. */ar_sha876,26833
    ovs_16aligned_be32 ar_spa;  /* Sender protocol address. */ar_spa877,26896
    struct eth_addr ar_tha;     /* Target hardware address. */ar_tha878,26959
    ovs_16aligned_be32 ar_tpa;  /* Target protocol address. */ar_tpa879,27022
#define IPV6_HEADER_LEN IPV6_HEADER_LEN883,27161
union ovs_16aligned_in6_addr {ovs_16aligned_in6_addr887,27336
    ovs_be16 be16[8];be16888,27367
    ovs_16aligned_be32 be32[4];be32889,27389
struct ovs_16aligned_ip6_hdr {ovs_16aligned_ip6_hdr894,27547
        struct ovs_16aligned_ip6_hdrctl {ovs_16aligned_ip6_hdrctl896,27590
            ovs_16aligned_be32 ip6_un1_flow;ip6_un1_flow897,27632
            ovs_be16 ip6_un1_plen;ip6_un1_plen898,27677
            uint8_t ip6_un1_nxt;ip6_un1_nxt899,27712
            uint8_t ip6_un1_hlim;ip6_un1_hlim900,27745
        } ip6_un1;ip6_un1901,27779
        uint8_t ip6_un2_vfc;ip6_un2_vfc902,27798
    } ip6_ctlun;ip6_ctlun903,27827
    union ovs_16aligned_in6_addr ip6_src;ip6_src904,27844
    union ovs_16aligned_in6_addr ip6_dst;ip6_dst905,27886
struct ovs_16aligned_ip6_frag {ovs_16aligned_ip6_frag910,28055
    uint8_t ip6f_nxt;ip6f_nxt911,28087
    uint8_t ip6f_reserved;ip6f_reserved912,28109
    ovs_be16 ip6f_offlg;ip6f_offlg913,28136
    ovs_16aligned_be32 ip6f_ident;ip6f_ident914,28161
#define ICMP6_HEADER_LEN ICMP6_HEADER_LEN917,28200
struct icmp6_header {icmp6_header918,28227
    uint8_t icmp6_type;icmp6_type919,28249
    uint8_t icmp6_code;icmp6_code920,28273
    ovs_be16 icmp6_cksum;icmp6_cksum921,28297
#define ICMP6_ERROR_HEADER_LEN ICMP6_ERROR_HEADER_LEN925,28395
struct icmp6_error_header {icmp6_error_header926,28428
    struct icmp6_header icmp6_base;icmp6_base927,28456
    ovs_be32 icmp6_error_ext;icmp6_error_ext928,28492
#define ND_LLA_OPT_LEN ND_LLA_OPT_LEN938,28914
struct ovs_nd_lla_opt {ovs_nd_lla_opt939,28939
    uint8_t type;               /* One of ND_OPT_*_LINKADDR. */type940,28963
    uint8_t len;len941,29027
    struct eth_addr mac;mac942,29044
#define ND_PREFIX_OPT_LEN ND_PREFIX_OPT_LEN947,29194
struct ovs_nd_prefix_opt {ovs_nd_prefix_opt948,29223
    uint8_t type;               /* ND_OPT_PREFIX_INFORMATION. */type949,29250
    uint8_t len;                /* Always 4. */len950,29315
    uint8_t prefix_len;prefix_len951,29363
    uint8_t la_flags;           /* ND_PREFIX_* flags. */la_flags952,29387
    ovs_16aligned_be32 valid_lifetime;valid_lifetime953,29444
    ovs_16aligned_be32 preferred_lifetime;preferred_lifetime954,29483
    ovs_16aligned_be32 reserved;          /* Always 0. */reserved955,29526
    union ovs_16aligned_in6_addr prefix;prefix956,29584
#define ND_PREFIX_ON_LINK ND_PREFIX_ON_LINK960,29703
#define ND_PREFIX_AUTONOMOUS_ADDRESS ND_PREFIX_AUTONOMOUS_ADDRESS961,29745
#define ND_MTU_OPT_LEN ND_MTU_OPT_LEN964,29826
struct ovs_nd_mtu_opt {ovs_nd_mtu_opt965,29851
    uint8_t  type;      /* ND_OPT_MTU */type966,29875
    uint8_t  len;       /* Always 1. */len967,29916
    ovs_be16 reserved;  /* Always 0. */reserved968,29956
    ovs_16aligned_be32 mtu;mtu969,29996
#define ND_MSG_LEN ND_MSG_LEN975,30232
struct ovs_nd_msg {ovs_nd_msg976,30254
    struct icmp6_header icmph;icmph977,30274
    ovs_16aligned_be32 rso_flags;rso_flags978,30305
    union ovs_16aligned_in6_addr target;target979,30339
    struct ovs_nd_lla_opt options[0];options980,30380
#define ND_RSO_ROUTER ND_RSO_ROUTER985,30521
#define ND_RSO_SOLICITED ND_RSO_SOLICITED986,30557
#define ND_RSO_OVERRIDE ND_RSO_OVERRIDE987,30593
#define RA_MSG_LEN RA_MSG_LEN989,30630
struct ovs_ra_msg {ovs_ra_msg990,30652
    struct icmp6_header icmph;icmph991,30672
    uint8_t cur_hop_limit;cur_hop_limit992,30703
    uint8_t mo_flags;  /* ND_RA_MANAGED_ADDRESS and ND_RA_OTHER_CONFIG flags. */mo_flags993,30730
    ovs_be16 router_lifetime;router_lifetime994,30811
    ovs_be32 reachable_time;reachable_time995,30841
    ovs_be32 retrans_timer;retrans_timer996,30870
    struct ovs_nd_lla_opt options[0];options997,30898
#define ND_RA_MANAGED_ADDRESS ND_RA_MANAGED_ADDRESS1001,31000
#define ND_RA_OTHER_CONFIG ND_RA_OTHER_CONFIG1002,31035
#define MLD_HEADER_LEN MLD_HEADER_LEN1009,31254
struct mld_header {mld_header1010,31279
    uint8_t type;type1011,31299
    uint8_t code;code1012,31317
    ovs_be16 csum;csum1013,31335
    ovs_be16 mrd;mrd1014,31354
    ovs_be16 ngrp;ngrp1015,31372
#define MLD2_RECORD_LEN MLD2_RECORD_LEN1019,31459
struct mld2_record {mld2_record1020,31486
    uint8_t type;type1021,31507
    uint8_t aux_len;aux_len1022,31525
    ovs_be16 nsrcs;nsrcs1023,31546
    union ovs_16aligned_in6_addr maddr;maddr1024,31566
#define MLD_QUERY MLD_QUERY1028,31676
#define MLD_REPORT MLD_REPORT1029,31698
#define MLD_DONE MLD_DONE1030,31721
#define MLD2_REPORT MLD2_REPORT1031,31742
#define IPV6_LABEL_MASK IPV6_LABEL_MASK1034,31843
#define IPV6_SCAN_FMT IPV6_SCAN_FMT1047,32122
#define IPV6_SCAN_LEN IPV6_SCAN_LEN1048,32176
#define IN6ADDR_EXACT_INIT IN6ADDR_EXACT_INIT1051,32246
#define IN6ADDR_ALL_HOSTS_INIT IN6ADDR_ALL_HOSTS_INIT1055,32450
#define IN6ADDR_ALL_ROUTERS_INIT IN6ADDR_ALL_ROUTERS_INIT1059,32664
static inline bool ipv6_addr_equals(const struct in6_addr *a,ipv6_addr_equals1062,32832
static inline bool ipv6_mask_is_any(const struct in6_addr *mask) {ipv6_mask_is_any1073,33131
static inline bool ipv6_mask_is_exact(const struct in6_addr *mask) {ipv6_mask_is_exact1077,33250
static inline bool ipv6_is_all_hosts(const struct in6_addr *addr) {ipv6_is_all_hosts1081,33373
static inline bool ipv6_addr_is_set(const struct in6_addr *addr) {ipv6_addr_is_set1085,33499
static inline bool ipv6_addr_is_multicast(const struct in6_addr *ip) {ipv6_addr_is_multicast1089,33619
in6_addr_mapped_ipv4(ovs_be32 ip4)in6_addr_mapped_ipv41094,33758
in6_addr_set_mapped_ipv4(struct in6_addr *ip6, ovs_be32 ip4)in6_addr_set_mapped_ipv41102,33943
in6_addr_get_mapped_ipv4(const struct in6_addr *addr)in6_addr_get_mapped_ipv41108,34070
in6_addr_solicited_node(struct in6_addr *addr, const struct in6_addr *ip6)in6_addr_solicited_node1119,34341
in6_generate_eui64(struct eth_addr ea, struct in6_addr *prefix,in6_generate_eui641134,34805
in6_generate_lla(struct eth_addr ea, struct in6_addr *lla)in6_generate_lla1154,35550
in6_is_lla(struct in6_addr *addr)in6_is_lla1167,36047
ipv6_multicast_to_ethernet(struct eth_addr *eth, const struct in6_addr *ip6)ipv6_multicast_to_ethernet1179,36415
static inline bool dl_type_is_ip_any(ovs_be16 dl_type)dl_type_is_ip_any1189,36683
struct gre_base_hdr {gre_base_hdr1198,36875
    ovs_be16 flags;flags1199,36897
    ovs_be16 protocol;protocol1200,36917
#define GRE_CSUM GRE_CSUM1203,36944
#define GRE_ROUTING GRE_ROUTING1204,36975
#define GRE_KEY GRE_KEY1205,37006
#define GRE_SEQ GRE_SEQ1206,37037
#define GRE_STRICT GRE_STRICT1207,37068
#define GRE_REC GRE_REC1208,37099
#define GRE_FLAGS GRE_FLAGS1209,37130
#define GRE_VERSION GRE_VERSION1210,37161
struct vxlanhdr {vxlanhdr1213,37221
        ovs_16aligned_be32 vx_flags; /* VXLAN flags. */vx_flags1215,37251
            uint8_t flags;           /* VXLAN GPE flags. */flags1217,37324
            uint8_t reserved[2];     /* 16 bits reserved. */reserved1218,37384
            uint8_t next_protocol;   /* Next Protocol field for VXLAN GPE. */next_protocol1219,37445
        } vx_gpe;vx_gpe1220,37523
    ovs_16aligned_be32 vx_vni;vx_vni1222,37548
#define VXLAN_FLAGS VXLAN_FLAGS1226,37632
#define VXLAN_GPE_FLAGS_VER VXLAN_GPE_FLAGS_VER1251,38599
#define VLXAN_GPE_FLAGS_P VLXAN_GPE_FLAGS_P1252,38654
#define VXLAN_GPE_FLAGS_O VXLAN_GPE_FLAGS_O1253,38719
#define VXLAN_HF_VER VXLAN_HF_VER1256,38805
#define VXLAN_HF_NP VXLAN_HF_NP1257,38852
#define VXLAN_HF_OAM VXLAN_HF_OAM1258,38885
#define VXLAN_GPE_USED_BITS VXLAN_GPE_USED_BITS1260,38919
#define VXLAN_GPE_NP_IPV4 VXLAN_GPE_NP_IPV41264,39067
#define VXLAN_GPE_NP_IPV6 VXLAN_GPE_NP_IPV61265,39103
#define VXLAN_GPE_NP_ETHERNET VXLAN_GPE_NP_ETHERNET1266,39139
#define VXLAN_GPE_NP_NSH VXLAN_GPE_NP_NSH1267,39175
#define VXLAN_F_GPE VXLAN_F_GPE1269,39212
#define VXLAN_HF_GPE VXLAN_HF_GPE1270,39240
#define PACKET_TYPE(PACKET_TYPE1275,39451
#define PACKET_TYPE_BE(PACKET_TYPE_BE1276,39522
pt_ns(ovs_be32 packet_type)pt_ns1280,39678
pt_ns_type_be(ovs_be32 packet_type)pt_ns_type_be1287,39843
pt_ns_type(ovs_be32 packet_type)pt_ns_type1294,40014
enum packet_type {packet_type1300,40141
    PT_ETH  = PACKET_TYPE(OFPHTN_ONF, 0x0000),  /* Default PT: Ethernet */PT_ETH1301,40160
    PT_USE_NEXT_PROTO = PACKET_TYPE(OFPHTN_ONF, 0xfffe),  /* Pseudo PT for decap. */PT_USE_NEXT_PROTO1302,40235
    PT_IPV4 = PACKET_TYPE(OFPHTN_ETHERTYPE, ETH_TYPE_IP),PT_IPV41303,40320
    PT_IPV6 = PACKET_TYPE(OFPHTN_ETHERTYPE, ETH_TYPE_IPV6),PT_IPV61304,40378
    PT_MPLS = PACKET_TYPE(OFPHTN_ETHERTYPE, ETH_TYPE_MPLS),PT_MPLS1305,40438
    PT_MPLS_MC = PACKET_TYPE(OFPHTN_ETHERTYPE, ETH_TYPE_MPLS_MCAST),PT_MPLS_MC1306,40498
    PT_NSH  = PACKET_TYPE(OFPHTN_ETHERTYPE, ETH_TYPE_NSH),PT_NSH1307,40567
    PT_UNKNOWN = PACKET_TYPE(0xffff, 0xffff),   /* Unknown packet type. */PT_UNKNOWN1308,40626
#define DNS_HEADER_LEN DNS_HEADER_LEN1394,45222
struct dns_header {dns_header1395,45248
    ovs_be16 id;id1396,45268
    uint8_t lo_flag; /* QR (1), OPCODE (4), AA (1), TC (1) and RD (1) */lo_flag1397,45285
    uint8_t hi_flag; /* RA (1), Z (3) and RCODE (4) */hi_flag1398,45358
    ovs_be16 qdcount; /* Num of entries in the question section. */qdcount1399,45413
    ovs_be16 ancount; /* Num of resource records in the answer section. */ancount1400,45481
    ovs_be16 nscount;nscount1403,45627
    ovs_be16 arcount;arcount1406,45719
#define DNS_QUERY_TYPE_A DNS_QUERY_TYPE_A1411,45810
#define DNS_QUERY_TYPE_AAAA DNS_QUERY_TYPE_AAAA1412,45847
#define DNS_QUERY_TYPE_ANY DNS_QUERY_TYPE_ANY1413,45884
#define DNS_CLASS_IN DNS_CLASS_IN1415,45922
#define DNS_DEFAULT_RR_TTL DNS_DEFAULT_RR_TTL1416,45959

include/pcap-file.h,40
#define PCAP_FILE_H PCAP_FILE_H18,622

include/perf-counter.h,671
#define __PERF_COUNTER_H __PERF_COUNTER_H18,627
struct perf_counter {perf_counter81,2516
    const char *name;name82,2538
    bool once;once83,2560
    uint64_t n_events;n_events84,2575
    uint64_t total_count;total_count85,2598
#define PERF_COUNTER_ONCE_INITIALIZER(PERF_COUNTER_ONCE_INITIALIZER88,2628
#define PERF(PERF106,3237
#define PERF(PERF116,3707
static inline void perf_counters_init(void) {}perf_counters_init118,3743
static inline void perf_counters_destroy(void) {}perf_counters_destroy119,3790
static inline void perf_counters_clear(void) {}perf_counters_clear120,3840
perf_counters_to_string(void)perf_counters_to_string122,3909

include/poll-loop.h,302
#define POLL_LOOP_H POLL_LOOP_H34,1337
#define poll_fd_wait(poll_fd_wait54,2044
#define poll_wevent_wait(poll_wevent_wait58,2200
#define poll_timer_wait(poll_timer_wait62,2366
#define poll_timer_wait_until(poll_timer_wait_until65,2512
#define poll_immediate_wake(poll_immediate_wake69,2666

include/process.h,556
#define PROCESS_H PROCESS_H18,638
struct process_info {process_info25,721
    unsigned long int vsz;      /* Virtual size, in kB. */vsz26,743
    unsigned long int rss;      /* Resident set size, in kB. */rss27,802
    long long int booted;       /* ms since monitor started. */booted28,866
    int crashes;                /* # of crashes (usually 0). */crashes29,930
    long long int uptime;       /* ms since last (re)started by monitor. */uptime30,994
    long long int cputime;      /* ms of CPU used during 'uptime'. */cputime31,1070

include/pvector.h,1589
#define PVECTOR_H PVECTOR_H18,626
struct pvector_entry {pvector_entry59,2476
    int priority;priority60,2499
    void *ptr;ptr61,2517
struct pvector_impl {pvector_impl64,2536
    size_t size;       /* Number of entries in the vector. */size65,2558
    size_t allocated;  /* Number of allocated entries. */allocated66,2620
    struct pvector_entry vector[];vector67,2678
struct pvector {pvector71,2751
    OVSRCU_TYPE(struct pvector_impl *) impl;impl72,2768
    struct pvector_impl *temp;temp73,2813
struct pvector_cursor {pvector_cursor136,4874
    size_t size;        /* Number of entries in the vector. */size137,4898
    size_t entry_idx;   /* Current index. */entry_idx138,4961
    const struct pvector_entry *vector;vector139,5006
#define PVECTOR_FOR_EACH(PVECTOR_FOR_EACH151,5617
#define PVECTOR_FOR_EACH_PRIORITY(PVECTOR_FOR_EACH_PRIORITY157,5992
#define PVECTOR_CURSOR_FOR_EACH(PVECTOR_CURSOR_FOR_EACH161,6226
#define PVECTOR_CURSOR_FOR_EACH_CONTINUE(PVECTOR_CURSOR_FOR_EACH_CONTINUE165,6442
pvector_cursor_init(const struct pvector *pvec,pvector_cursor_init172,6661
static inline void *pvector_cursor_next(struct pvector_cursor *cursor,pvector_cursor_next193,7233
static inline void pvector_cursor_lookahead(const struct pvector_cursor *cursor,pvector_cursor_lookahead207,7737
static inline size_t pvector_count(const struct pvector *pvec)pvector_count215,8018
static inline bool pvector_is_empty(const struct pvector *pvec)pvector_is_empty220,8151
static inline void pvector_publish(struct pvector *pvec)pvector_publish228,8357

include/random.h,157
#define RANDOM_H RANDOM_H18,637
random_range(int max)random_range31,869
random_uint8(void)random_uint837,952
random_uint16(void)random_uint1643,1027

include/rconn.h,399
#define RCONN_H RCONN_H18,654
struct rconn_packet_counter {rconn_packet_counter94,3440
    struct ovs_mutex mutex;mutex95,3470
    unsigned int n_packets OVS_GUARDED; /* Number of packets queued. */OVS_GUARDED96,3498
    unsigned int n_bytes OVS_GUARDED;   /* Number of bytes queued. */OVS_GUARDED97,3570
    int ref_cnt OVS_GUARDED;            /* Number of owners. */OVS_GUARDED98,3640

include/rculist.h,1239
#define RCULIST_H RCULIST_H17,649
struct rculist {rculist62,2390
    OVSRCU_TYPE(struct rculist *) next;next67,2531
#define RCUOVS_LIST_INITIALIZER(RCUOVS_LIST_INITIALIZER75,2793
rculist_next(const struct rculist *list)rculist_next112,4481
rculist_next_protected(const struct rculist *list)rculist_next_protected118,4612
#define RCULIST_POISON RCULIST_POISON132,4885
rculist_push_front(struct rculist *list, struct rculist *elem)rculist_push_front197,6935
rculist_push_back(struct rculist *list, struct rculist *elem)rculist_push_back205,7163
rculist_front(const struct rculist *list)rculist_front313,11202
rculist_size(const struct rculist *list)rculist_size332,11703
rculist_is_empty(const struct rculist *list)rculist_is_empty345,11978
#define RCULIST_FOR_EACH(RCULIST_FOR_EACH368,12614
#define RCULIST_FOR_EACH_CONTINUE(RCULIST_FOR_EACH_CONTINUE372,12908
#define RCULIST_FOR_EACH_REVERSE_PROTECTED(RCULIST_FOR_EACH_REVERSE_PROTECTED377,13203
#define RCULIST_FOR_EACH_REVERSE_PROTECTED_CONTINUE(RCULIST_FOR_EACH_REVERSE_PROTECTED_CONTINUE381,13487
#define RCULIST_FOR_EACH_PROTECTED(RCULIST_FOR_EACH_PROTECTED386,13775
#define RCULIST_FOR_EACH_SAFE_PROTECTED(RCULIST_FOR_EACH_SAFE_PROTECTED392,14108

include/reconnect.h,1839
#define RECONNECT_H RECONNECT_H18,634
#define RECONNECT_DEFAULT_MIN_BACKOFF RECONNECT_DEFAULT_MIN_BACKOFF44,1598
#define RECONNECT_DEFAULT_MAX_BACKOFF RECONNECT_DEFAULT_MAX_BACKOFF45,1641
#define RECONNECT_DEFAULT_PROBE_INTERVAL RECONNECT_DEFAULT_PROBE_INTERVAL46,1684
enum reconnect_action {reconnect_action84,3513
    RECONNECT_CONNECT = 1,RECONNECT_CONNECT85,3537
    RECONNECT_DISCONNECT,RECONNECT_DISCONNECT86,3564
    RECONNECT_PROBE,RECONNECT_PROBE87,3590
struct reconnect_stats {reconnect_stats93,3813
    long long int creation_time;     /* Time reconnect_create() called. */creation_time95,3911
    long long int last_activity;     /* Last call to reconnect_activity(). */last_activity96,3986
    long long int last_connected;    /* Last call to reconnect_connected(). */last_connected97,4064
    long long int last_disconnected; /* Last call to reconnect_disconnected(). */last_disconnected98,4143
    int backoff;                     /* Current backoff duration.  */backoff99,4225
    unsigned int seqno;              /* # of connections + # of disconnections. */seqno101,4296
    bool is_connected;                     /* Currently connected? */is_connected103,4380
    unsigned int msec_since_connect;       /* Time since last connect. */msec_since_connect104,4450
    unsigned int msec_since_disconnect;    /* Time since last disconnect. */msec_since_disconnect105,4524
    unsigned int total_connected_duration; /* Sum of all connections. */total_connected_duration106,4601
    unsigned int n_attempted_connections;n_attempted_connections107,4674
    unsigned int n_successful_connections;n_successful_connections108,4716
    const char *state;            /* FSM state. */state112,4896
    unsigned int state_elapsed;   /* Time since FSM state entered. */state_elapsed113,4947

include/route-table.h,44
#define ROUTE_TABLE_H ROUTE_TABLE_H18,642

include/rstp-common.h,12438
#define RSTP_COMMON_H RSTP_COMMON_H31,991
enum admin_port_state {admin_port_state41,1181
    RSTP_ADMIN_BRIDGE_PORT_STATE_DISABLED = 0,RSTP_ADMIN_BRIDGE_PORT_STATE_DISABLED42,1205
    RSTP_ADMIN_BRIDGE_PORT_STATE_ENABLED = 1RSTP_ADMIN_BRIDGE_PORT_STATE_ENABLED43,1252
enum oper_p2p_mac_state {oper_p2p_mac_state46,1301
    RSTP_OPER_P2P_MAC_STATE_DISABLED = 0,RSTP_OPER_P2P_MAC_STATE_DISABLED47,1327
    RSTP_OPER_P2P_MAC_STATE_ENABLED = 1RSTP_OPER_P2P_MAC_STATE_ENABLED48,1369
enum port_receive_state_machine {port_receive_state_machine52,1490
    PORT_RECEIVE_SM_INIT,PORT_RECEIVE_SM_INIT53,1524
    PORT_RECEIVE_SM_DISCARD_EXEC,PORT_RECEIVE_SM_DISCARD_EXEC54,1550
    PORT_RECEIVE_SM_DISCARD,PORT_RECEIVE_SM_DISCARD55,1584
    PORT_RECEIVE_SM_RECEIVE_EXEC,PORT_RECEIVE_SM_RECEIVE_EXEC56,1613
    PORT_RECEIVE_SM_RECEIVEPORT_RECEIVE_SM_RECEIVE57,1647
enum port_transmit_state_machine {port_transmit_state_machine59,1678
    PORT_TRANSMIT_SM_INIT,PORT_TRANSMIT_SM_INIT60,1713
    PORT_TRANSMIT_SM_TRANSMIT_INIT_EXEC,PORT_TRANSMIT_SM_TRANSMIT_INIT_EXEC61,1740
    PORT_TRANSMIT_SM_TRANSMIT_INIT,PORT_TRANSMIT_SM_TRANSMIT_INIT62,1781
    PORT_TRANSMIT_SM_TRANSMIT_PERIODIC_EXEC,PORT_TRANSMIT_SM_TRANSMIT_PERIODIC_EXEC63,1817
    PORT_TRANSMIT_SM_TRANSMIT_PERIODIC,PORT_TRANSMIT_SM_TRANSMIT_PERIODIC64,1862
    PORT_TRANSMIT_SM_IDLE_EXEC,PORT_TRANSMIT_SM_IDLE_EXEC65,1902
    PORT_TRANSMIT_SM_IDLE,PORT_TRANSMIT_SM_IDLE66,1934
    PORT_TRANSMIT_SM_TRANSMIT_CONFIG_EXEC,PORT_TRANSMIT_SM_TRANSMIT_CONFIG_EXEC67,1961
    PORT_TRANSMIT_SM_TRANSMIT_CONFIG,PORT_TRANSMIT_SM_TRANSMIT_CONFIG68,2004
    PORT_TRANSMIT_SM_TRANSMIT_TCN_EXEC,PORT_TRANSMIT_SM_TRANSMIT_TCN_EXEC69,2042
    PORT_TRANSMIT_SM_TRANSMIT_TCN,PORT_TRANSMIT_SM_TRANSMIT_TCN70,2082
    PORT_TRANSMIT_SM_TRANSMIT_RSTP_EXEC,PORT_TRANSMIT_SM_TRANSMIT_RSTP_EXEC71,2117
    PORT_TRANSMIT_SM_TRANSMIT_RSTPPORT_TRANSMIT_SM_TRANSMIT_RSTP72,2158
enum bridge_detection_state_machine {bridge_detection_state_machine74,2196
    BRIDGE_DETECTION_SM_INIT,BRIDGE_DETECTION_SM_INIT75,2234
    BRIDGE_DETECTION_SM_EDGE_EXEC,BRIDGE_DETECTION_SM_EDGE_EXEC76,2264
    BRIDGE_DETECTION_SM_EDGE,BRIDGE_DETECTION_SM_EDGE77,2299
    BRIDGE_DETECTION_SM_NOT_EDGE_EXEC,BRIDGE_DETECTION_SM_NOT_EDGE_EXEC78,2329
    BRIDGE_DETECTION_SM_NOT_EDGEBRIDGE_DETECTION_SM_NOT_EDGE79,2368
enum port_protocol_migration_state_machine {port_protocol_migration_state_machine81,2404
    PORT_PROTOCOL_MIGRATION_SM_INIT,PORT_PROTOCOL_MIGRATION_SM_INIT82,2449
    PORT_PROTOCOL_MIGRATION_SM_CHECKING_RSTP_EXEC,PORT_PROTOCOL_MIGRATION_SM_CHECKING_RSTP_EXEC83,2486
    PORT_PROTOCOL_MIGRATION_SM_CHECKING_RSTP,PORT_PROTOCOL_MIGRATION_SM_CHECKING_RSTP84,2537
    PORT_PROTOCOL_MIGRATION_SM_SELECTING_STP_EXEC,PORT_PROTOCOL_MIGRATION_SM_SELECTING_STP_EXEC85,2583
    PORT_PROTOCOL_MIGRATION_SM_SELECTING_STP,PORT_PROTOCOL_MIGRATION_SM_SELECTING_STP86,2634
    PORT_PROTOCOL_MIGRATION_SM_SENSING_EXEC,PORT_PROTOCOL_MIGRATION_SM_SENSING_EXEC87,2680
    PORT_PROTOCOL_MIGRATION_SM_SENSINGPORT_PROTOCOL_MIGRATION_SM_SENSING88,2725
enum port_information_state_machine {port_information_state_machine90,2767
    PORT_INFORMATION_SM_INIT,PORT_INFORMATION_SM_INIT91,2805
    PORT_INFORMATION_SM_DISABLED_EXEC,PORT_INFORMATION_SM_DISABLED_EXEC92,2835
    PORT_INFORMATION_SM_DISABLED,PORT_INFORMATION_SM_DISABLED93,2874
    PORT_INFORMATION_SM_AGED_EXEC,PORT_INFORMATION_SM_AGED_EXEC94,2908
    PORT_INFORMATION_SM_AGED,PORT_INFORMATION_SM_AGED95,2943
    PORT_INFORMATION_SM_UPDATE_EXEC,PORT_INFORMATION_SM_UPDATE_EXEC96,2973
    PORT_INFORMATION_SM_UPDATE,PORT_INFORMATION_SM_UPDATE97,3010
    PORT_INFORMATION_SM_CURRENT_EXEC,PORT_INFORMATION_SM_CURRENT_EXEC98,3042
    PORT_INFORMATION_SM_CURRENT,PORT_INFORMATION_SM_CURRENT99,3080
    PORT_INFORMATION_SM_RECEIVE_EXEC,PORT_INFORMATION_SM_RECEIVE_EXEC100,3113
    PORT_INFORMATION_SM_RECEIVE,PORT_INFORMATION_SM_RECEIVE101,3151
    PORT_INFORMATION_SM_OTHER_EXEC,PORT_INFORMATION_SM_OTHER_EXEC102,3184
    PORT_INFORMATION_SM_OTHER,PORT_INFORMATION_SM_OTHER103,3220
    PORT_INFORMATION_SM_NOT_DESIGNATED_EXEC,PORT_INFORMATION_SM_NOT_DESIGNATED_EXEC104,3251
    PORT_INFORMATION_SM_NOT_DESIGNATED,PORT_INFORMATION_SM_NOT_DESIGNATED105,3296
    PORT_INFORMATION_SM_INFERIOR_DESIGNATED_EXEC,PORT_INFORMATION_SM_INFERIOR_DESIGNATED_EXEC106,3336
    PORT_INFORMATION_SM_INFERIOR_DESIGNATED,PORT_INFORMATION_SM_INFERIOR_DESIGNATED107,3386
    PORT_INFORMATION_SM_REPEATED_DESIGNATED_EXEC,PORT_INFORMATION_SM_REPEATED_DESIGNATED_EXEC108,3431
    PORT_INFORMATION_SM_REPEATED_DESIGNATED,PORT_INFORMATION_SM_REPEATED_DESIGNATED109,3481
    PORT_INFORMATION_SM_SUPERIOR_DESIGNATED_EXEC,PORT_INFORMATION_SM_SUPERIOR_DESIGNATED_EXEC110,3526
    PORT_INFORMATION_SM_SUPERIOR_DESIGNATEDPORT_INFORMATION_SM_SUPERIOR_DESIGNATED111,3576
enum port_role_selection_state_machine {port_role_selection_state_machine113,3623
    PORT_ROLE_SELECTION_SM_INIT,PORT_ROLE_SELECTION_SM_INIT114,3664
    PORT_ROLE_SELECTION_SM_INIT_BRIDGE_EXEC,PORT_ROLE_SELECTION_SM_INIT_BRIDGE_EXEC115,3697
    PORT_ROLE_SELECTION_SM_INIT_BRIDGE,PORT_ROLE_SELECTION_SM_INIT_BRIDGE116,3742
    PORT_ROLE_SELECTION_SM_ROLE_SELECTION_EXEC,PORT_ROLE_SELECTION_SM_ROLE_SELECTION_EXEC117,3782
    PORT_ROLE_SELECTION_SM_ROLE_SELECTIONPORT_ROLE_SELECTION_SM_ROLE_SELECTION118,3830
enum port_role_transition_state_machine {port_role_transition_state_machine120,3875
    PORT_ROLE_TRANSITION_SM_INIT,PORT_ROLE_TRANSITION_SM_INIT121,3917
    PORT_ROLE_TRANSITION_SM_INIT_PORT_EXEC,PORT_ROLE_TRANSITION_SM_INIT_PORT_EXEC122,3951
    PORT_ROLE_TRANSITION_SM_DISABLE_PORT_EXEC,PORT_ROLE_TRANSITION_SM_DISABLE_PORT_EXEC123,3995
    PORT_ROLE_TRANSITION_SM_DISABLE_PORT,PORT_ROLE_TRANSITION_SM_DISABLE_PORT124,4042
    PORT_ROLE_TRANSITION_SM_DISABLED_PORT_EXEC,PORT_ROLE_TRANSITION_SM_DISABLED_PORT_EXEC125,4084
    PORT_ROLE_TRANSITION_SM_DISABLED_PORT,PORT_ROLE_TRANSITION_SM_DISABLED_PORT126,4132
    PORT_ROLE_TRANSITION_SM_ROOT_PORT_EXEC,PORT_ROLE_TRANSITION_SM_ROOT_PORT_EXEC127,4175
    PORT_ROLE_TRANSITION_SM_ROOT_PORT,PORT_ROLE_TRANSITION_SM_ROOT_PORT128,4219
    PORT_ROLE_TRANSITION_SM_REROOT_EXEC,PORT_ROLE_TRANSITION_SM_REROOT_EXEC129,4258
    PORT_ROLE_TRANSITION_SM_ROOT_AGREED_EXEC,PORT_ROLE_TRANSITION_SM_ROOT_AGREED_EXEC130,4299
    PORT_ROLE_TRANSITION_SM_ROOT_PROPOSED_EXEC,PORT_ROLE_TRANSITION_SM_ROOT_PROPOSED_EXEC131,4345
    PORT_ROLE_TRANSITION_SM_ROOT_FORWARD_EXEC,PORT_ROLE_TRANSITION_SM_ROOT_FORWARD_EXEC132,4393
    PORT_ROLE_TRANSITION_SM_ROOT_LEARN_EXEC,PORT_ROLE_TRANSITION_SM_ROOT_LEARN_EXEC133,4440
    PORT_ROLE_TRANSITION_SM_REROOTED_EXEC,PORT_ROLE_TRANSITION_SM_REROOTED_EXEC134,4485
    PORT_ROLE_TRANSITION_SM_DESIGNATED_PORT_EXEC,PORT_ROLE_TRANSITION_SM_DESIGNATED_PORT_EXEC135,4528
    PORT_ROLE_TRANSITION_SM_DESIGNATED_PORT,PORT_ROLE_TRANSITION_SM_DESIGNATED_PORT136,4578
    PORT_ROLE_TRANSITION_SM_DESIGNATED_RETIRED_EXEC,PORT_ROLE_TRANSITION_SM_DESIGNATED_RETIRED_EXEC137,4623
    PORT_ROLE_TRANSITION_SM_DESIGNATED_SYNCED_EXEC,PORT_ROLE_TRANSITION_SM_DESIGNATED_SYNCED_EXEC138,4676
    PORT_ROLE_TRANSITION_SM_DESIGNATED_PROPOSE_EXEC,PORT_ROLE_TRANSITION_SM_DESIGNATED_PROPOSE_EXEC139,4728
    PORT_ROLE_TRANSITION_SM_DESIGNATED_FORWARD_EXEC,PORT_ROLE_TRANSITION_SM_DESIGNATED_FORWARD_EXEC140,4781
    PORT_ROLE_TRANSITION_SM_DESIGNATED_LEARN_EXEC,PORT_ROLE_TRANSITION_SM_DESIGNATED_LEARN_EXEC141,4834
    PORT_ROLE_TRANSITION_SM_DESIGNATED_DISCARD_EXEC,PORT_ROLE_TRANSITION_SM_DESIGNATED_DISCARD_EXEC142,4885
    PORT_ROLE_TRANSITION_SM_ALTERNATE_PORT_EXEC,PORT_ROLE_TRANSITION_SM_ALTERNATE_PORT_EXEC143,4938
    PORT_ROLE_TRANSITION_SM_ALTERNATE_PORT,PORT_ROLE_TRANSITION_SM_ALTERNATE_PORT144,4987
    PORT_ROLE_TRANSITION_SM_ALTERNATE_AGREED_EXEC,PORT_ROLE_TRANSITION_SM_ALTERNATE_AGREED_EXEC145,5031
    PORT_ROLE_TRANSITION_SM_ALTERNATE_PROPOSED_EXEC,PORT_ROLE_TRANSITION_SM_ALTERNATE_PROPOSED_EXEC146,5082
    PORT_ROLE_TRANSITION_SM_BLOCK_PORT_EXEC,PORT_ROLE_TRANSITION_SM_BLOCK_PORT_EXEC147,5135
    PORT_ROLE_TRANSITION_SM_BLOCK_PORT,PORT_ROLE_TRANSITION_SM_BLOCK_PORT148,5180
    PORT_ROLE_TRANSITION_SM_BACKUP_PORT_EXECPORT_ROLE_TRANSITION_SM_BACKUP_PORT_EXEC149,5220
enum port_state_transition_state_machine {port_state_transition_state_machine151,5268
    PORT_STATE_TRANSITION_SM_INIT,PORT_STATE_TRANSITION_SM_INIT152,5311
    PORT_STATE_TRANSITION_SM_DISCARDING_EXEC,PORT_STATE_TRANSITION_SM_DISCARDING_EXEC153,5346
    PORT_STATE_TRANSITION_SM_DISCARDING,PORT_STATE_TRANSITION_SM_DISCARDING154,5392
    PORT_STATE_TRANSITION_SM_LEARNING_EXEC,PORT_STATE_TRANSITION_SM_LEARNING_EXEC155,5433
    PORT_STATE_TRANSITION_SM_LEARNING,PORT_STATE_TRANSITION_SM_LEARNING156,5477
    PORT_STATE_TRANSITION_SM_FORWARDING_EXEC,PORT_STATE_TRANSITION_SM_FORWARDING_EXEC157,5516
    PORT_STATE_TRANSITION_SM_FORWARDINGPORT_STATE_TRANSITION_SM_FORWARDING158,5562
enum topology_change_state_machine {topology_change_state_machine160,5605
    TOPOLOGY_CHANGE_SM_INIT,TOPOLOGY_CHANGE_SM_INIT161,5642
    TOPOLOGY_CHANGE_SM_INACTIVE_EXEC,TOPOLOGY_CHANGE_SM_INACTIVE_EXEC162,5671
    TOPOLOGY_CHANGE_SM_INACTIVE,TOPOLOGY_CHANGE_SM_INACTIVE163,5709
    TOPOLOGY_CHANGE_SM_LEARNING_EXEC,TOPOLOGY_CHANGE_SM_LEARNING_EXEC164,5742
    TOPOLOGY_CHANGE_SM_LEARNING,TOPOLOGY_CHANGE_SM_LEARNING165,5780
    TOPOLOGY_CHANGE_SM_DETECTED_EXEC,TOPOLOGY_CHANGE_SM_DETECTED_EXEC166,5813
    TOPOLOGY_CHANGE_SM_ACTIVE_EXEC,TOPOLOGY_CHANGE_SM_ACTIVE_EXEC167,5851
    TOPOLOGY_CHANGE_SM_ACTIVE,TOPOLOGY_CHANGE_SM_ACTIVE168,5887
    TOPOLOGY_CHANGE_SM_ACKNOWLEDGED_EXEC,TOPOLOGY_CHANGE_SM_ACKNOWLEDGED_EXEC169,5918
    TOPOLOGY_CHANGE_SM_PROPAGATING_EXEC,TOPOLOGY_CHANGE_SM_PROPAGATING_EXEC170,5960
    TOPOLOGY_CHANGE_SM_NOTIFIED_TC_EXEC,TOPOLOGY_CHANGE_SM_NOTIFIED_TC_EXEC171,6001
    TOPOLOGY_CHANGE_SM_NOTIFIED_TCN_EXEC,TOPOLOGY_CHANGE_SM_NOTIFIED_TCN_EXEC172,6042
struct rstp_times {rstp_times177,6125
    uint16_t forward_delay;forward_delay183,6387
    uint16_t hello_time;hello_time190,6615
    uint16_t max_age;max_age196,6846
    uint16_t message_age;message_age198,6869
struct rstp_priority_vector {rstp_priority_vector202,6928
    rstp_identifier root_bridge_id;root_bridge_id203,6958
    uint32_t root_path_cost;root_path_cost204,6994
    rstp_identifier designated_bridge_id;designated_bridge_id205,7023
    uint16_t designated_port_id;designated_port_id206,7065
    uint16_t bridge_port_id;bridge_port_id207,7098
enum rstp_bpdu_type {rstp_bpdu_type210,7131
    CONFIGURATION_BPDU = 0x0,CONFIGURATION_BPDU211,7153
    TOPOLOGY_CHANGE_NOTIFICATION_BPDU = 0x80,TOPOLOGY_CHANGE_NOTIFICATION_BPDU212,7183
    RAPID_SPANNING_TREE_BPDU = 0x2RAPID_SPANNING_TREE_BPDU213,7229
enum rstp_bpdu_flag {rstp_bpdu_flag216,7268
    BPDU_FLAG_TOPCHANGE = 0x01,BPDU_FLAG_TOPCHANGE217,7290
    BPDU_FLAG_PROPOSAL = 0x02,BPDU_FLAG_PROPOSAL218,7322
    BPDU_FLAG_LEARNING = 0x10,BPDU_FLAG_LEARNING219,7353
    BPDU_FLAG_FORWARDING = 0x20,BPDU_FLAG_FORWARDING220,7384
    BPDU_FLAG_AGREEMENT = 0x40,BPDU_FLAG_AGREEMENT221,7417
    BPDU_FLAG_TOPCHANGEACK = 0x80BPDU_FLAG_TOPCHANGEACK222,7449
enum rstp_info_is {rstp_info_is244,7959
    INFO_IS_DISABLED,INFO_IS_DISABLED245,7979
    INFO_IS_RECEIVED,INFO_IS_RECEIVED246,8001
    INFO_IS_AGED,INFO_IS_AGED247,8023
    INFO_IS_MINEINFO_IS_MINE248,8041
enum rstp_rcvd_info {rstp_rcvd_info251,8062
    SUPERIOR_DESIGNATED_INFO,SUPERIOR_DESIGNATED_INFO252,8084
    REPEATED_DESIGNATED_INFO,REPEATED_DESIGNATED_INFO253,8114
    INFERIOR_DESIGNATED_INFO,INFERIOR_DESIGNATED_INFO254,8144
    INFERIOR_ROOT_ALTERNATE_INFO,INFERIOR_ROOT_ALTERNATE_INFO255,8174
    OTHER_INFOOTHER_INFO256,8208
struct rstp_port {rstp_port259,8227
    struct ovs_refcount ref_cnt;ref_cnt260,8246
    char *port_name;port_name265,8448
    uint32_t rx_rstp_bpdu_cnt;rx_rstp_bpdu_cnt684,25387
struct rstp {rstp709,26638
    char *name;     /* Bridge name. */name711,26736
    struct ovs_refcount ref_cnt;ref_cnt868,33090
    void (*send_bpdu)(struct dp_packet *bpdu, void *port_aux, void *rstp_aux);send_bpdu871,33155
    void *aux;aux872,33234
    bool root_changed;root_changed874,33250
    void *old_root_aux;old_root_aux875,33273
    void *new_root_aux;new_root_aux876,33297

include/rstp-state-machines.h,257
#define RSTP_STATE_MACHINES_H RSTP_STATE_MACHINES_H32,1027
    OVS_REQUIRES(rstp_mutex);rstp_mutex38,1192
    OVS_REQUIRES(rstp_mutex);rstp_mutex40,1270
    OVS_REQUIRES(rstp_mutex);rstp_mutex42,1371
    OVS_REQUIRES(rstp_mutex);rstp_mutex45,1440

include/rstp.h,5348
#define RSTP_H RSTP_H32,999
#define RSTP_MAX_PORTS RSTP_MAX_PORTS45,1337
#define RSTP_MIN_PRIORITY RSTP_MIN_PRIORITY50,1429
#define RSTP_MAX_PRIORITY RSTP_MAX_PRIORITY51,1457
#define RSTP_PRIORITY_STEP RSTP_PRIORITY_STEP52,1489
#define RSTP_DEFAULT_PRIORITY RSTP_DEFAULT_PRIORITY53,1521
#define RSTP_MIN_PORT_PRIORITY RSTP_MIN_PORT_PRIORITY56,1600
#define RSTP_MAX_PORT_PRIORITY RSTP_MAX_PORT_PRIORITY57,1633
#define RSTP_STEP_PORT_PRIORITY RSTP_STEP_PORT_PRIORITY58,1668
#define RSTP_DEFAULT_PORT_PRIORITY RSTP_DEFAULT_PORT_PRIORITY59,1703
#define RSTP_DEFAULT_AGEING_TIME RSTP_DEFAULT_AGEING_TIME64,1854
#define RSTP_MIN_AGEING_TIME RSTP_MIN_AGEING_TIME65,1891
#define RSTP_MAX_AGEING_TIME RSTP_MAX_AGEING_TIME66,1923
#define RSTP_DEFAULT_BRIDGE_MAX_AGE RSTP_DEFAULT_BRIDGE_MAX_AGE68,1961
#define RSTP_MIN_BRIDGE_MAX_AGE RSTP_MIN_BRIDGE_MAX_AGE69,2000
#define RSTP_MAX_BRIDGE_MAX_AGE RSTP_MAX_BRIDGE_MAX_AGE70,2034
#define RSTP_DEFAULT_BRIDGE_FORWARD_DELAY RSTP_DEFAULT_BRIDGE_FORWARD_DELAY72,2070
#define RSTP_MIN_BRIDGE_FORWARD_DELAY RSTP_MIN_BRIDGE_FORWARD_DELAY73,2115
#define RSTP_MAX_BRIDGE_FORWARD_DELAY RSTP_MAX_BRIDGE_FORWARD_DELAY74,2155
#define RSTP_DEFAULT_TRANSMIT_HOLD_COUNT RSTP_DEFAULT_TRANSMIT_HOLD_COUNT76,2197
#define RSTP_MIN_TRANSMIT_HOLD_COUNT RSTP_MIN_TRANSMIT_HOLD_COUNT77,2240
#define RSTP_MAX_TRANSMIT_HOLD_COUNT RSTP_MAX_TRANSMIT_HOLD_COUNT78,2279
#define RSTP_BRIDGE_HELLO_TIME RSTP_BRIDGE_HELLO_TIME80,2320
#define RSTP_MIGRATE_TIME RSTP_MIGRATE_TIME82,2388
#define RSTP_MIN_PORT_PATH_COST RSTP_MIN_PORT_PATH_COST85,2486
#define RSTP_MAX_PORT_PATH_COST RSTP_MAX_PORT_PATH_COST86,2520
#define RSTP_DEFAULT_PORT_PATH_COST RSTP_DEFAULT_PORT_PATH_COST87,2562
typedef uint64_t rstp_identifier;rstp_identifier93,2829
#define RSTP_ID_FMT RSTP_ID_FMT95,2864
#define RSTP_ID_ARGS(RSTP_ID_ARGS96,2920
#define RSTP_PORT_ID_FMT RSTP_PORT_ID_FMT101,3094
enum rstp_state {rstp_state103,3132
    RSTP_DISABLED,RSTP_DISABLED104,3150
    RSTP_LEARNING,RSTP_LEARNING105,3169
    RSTP_FORWARDING,RSTP_FORWARDING106,3188
    RSTP_DISCARDINGRSTP_DISCARDING107,3209
enum rstp_force_protocol_version {rstp_force_protocol_version111,3272
    FPV_STP_COMPATIBILITY = 0,FPV_STP_COMPATIBILITY112,3307
    FPV_DEFAULT = 2FPV_DEFAULT113,3338
enum rstp_port_role {rstp_port_role116,3362
    ROLE_ROOT,ROLE_ROOT117,3384
    ROLE_DESIGNATED,ROLE_DESIGNATED118,3399
    ROLE_ALTERNATE,ROLE_ALTERNATE119,3420
    ROLE_BACKUP,ROLE_BACKUP120,3440
    ROLE_DISABLEDROLE_DISABLED121,3457
enum rstp_admin_point_to_point_mac_state {rstp_admin_point_to_point_mac_state124,3479
    RSTP_ADMIN_P2P_MAC_FORCE_FALSE,RSTP_ADMIN_P2P_MAC_FORCE_FALSE125,3522
    RSTP_ADMIN_P2P_MAC_FORCE_TRUE,RSTP_ADMIN_P2P_MAC_FORCE_TRUE126,3558
    RSTP_ADMIN_P2P_MAC_AUTORSTP_ADMIN_P2P_MAC_AUTO127,3593
    OVS_EXCLUDED(rstp_mutex);rstp_mutex141,3992
    OVS_EXCLUDED(rstp_mutex);rstp_mutex147,4268
    OVS_EXCLUDED(rstp_mutex);rstp_mutex150,4336
    OVS_EXCLUDED(rstp_mutex);rstp_mutex152,4397
    OVS_EXCLUDED(rstp_mutex);rstp_mutex157,4554
    OVS_EXCLUDED(rstp_mutex);rstp_mutex160,4698
    OVS_EXCLUDED(rstp_mutex);rstp_mutex162,4801
    OVS_EXCLUDED(rstp_mutex);rstp_mutex164,4904
    OVS_EXCLUDED(rstp_mutex);rstp_mutex167,5050
    OVS_EXCLUDED(rstp_mutex);rstp_mutex169,5132
    OVS_EXCLUDED(rstp_mutex);rstp_mutex171,5205
    OVS_EXCLUDED(rstp_mutex);rstp_mutex173,5278
    OVS_EXCLUDED(rstp_mutex);rstp_mutex175,5352
    OVS_EXCLUDED(rstp_mutex);rstp_mutex179,5480
    OVS_EXCLUDED(rstp_mutex);rstp_mutex181,5573
    OVS_EXCLUDED(rstp_mutex);rstp_mutex183,5672
    OVS_EXCLUDED(rstp_mutex);rstp_mutex186,5839
    OVS_EXCLUDED(rstp_mutex);rstp_mutex188,5930
    OVS_EXCLUDED(rstp_mutex);rstp_mutex190,6033
    OVS_EXCLUDED(rstp_mutex);rstp_mutex193,6189
    OVS_EXCLUDED(rstp_mutex);rstp_mutex197,6289
    OVS_EXCLUDED(rstp_mutex);rstp_mutex199,6373
    OVS_EXCLUDED(rstp_mutex);rstp_mutex201,6459
    OVS_EXCLUDED(rstp_mutex);rstp_mutex203,6549
    OVS_EXCLUDED(rstp_mutex);rstp_mutex205,6633
    OVS_EXCLUDED(rstp_mutex);rstp_mutex207,6721
    OVS_EXCLUDED(rstp_mutex);rstp_mutex209,6805
    OVS_EXCLUDED(rstp_mutex);rstp_mutex211,6894
    OVS_EXCLUDED(rstp_mutex);rstp_mutex213,6986
    OVS_EXCLUDED(rstp_mutex);rstp_mutex215,7062
    OVS_EXCLUDED(rstp_mutex);rstp_mutex219,7158
    OVS_EXCLUDED(rstp_mutex);rstp_mutex221,7246
    OVS_EXCLUDED(rstp_mutex);rstp_mutex223,7317
    OVS_EXCLUDED(rstp_mutex);rstp_mutex232,7743
    OVS_EXCLUDED(rstp_mutex);rstp_mutex235,7836
    OVS_EXCLUDED(rstp_mutex);rstp_mutex243,8276
    OVS_REQUIRES(rstp_mutex);rstp_mutex246,8375
    OVS_REQUIRES(rstp_mutex);rstp_mutex252,8524
    OVS_EXCLUDED(rstp_mutex);rstp_mutex258,8666
    OVS_EXCLUDED(rstp_mutex);rstp_mutex260,8740
    OVS_EXCLUDED(rstp_mutex);rstp_mutex263,8822
    OVS_EXCLUDED(rstp_mutex);rstp_mutex265,8918
    OVS_EXCLUDED(rstp_mutex);rstp_mutex267,9003
    OVS_EXCLUDED(rstp_mutex);rstp_mutex269,9106
    OVS_EXCLUDED(rstp_mutex);rstp_mutex271,9205
rstp_should_manage_bpdu(enum rstp_state state)rstp_should_manage_bpdu279,9407
rstp_forward_in_state(enum rstp_state state)rstp_forward_in_state289,9698
rstp_learn_in_state(enum rstp_state state)rstp_learn_in_state298,9932

include/rtbsd.h,649
#define RTBSD_H RTBSD_H18,622
struct rtbsd_change {rtbsd_change27,849
    int msg_type;             /* e.g. XXX. */msg_type29,911
    int if_index;              /* Index of network device. */if_index32,998
    char if_name[IF_NAMESIZE];         /* Name of network device. */if_name34,1061
    int master_ifindex;         /* Ifindex of datapath master (0 if none). */master_ifindex35,1130
typedef void rtbsd_notify_func(const struct rtbsd_change *, void *aux);rtbsd_notify_func45,1532
struct rtbsd_notifier {rtbsd_notifier47,1605
    struct ovs_list node;node48,1629
    rtbsd_notify_func *cb;cb49,1655
    void *aux;aux50,1682

include/rtnetlink.h,724
#define RTNETLINK_LINK_H RTNETLINK_LINK_H18,633
struct rtnetlink_change {rtnetlink_change35,1068
    int nlmsg_type;             /* e.g. RTM_NEWLINK, RTM_DELLINK. */nlmsg_type37,1133
    int if_index;               /* Index of network device. */if_index40,1232
    const char *ifname;         /* Name of network device. */ifname41,1295
    int master_ifindex;         /* Ifindex of datapath master (0 if none). */master_ifindex44,1396
    int mtu;                    /* Current MTU. */mtu45,1474
    struct eth_addr mac;mac46,1525
    unsigned int ifi_flags;     /* Flags of network device. */ifi_flags47,1550
void rtnetlink_notify_func(const struct rtnetlink_change *change,rtnetlink_notify_func59,2027

include/seq.h,64
#define SEQ_H SEQ_H18,622
#define seq_wait(seq_wait134,4700

include/sha1.h,614
#define SHA1_HSHA1_H30,1247
#define SHA1_DIGEST_SIZE SHA1_DIGEST_SIZE36,1325
#define SHA1_HEX_DIGEST_LEN SHA1_HEX_DIGEST_LEN37,1388
struct sha1_ctx {sha1_ctx40,1496
    uint32_t digest[5];          /* Message digest. */digest41,1514
    uint32_t count_lo, count_hi; /* 64-bit bit counts. */count_lo42,1569
    uint32_t count_lo, count_hi; /* 64-bit bit counts. */count_hi42,1569
    uint32_t data[16];           /* SHA data buffer */data43,1627
    int local;                   /* Unprocessed amount in data. */local44,1682
#define SHA1_FMT SHA1_FMT52,1991
#define SHA1_ARGS(SHA1_ARGS55,2114

include/signals.h,119
#define SIGNALS_H SIGNALS_H18,632
enum { SIGNAL_NAME_BUFSIZE = 7 + INT_STRLEN(int) + 1 };SIGNAL_NAME_BUFSIZE24,730

include/skiplist.h,190
#define LIB_SKIPLIST_H_LIB_SKIPLIST_H_18,675
typedef int (skiplist_comparator)(const void *a, const void *b,skiplist_comparator24,762
#define SKIPLIST_FOR_EACH SKIPLIST_FOR_EACH31,921

include/socket-util.h,569
#define SOCKET_UTIL_H SOCKET_UTIL_H18,666
#define DSCP_DEFAULT DSCP_DEFAULT71,2490
#define sendmmsg sendmmsg116,4072
#define closesocket closesocket126,4443
static inline int make_unix_socket(int style, bool nonblock,make_unix_socket130,4491
#define setsockopt(setsockopt138,4769
static inline int rpl_setsockopt(int sock, int level, int optname,rpl_setsockopt140,4885
#define getsockopt(getsockopt146,5091
static inline int rpl_getsockopt(int sock, int level, int optname,rpl_getsockopt148,5207
static inline int sock_errno(void)sock_errno157,5536

include/sort.h,30
#define SORT_H SORT_H17,614

include/sset.h,710
#define SSET_HSSET_H18,641
struct sset_node {sset_node27,746
    struct hmap_node hmap_node;hmap_node28,765
    char name[1];name29,797
struct sset {sset33,843
    struct hmap map;map34,857
#define SSET_INITIALIZER(SSET_INITIALIZER37,882
struct sset_position {sset_position71,2062
    struct hmap_position pos;pos72,2085
#define SSET_FOR_EACH(SSET_FOR_EACH82,2340
#define SSET_FOR_EACH_SAFE(SSET_FOR_EACH_SAFE87,2532
#define SSET_NODE_FROM_HMAP_NODE(SSET_NODE_FROM_HMAP_NODE99,2959
#define SSET_NAME_FROM_HMAP_NODE(SSET_NAME_FROM_HMAP_NODE101,3062
#define SSET_NODE_FROM_NAME(SSET_NODE_FROM_NAME105,3278
#define SSET_FIRST(SSET_FIRST106,3355
#define SSET_NEXT(SSET_NEXT109,3536

include/stp.h,1494
#define STP_H STP_H18,622
#define STP_DEFAULT_BRIDGE_PRIORITY STP_DEFAULT_BRIDGE_PRIORITY31,960
#define STP_DEFAULT_PORT_PRIORITY STP_DEFAULT_PORT_PRIORITY32,1002
#define STP_DEFAULT_MAX_AGE STP_DEFAULT_MAX_AGE35,1068
#define STP_DEFAULT_HELLO_TIME STP_DEFAULT_HELLO_TIME36,1105
#define STP_DEFAULT_FWD_DELAY STP_DEFAULT_FWD_DELAY37,1141
typedef uint64_t stp_identifier;stp_identifier41,1334
#define STP_ID_FMT STP_ID_FMT44,1369
#define STP_ID_ARGS(STP_ID_ARGS45,1413
#define STP_PORT_ID_FMT STP_PORT_ID_FMT49,1523
#define STP_MAX_PORTS STP_MAX_PORTS52,1591
enum stp_state {stp_state120,4462
    STP_DISABLED = 1 << 0,       /* 8.4.5: See note above. */STP_DISABLED121,4479
    STP_LISTENING = 1 << 1,      /* 8.4.2: Not learning or relaying frames. */STP_LISTENING122,4541
    STP_LEARNING = 1 << 2,       /* 8.4.3: Learning but not relaying frames. */STP_LEARNING123,4620
    STP_FORWARDING = 1 << 3,     /* 8.4.4: Learning and relaying frames. */STP_FORWARDING124,4700
    STP_BLOCKING = 1 << 4        /* 8.4.1: Initial boot state. */STP_BLOCKING125,4776
enum stp_role {stp_role133,5047
    STP_ROLE_ROOT,               /* Path to root bridge. */STP_ROLE_ROOT134,5063
    STP_ROLE_DESIGNATED,         /* Path to LAN segments. */STP_ROLE_DESIGNATED135,5123
    STP_ROLE_ALTERNATE,          /* Backup path to root bridge. */STP_ROLE_ALTERNATE136,5184
    STP_ROLE_DISABLED            /* Port does not participate in STP. */STP_ROLE_DISABLED137,5251

include/stream-fd.h,40
#define STREAM_FD_H STREAM_FD_H21,746

include/stream-provider.h,1622
#define STREAM_PROVIDER_H STREAM_PROVIDER_H18,652
struct stream {stream28,858
    int state;state30,912
    int error;error31,927
    char *name;name32,942
    char *peer_id;peer_id33,958
static inline void stream_assert_class(const struct stream *stream,stream_assert_class38,1094
struct stream_class {stream_class44,1280
    const char *name;name46,1368
    bool needs_probes;needs_probes51,1575
    int (*open)(const char *name, char *suffix, struct stream **streamp,open68,2420
    void (*close)(struct stream *stream);close72,2580
    int (*connect)(struct stream *stream);connect81,3022
    ssize_t (*recv)(struct stream *stream, void *buffer, size_t n);recv96,3592
    ssize_t (*send)(struct stream *stream, const void *buffer, size_t n);send110,4126
    void (*run)(struct stream *stream);run116,4374
    void (*run_wait)(struct stream *stream);run_wait122,4597
    void (*wait)(struct stream *stream, enum stream_wait_type type);wait126,4760
struct pstream {pstream132,4966
    char *name;name134,5022
    ovs_be16 bound_port;bound_port135,5038
static inline void pstream_assert_class(const struct pstream *pstream,pstream_assert_class140,5214
struct pstream_class {pstream_class146,5406
    const char *name;name148,5498
    bool needs_probes;needs_probes153,5707
    int (*listen)(const char *name, char *suffix, struct pstream **pstreamp,listen170,6538
    void (*close)(struct pstream *pstream);close174,6705
    int (*accept)(struct pstream *pstream, struct stream **new_streamp);accept182,7090
    void (*wait)(struct pstream *pstream);wait186,7275

include/stream-ssl.h,229
#define STREAM_SSL_H STREAM_SSL_H17,640
#define SSL_OPTION_ENUMS SSL_OPTION_ENUMS31,1202
#define STREAM_SSL_LONG_OPTIONS STREAM_SSL_LONG_OPTIONS35,1283
#define STREAM_SSL_OPTION_HANDLERS STREAM_SSL_OPTION_HANDLERS42,1648

include/stream.h,419
#define STREAM_H STREAM_H18,643
enum stream_wait_type {stream_wait_type47,1472
    STREAM_CONNECT,STREAM_CONNECT48,1496
    STREAM_RECV,STREAM_RECV49,1516
    STREAM_SENDSTREAM_SEND50,1533
enum stream_content_type {stream_content_type87,3066
    STREAM_UNKNOWN,STREAM_UNKNOWN88,3093
    STREAM_OPENFLOW,STREAM_OPENFLOW89,3113
    STREAM_SSL,STREAM_SSL90,3134
    STREAM_JSONRPCSTREAM_JSONRPC91,3150

include/syslog-direct.h,48
#define SYSLOG_DIRECT_H SYSLOG_DIRECT_H18,626

include/syslog-libc.h,44
#define SYSLOG_LIBC_H SYSLOG_LIBC_H18,624

include/syslog-provider.h,451
#define SYSLOG_PROVIDER_H SYSLOG_PROVIDER_H18,628
struct syslogger {syslogger24,780
    const char *prefix;                /* Prefix that is enforced by concreteprefix27,944
struct syslog_class {syslog_class35,1360
    void (*openlog)(struct syslogger *this, int facility);openlog38,1531
    void (*syslog)(struct syslogger *this, int pri, const char *msg);syslog41,1657
syslog_get_prefix(struct syslogger *this)syslog_get_prefix45,1758

include/table.h,1860
#define TABLE_H TABLE_H18,636
struct table {table28,796
    struct cell *cells;cells29,811
    struct column *columns;columns30,835
    size_t n_columns, allocated_columns;n_columns31,863
    size_t n_columns, allocated_columns;allocated_columns31,863
    size_t n_rows, allocated_rows;n_rows32,904
    size_t n_rows, allocated_rows;allocated_rows32,904
    size_t current_column;current_column33,939
    char *caption;caption34,966
    bool timestamp;timestamp35,985
struct cell {cell49,1343
    char *text;text51,1381
    struct json *json;json54,1414
    const struct ovsdb_type *type;type55,1437
enum table_format {table_format62,1548
    TF_TABLE,                   /* 2-d table. */TF_TABLE63,1568
    TF_LIST,                    /* One cell per line, one row per paragraph. */TF_LIST64,1617
    TF_HTML,                    /* HTML table. */TF_HTML65,1697
    TF_CSV,                     /* Comma-separated lines. */TF_CSV66,1747
    TF_JSON                     /* JSON. */TF_JSON67,1808
enum cell_format {cell_format70,1856
    CF_STRING,                  /* String format. */CF_STRING71,1875
    CF_BARE,                    /* String format without most punctuation. */CF_BARE72,1928
    CF_JSON                     /* JSON. */CF_JSON73,2006
struct table_style {table_style76,2054
    enum table_format format;   /* TF_*. */format77,2075
    enum cell_format cell_format; /* CF_*. */cell_format78,2119
    bool headings;              /* Include headings? */headings79,2165
    int json_flags;             /* CF_JSON: Flags for json_to_string(). */json_flags80,2221
#define TABLE_STYLE_DEFAULT TABLE_STYLE_DEFAULT83,2300
#define TABLE_OPTION_ENUMS TABLE_OPTION_ENUMS85,2369
#define TABLE_LONG_OPTIONS TABLE_LONG_OPTIONS90,2533
#define TABLE_OPTION_HANDLERS(TABLE_OPTION_HANDLERS97,2910

include/tc.h,2743
#define TC_H TC_H19,713
#define TC_H_CLSACT TC_H_CLSACT31,1025
#define TC_H_MIN_INGRESS TC_H_MIN_INGRESS34,1093
#define TC_INGRESS_PARENT TC_INGRESS_PARENT37,1140
#define TC_POLICY_DEFAULT TC_POLICY_DEFAULT39,1208
tc_make_handle(unsigned int major, unsigned int minor)tc_make_handle43,1310
tc_get_major(unsigned int handle)tc_get_major50,1485
tc_get_minor(unsigned int handle)tc_get_minor57,1632
struct tc_cookie {tc_cookie67,1940
    const void *data;data68,1959
    size_t len;len69,1981
struct tc_flower_key {tc_flower_key72,2001
    ovs_be16 eth_type;eth_type73,2024
    uint8_t ip_proto;ip_proto74,2047
    struct eth_addr dst_mac;dst_mac76,2070
    struct eth_addr src_mac;src_mac77,2099
    ovs_be16 tcp_src;tcp_src79,2129
    ovs_be16 tcp_dst;tcp_dst80,2151
    ovs_be16 udp_src;udp_src82,2174
    ovs_be16 udp_dst;udp_dst83,2196
    ovs_be16 sctp_src;sctp_src85,2219
    ovs_be16 sctp_dst;sctp_dst86,2242
    uint16_t vlan_id;vlan_id88,2266
    uint8_t vlan_prio;vlan_prio89,2288
    ovs_be16 encap_eth_type;encap_eth_type91,2312
        ovs_be32 ipv4_src;ipv4_src94,2355
        ovs_be32 ipv4_dst;ipv4_dst95,2382
    } ipv4;ipv496,2409
        struct in6_addr ipv6_src;ipv6_src98,2434
        struct in6_addr ipv6_dst;ipv6_dst99,2468
    } ipv6;ipv6100,2502
struct tc_flower {tc_flower103,2518
    uint32_t handle;handle104,2537
    uint32_t prio;prio105,2558
    struct tc_flower_key key;key107,2578
    struct tc_flower_key mask;mask108,2608
    uint8_t vlan_pop;vlan_pop110,2640
    uint16_t vlan_push_id;vlan_push_id111,2662
    uint8_t vlan_push_prio;vlan_push_prio112,2689
    int ifindex_out;ifindex_out114,2718
    struct ovs_flow_stats stats;stats116,2740
    uint64_t lastused;lastused117,2773
        bool set;set120,2810
        ovs_be64 id;id121,2828
        ovs_be16 tp_src;tp_src122,2849
        ovs_be16 tp_dst;tp_dst123,2874
            ovs_be32 ipv4_src;ipv4_src125,2916
            ovs_be32 ipv4_dst;ipv4_dst126,2947
        } ipv4;ipv4127,2978
            struct in6_addr ipv6_src;ipv6_src129,3011
            struct in6_addr ipv6_dst;ipv6_dst130,3049
        } ipv6;ipv6131,3087
    } set;set132,3103
        bool tunnel;tunnel135,3128
            ovs_be32 ipv4_src;ipv4_src137,3166
            ovs_be32 ipv4_dst;ipv4_dst138,3197
        } ipv4;ipv4139,3228
            struct in6_addr ipv6_src;ipv6_src141,3261
            struct in6_addr ipv6_dst;ipv6_dst142,3299
        } ipv6;ipv6143,3337
        ovs_be64 id;id144,3353
        ovs_be16 tp_src;tp_src145,3374
        ovs_be16 tp_dst;tp_dst146,3399
    } tunnel;tunnel147,3424
    struct tc_cookie act_cookie;act_cookie149,3439

include/timer.h,485
#define TIMER_H TIMER_H18,624
struct timer {timer25,705
    long long int t;t26,720
#define timer_wait(timer_wait31,869
timer_set_duration(struct timer *timer, long long int duration)timer_set_duration37,1070
timer_set_infinite(struct timer *timer)timer_set_infinite46,1276
timer_set_expired(struct timer *timer)timer_set_expired55,1451
timer_expired(const struct timer *timer)timer_expired62,1575
timer_is_infinite(const struct timer *timer)timer_is_infinite69,1725

include/timeval.h,267
#define TIMEVAL_H TIMEVAL_H18,650
#define TIME_MAX TIME_MAX40,1115
#define TIME_MIN TIME_MIN41,1153
#define localtime_r(localtime_r44,1206
#define gmtime_r(gmtime_r45,1268
struct tm_msec {tm_msec48,1345
  struct tm tm;tm49,1362
  int msec;msec50,1378

include/tnl-neigh-cache.h,52
#define TNL_NEIGH_CACHE_H TNL_NEIGH_CACHE_H18,628

include/tnl-ports.h,38
#define TNL_PORT_H TNL_PORT_H18,621

include/tun-metadata.h,46
#define TUN_METADATA_H TUN_METADATA_H18,625

include/unaligned.h,2085
#define UNALIGNED_H UNALIGNED_H18,634
#define get_unaligned_u64(get_unaligned_u6455,2192
#define GCC_UNALIGNED_ACCESSORS(GCC_UNALIGNED_ACCESSORS63,2534
static inline uint16_t get_unaligned_u16(const uint16_t *p_)get_unaligned_u1695,3852
static inline void put_unaligned_u16(uint16_t *p_, uint16_t x_)put_unaligned_u16101,4001
static inline uint32_t get_unaligned_u32(const uint32_t *p_)get_unaligned_u32110,4165
static inline void put_unaligned_u32(uint32_t *p_, uint32_t x_)put_unaligned_u32116,4344
static inline uint64_t get_unaligned_u64__(const uint64_t *p_)get_unaligned_u64__127,4548
static inline void put_unaligned_u64__(uint64_t *p_, uint64_t x_)put_unaligned_u64__140,4960
#define get_unaligned_be16 get_unaligned_be16158,5422
#define get_unaligned_be32 get_unaligned_be32159,5467
#define put_unaligned_be16 put_unaligned_be16160,5512
#define put_unaligned_be32 put_unaligned_be32161,5557
#define put_unaligned_be64 put_unaligned_be64162,5602
get_unaligned_be64(const ovs_be64 *p)get_unaligned_be64172,6182
put_unaligned_u64(uint64_t *p, uint64_t x)put_unaligned_u64184,6467
get_16aligned_u32(const ovs_16aligned_u32 *x)get_16aligned_u32191,6602
put_16aligned_u32(ovs_16aligned_u32 *x, uint32_t value)put_16aligned_u32198,6746
get_32aligned_u64(const ovs_32aligned_u64 *x)get_32aligned_u64206,6906
put_32aligned_u64(ovs_32aligned_u64 *x, uint64_t value)put_32aligned_u64213,7050
get_32aligned_u128(const ovs_32aligned_u128 *x)get_32aligned_u128221,7210
put_32aligned_u128(ovs_32aligned_u128 *x, ovs_u128 value)put_32aligned_u128229,7401
get_16aligned_be32(const ovs_16aligned_be32 *x)get_16aligned_be32240,7659
put_16aligned_be32(ovs_16aligned_be32 *x, ovs_be32 value)put_16aligned_be32251,7907
get_32aligned_be64(const ovs_32aligned_be64 *x)get_32aligned_be64264,8146
put_32aligned_be64(ovs_32aligned_be64 *x, ovs_be64 value)put_32aligned_be64275,8394
get_32aligned_be128(const ovs_32aligned_be128 *x)get_32aligned_be128288,8634
put_32aligned_be128(ovs_32aligned_be128 *x, ovs_be128 value)put_32aligned_be128297,8884

include/unicode.h,258
#define UNICODE_H UNICODE_H18,626
uc_is_code_point(int c)uc_is_code_point26,798
uc_is_leading_surrogate(int c)uc_is_leading_surrogate33,957
uc_is_trailing_surrogate(int c)uc_is_trailing_surrogate40,1127
uc_is_surrogate(int c)uc_is_surrogate48,1312

include/unixctl.h,112
#define UNIXCTL_H UNIXCTL_H18,632
typedef void unixctl_cb_func(struct unixctl_conn *,unixctl_cb_func41,1403

include/util.h,2898
#define UTIL_H UTIL_H18,671
#define __ARRAY_SIZE_NOCHECK(__ARRAY_SIZE_NOCHECK33,932
#define __ARRAY_CHECK(__ARRAY_CHECK36,1065
#define __ARRAY_FAIL(__ARRAY_FAIL40,1207
#define __ARRAY_SIZE(__ARRAY_SIZE41,1276
#define __ARRAY_SIZE(__ARRAY_SIZE45,1426
#define CACHE_LINE_SIZE CACHE_LINE_SIZE51,1592
typedef uint8_t OVS_CACHE_LINE_MARKER[1];OVS_CACHE_LINE_MARKER58,1860
ovs_prefetch_range(const void *start, size_t size)ovs_prefetch_range61,1922
#define MIN(MIN72,2147
#define MAX(MAX76,2209
#define INT_MOD_LT(INT_MOD_LT80,2310
#define INT_MOD_LEQ(INT_MOD_LEQ81,2360
#define INT_MOD_GT(INT_MOD_GT82,2411
#define INT_MOD_GEQ(INT_MOD_GEQ83,2461
#define INT_MOD_MIN(INT_MOD_MIN85,2513
#define INT_MOD_MAX(INT_MOD_MAX86,2574
#define OVS_NOT_REACHED(OVS_NOT_REACHED88,2636
#define PRIdSIZE PRIdSIZE92,2739
#define PRIiSIZE PRIiSIZE93,2761
#define PRIoSIZE PRIoSIZE94,2783
#define PRIuSIZE PRIuSIZE95,2805
#define PRIxSIZE PRIxSIZE96,2827
#define PRIXSIZE PRIXSIZE97,2849
#define PRIdSIZE PRIdSIZE99,2877
#define PRIiSIZE PRIiSIZE100,2899
#define PRIoSIZE PRIoSIZE101,2921
#define PRIuSIZE PRIuSIZE102,2943
#define PRIxSIZE PRIxSIZE103,2965
#define PRIXSIZE PRIXSIZE104,2987
typedef uint32_t HANDLE;HANDLE108,3032
#define set_program_name(set_program_name115,3106
nullable_memcpy(void *dst, const void *src, size_t n)nullable_memcpy151,4472
nullable_memset(void *dst, int c, size_t n)nullable_memset161,4738
#define ovs_strlcpy_arrays(ovs_strlcpy_arrays172,5074
raw_ctz(uint64_t n)raw_ctz226,7107
raw_clz64(uint64_t n)raw_clz64237,7520
raw_ctz(uint64_t n)raw_ctz243,7610
raw_clz64(uint64_t n)raw_clz64261,7919
ctz32(uint32_t n)ctz32285,8400
ctz64(uint64_t n)ctz64292,8544
clz32(uint32_t n)clz32299,8687
clz64(uint64_t n)clz64306,8837
log_2_floor(uint64_t n)log_2_floor315,9113
log_2_ceil(uint64_t n)log_2_ceil323,9299
count_1bits(uint64_t x)count_1bits333,9540
count_1bits_32__(uint32_t x)count_1bits_32__353,10389
#define NEED_COUNT_1BITS_8 NEED_COUNT_1BITS_8358,10462
count_1bits_32__(uint32_t x)count_1bits_32__361,10559
count_1bits(uint64_t x)count_1bits372,10923
rightmost_1bit(uintmax_t x)rightmost_1bit381,11134
zero_rightmost_1bit(uintmax_t x)zero_rightmost_1bit389,11321
rightmost_1bit_idx(uint64_t x)rightmost_1bit_idx397,11515
leftmost_1bit_idx(uint64_t x)leftmost_1bit_idx405,11708
static inline ovs_be32 be32_prefix_mask(int plen)be32_prefix_mask413,11941
ovs_u128_equals(const ovs_u128 a, const ovs_u128 b)ovs_u128_equals447,13660
ovs_u128_is_zero(const ovs_u128 val)ovs_u128_is_zero454,13831
ovs_u128_is_ones(const ovs_u128 val)ovs_u128_is_ones461,13973
ovs_be128_equals(const ovs_be128 a, const ovs_be128 b)ovs_be128_equals468,14139
ovs_be128_is_zero(const ovs_be128 val)ovs_be128_is_zero475,14317
ovs_u128_and(const ovs_u128 a, const ovs_u128 b)ovs_u128_and481,14426

include/uuid.h,300
#define UUID_H UUID_H17,638
#define UUID_ZERO UUID_ZERO22,744
#define UUID_LEN UUID_LEN31,977
#define UUID_FMT UUID_FMT32,997
#define UUID_ARGS(UUID_ARGS33,1045
uuid_hash(const struct uuid *uuid)uuid_hash45,1609
uuid_equals(const struct uuid *a, const struct uuid *b)uuid_equals52,1744

include/valgrind.h,94
#define VALGRIND_H VALGRIND_H18,627
#define RUNNING_ON_VALGRIND RUNNING_ON_VALGRIND23,718

include/versions.h,865
#define VERSIONS_H VERSIONS_H18,621
typedef uint64_t ovs_version_t;ovs_version_t23,704
#define OVS_VERSION_MIN OVS_VERSION_MIN25,737
#define OVS_VERSION_MAX OVS_VERSION_MAX26,817
#define OVS_VERSION_NOT_REMOVED OVS_VERSION_NOT_REMOVED27,875
struct versions {versions33,1075
    ovs_version_t add_version;              /* Version object was added in. */add_version34,1093
    ATOMIC(ovs_version_t) remove_version;   /* Version object is removed in. */remove_version35,1172
#define VERSIONS_INITIALIZER(VERSIONS_INITIALIZER38,1256
versions_set_remove_version(struct versions *versions, ovs_version_t version)versions_set_remove_version42,1374
versions_visible_in_version(const struct versions *versions,versions_visible_in_version48,1538
versions_is_eventually_invisible(const struct versions *versions)versions_is_eventually_invisible62,2019

script/tc_rule_flower.sh,0

script/tc_rule_selective_4_tuple.sh,0

script/tc_test.sh,0

Makefile,133
CC = /usr/bin/gcc -std=gnu99CC1,0
CFLAGS =CFLAGS2,29
LDFLAGS = -lpthreadLDFLAGS4,77
LIBS = /usr/local/lib/libsflow.aLIBS5,97

core.c,684
#define INTERFACE_TO_NETWORK INTERFACE_TO_NETWORK10,150
#define INTERFACE_TO_HOST INTERFACE_TO_HOST11,185
#define ENABLE_BATCH ENABLE_BATCH13,225
uint32_t ifindex;ifindex15,249
uint32_t ifindex_out;ifindex_out16,267
uint16_t prio;prio17,289
uint32_t handle;handle18,304
struct tc_flower *flower, *flower_reverse;flower19,321
struct tc_flower *flower, *flower_reverse;flower_reverse19,321
void usage()usage22,458
void TestAddDeleteSeparate()TestAddDeleteSeparate32,958
void TestAddDeleteTogether()TestAddDeleteTogether92,2907
void AddTCPRulesInAlternatingOrder(int interval)AddTCPRulesInAlternatingOrder154,4597
int main(int argc, char *argv[])main230,6434

netlink-socket.c,3398
#define SOL_NETLINK SOL_NETLINK46,1395
struct nl_sock {nl_sock57,1755
    int fd;fd58,1772
    uint32_t next_seq;next_seq59,1784
    uint32_t pid;pid60,1807
    int protocol;protocol61,1825
    unsigned int rcvbuf;        /* Receive buffer size (SO_RCVBUF). */rcvbuf62,1843
#define MAX_IOVS MAX_IOVS67,2026
static int max_iovs;max_iovs73,2222
nl_sock_create(int protocol, struct nl_sock **sockp)nl_sock_create82,2577
nl_sock_clone(const struct nl_sock *src, struct nl_sock **sockp)nl_sock_clone200,5694
nl_sock_destroy(struct nl_sock *sock)nl_sock_destroy207,5856
nl_sock_join_mcgroup(struct nl_sock *sock, unsigned int multicast_group)nl_sock_join_mcgroup227,6468
nl_sock_leave_mcgroup(struct nl_sock *sock, unsigned int multicast_group)nl_sock_leave_mcgroup248,7145
nl_sock_send__(struct nl_sock *sock, const struct ofpbuf *msg,nl_sock_send__259,7413
nl_sock_send(struct nl_sock *sock, const struct ofpbuf *msg, bool wait)nl_sock_send290,8489
nl_sock_send_seq(struct nl_sock *sock, const struct ofpbuf *msg,nl_sock_send_seq307,9286
nl_sock_recv__(struct nl_sock *sock, struct ofpbuf *buf, bool wait)nl_sock_recv__314,9470
nl_sock_recv(struct nl_sock *sock, struct ofpbuf *buf, bool wait)nl_sock_recv407,12705
nl_sock_record_errors__(struct nl_transaction **transactions, size_t n,nl_sock_record_errors__413,12832
nl_sock_transact_multiple__(struct nl_sock *sock,nl_sock_transact_multiple__429,13163
nl_sock_transact_multiple(struct nl_sock *sock,nl_sock_transact_multiple551,16729
nl_sock_transact(struct nl_sock *sock, const struct ofpbuf *request,nl_sock_transact614,18837
nl_sock_drain(struct nl_sock *sock)nl_sock_drain642,19604
nl_dump_start(struct nl_dump *dump, int protocol, const struct ofpbuf *request)nl_dump_start697,21382
nl_dump_next__(struct ofpbuf *reply, struct ofpbuf *buffer)nl_dump_next__748,23024
nl_dump_next(struct nl_dump *dump, struct ofpbuf *reply, struct ofpbuf *buffer)nl_dump_next781,24440
nl_dump_done(struct nl_dump *dump)nl_dump_done830,26257
nl_sock_fd(const struct nl_sock *sock)nl_sock_fd882,27994
nl_sock_pid(const struct nl_sock *sock)nl_sock_pid889,28119
struct genl_family {genl_family896,28209
    struct hmap_node hmap_node;hmap_node897,28230
    uint16_t id;id898,28262
    char *name;name899,28279
static struct hmap genl_families = HMAP_INITIALIZER(&genl_families);genl_families902,28299
static const struct nl_policy family_policy[CTRL_ATTR_MAX + 1] = {family_policy904,28369
find_genl_family_by_id(uint16_t id)find_genl_family_by_id910,28588
genl_family_to_name(uint16_t id)genl_family_to_name925,28887
do_lookup_genl_family(const char *name, struct nlattr **attrs,do_lookup_genl_family936,29126
nl_lookup_genl_mcgroup(const char *family_name, const char *group_name,nl_lookup_genl_mcgroup978,30390
struct nl_pool {nl_pool1027,31756
    struct nl_sock *socks[2048];socks1028,31773
    int n;n1030,31843
static struct ovs_mutex pool_mutex = OVS_MUTEX_INITIALIZER;pool_mutex1034,31920
nl_pool_alloc(int protocol, struct nl_sock **sockp)nl_pool_alloc1040,32146
nl_pool_release(struct nl_sock *sock)nl_pool_release1070,32947
nl_transact(int protocol, const struct ofpbuf *request,nl_transact1128,35398
nl_transact_multiple(int protocol,nl_transact_multiple1176,37074
nl_sock_allocate_seq(struct nl_sock *sock, unsigned int n)nl_sock_allocate_seq1192,37468

netlink.c,6181
nl_msg_nlmsghdr(const struct ofpbuf *msg)nl_msg_nlmsghdr40,1286
nl_msg_genlmsghdr(const struct ofpbuf *msg)nl_msg_genlmsghdr51,1589
nl_msg_nlmsgerr(const struct ofpbuf *msg, int *errorp)nl_msg_nlmsgerr62,1958
nl_msg_reserve(struct ofpbuf *msg, size_t size)nl_msg_reserve84,2581
nl_msg_put_nlmsghdr(struct ofpbuf *msg,nl_msg_put_nlmsghdr109,3683
nl_msg_put_genlmsghdr(struct ofpbuf *msg, size_t expected_payload,nl_msg_put_genlmsghdr147,5147
nl_msg_put(struct ofpbuf *msg, const void *data, size_t size)nl_msg_put164,5778
nl_msg_put_uninit(struct ofpbuf *msg, size_t size)nl_msg_put_uninit173,6137
nl_msg_push(struct ofpbuf *msg, const void *data, size_t size)nl_msg_push187,6532
nl_msg_push_uninit(struct ofpbuf *msg, size_t size)nl_msg_push_uninit196,6894
nl_msg_put_unspec_uninit(struct ofpbuf *msg, uint16_t type, size_t size)nl_msg_put_unspec_uninit211,7437
nl_msg_put_unspec_zero(struct ofpbuf *msg, uint16_t type, size_t size)nl_msg_put_unspec_zero226,8050
nl_msg_put_unspec(struct ofpbuf *msg, uint16_t type,nl_msg_put_unspec237,8416
nl_msg_put_flag(struct ofpbuf *msg, uint16_t type)nl_msg_put_flag250,8808
nl_msg_put_u8(struct ofpbuf *msg, uint16_t type, uint8_t value)nl_msg_put_u8258,9007
nl_msg_put_u16(struct ofpbuf *msg, uint16_t type, uint16_t value)nl_msg_put_u16266,9249
nl_msg_put_u32(struct ofpbuf *msg, uint16_t type, uint32_t value)nl_msg_put_u32274,9493
nl_msg_put_u64(struct ofpbuf *msg, uint16_t type, uint64_t value)nl_msg_put_u64282,9737
nl_msg_put_u128(struct ofpbuf *msg, uint16_t type, ovs_u128 value)nl_msg_put_u128290,9982
nl_msg_put_be16(struct ofpbuf *msg, uint16_t type, ovs_be16 value)nl_msg_put_be16298,10230
nl_msg_put_be32(struct ofpbuf *msg, uint16_t type, ovs_be32 value)nl_msg_put_be32306,10478
nl_msg_put_be64(struct ofpbuf *msg, uint16_t type, ovs_be64 value)nl_msg_put_be64314,10726
nl_msg_put_be128(struct ofpbuf *msg, uint16_t type, ovs_be128 value)nl_msg_put_be128322,10975
nl_msg_put_in6_addr(struct ofpbuf *msg, uint16_t type,nl_msg_put_in6_addr330,11218
nl_msg_put_odp_port(struct ofpbuf *msg, uint16_t type, odp_port_t value)nl_msg_put_odp_port339,11489
nl_msg_put_string__(struct ofpbuf *msg, uint16_t type, const char *value,nl_msg_put_string__347,11753
nl_msg_put_string(struct ofpbuf *msg, uint16_t type, const char *value)nl_msg_put_string359,12097
nl_msg_push_unspec_uninit(struct ofpbuf *msg, uint16_t type, size_t size)nl_msg_push_unspec_uninit369,12553
nl_msg_push_unspec(struct ofpbuf *msg, uint16_t type,nl_msg_push_unspec384,13144
nl_msg_push_flag(struct ofpbuf *msg, uint16_t type)nl_msg_push_flag394,13499
nl_msg_push_u8(struct ofpbuf *msg, uint16_t type, uint8_t value)nl_msg_push_u8402,13702
nl_msg_push_u16(struct ofpbuf *msg, uint16_t type, uint16_t value)nl_msg_push_u16410,13947
nl_msg_push_u32(struct ofpbuf *msg, uint16_t type, uint32_t value)nl_msg_push_u32418,14194
nl_msg_push_u64(struct ofpbuf *msg, uint16_t type, uint64_t value)nl_msg_push_u64426,14441
nl_msg_push_u128(struct ofpbuf *msg, uint16_t type, ovs_u128 value)nl_msg_push_u128434,14689
nl_msg_push_be16(struct ofpbuf *msg, uint16_t type, ovs_be16 value)nl_msg_push_be16442,14940
nl_msg_push_be32(struct ofpbuf *msg, uint16_t type, ovs_be32 value)nl_msg_push_be32450,15191
nl_msg_push_be64(struct ofpbuf *msg, uint16_t type, ovs_be64 value)nl_msg_push_be64458,15442
nl_msg_push_be128(struct ofpbuf *msg, uint16_t type, ovs_be128 value)nl_msg_push_be128466,15694
nl_msg_push_string(struct ofpbuf *msg, uint16_t type, const char *value)nl_msg_push_string474,15944
nl_msg_start_nested(struct ofpbuf *msg, uint16_t type)nl_msg_start_nested485,16452
nl_msg_end_nested(struct ofpbuf *msg, size_t offset)nl_msg_end_nested495,16732
nl_msg_cancel_nested(struct ofpbuf *msg, size_t offset)nl_msg_cancel_nested505,17087
nl_msg_end_non_empty_nested(struct ofpbuf *msg, size_t offset)nl_msg_end_non_empty_nested515,17380
nl_msg_put_nested(struct ofpbuf *msg,nl_msg_put_nested532,17892
nl_msg_next(struct ofpbuf *buffer, struct ofpbuf *msg)nl_msg_next547,18484
nl_attr_oversized(size_t payload_size)nl_attr_oversized570,19225
nl_attr_type(const struct nlattr *nla)nl_attr_type580,19436
nl_attr_get(const struct nlattr *nla)nl_attr_get587,19599
nl_attr_get_size(const struct nlattr *nla)nl_attr_get_size595,19788
nl_attr_get_unspec(const struct nlattr *nla, size_t size)nl_attr_get_unspec604,20049
nl_attr_get_flag(const struct nlattr *nla)nl_attr_get_flag613,20326
#define NL_ATTR_GET_AS(NL_ATTR_GET_AS618,20398
nl_attr_get_u8(const struct nlattr *nla)nl_attr_get_u8625,20610
nl_attr_get_u16(const struct nlattr *nla)nl_attr_get_u16634,20834
nl_attr_get_u32(const struct nlattr *nla)nl_attr_get_u32643,21060
nl_attr_get_u64(const struct nlattr *nla)nl_attr_get_u64652,21286
nl_attr_get_u128(const struct nlattr *nla)nl_attr_get_u128662,21574
nl_attr_get_be16(const struct nlattr *nla)nl_attr_get_be16672,21866
nl_attr_get_be32(const struct nlattr *nla)nl_attr_get_be32681,22096
nl_attr_get_be64(const struct nlattr *nla)nl_attr_get_be64690,22326
nl_attr_get_be128(const struct nlattr *nla)nl_attr_get_be128700,22621
nl_attr_get_in6_addr(const struct nlattr *nla)nl_attr_get_in6_addr710,22911
nl_attr_get_odp_port(const struct nlattr *nla)nl_attr_get_odp_port719,23146
nl_attr_get_string(const struct nlattr *nla)nl_attr_get_string728,23393
nl_attr_get_nested(const struct nlattr *nla, struct ofpbuf *nested)nl_attr_get_nested737,23659
min_attr_len(enum nl_attr_type type)min_attr_len744,23880
max_attr_len(enum nl_attr_type type)max_attr_len764,24415
nl_attr_validate(const struct nlattr *nla, const struct nl_policy *policy)nl_attr_validate783,24913
nl_policy_parse(const struct ofpbuf *msg, size_t nla_offset,nl_policy_parse831,26299
nl_parse_nested(const struct nlattr *nla, const struct nl_policy policy[],nl_parse_nested877,27608
nl_attr_find__(const struct nlattr *attrs, size_t size, uint16_t type)nl_attr_find__887,27886
nl_attr_find(const struct ofpbuf *buf, size_t hdr_len, uint16_t type)nl_attr_find905,28389
nl_attr_find_nested(const struct nlattr *nla, uint16_t type)nl_attr_find_nested916,28741

ofpbuf.c,2739
ofpbuf_init__(struct ofpbuf *b, size_t allocated, enum ofpbuf_source source)ofpbuf_init__25,801
ofpbuf_use__(struct ofpbuf *b, void *base, size_t allocated, size_t size,ofpbuf_use__35,1026
ofpbuf_use(struct ofpbuf *b, void *base, size_t allocated)ofpbuf_use50,1504
ofpbuf_use_ds(struct ofpbuf *b, const struct ds *ds)ofpbuf_use_ds60,1873
ofpbuf_use_stack(struct ofpbuf *b, void *base, size_t allocated)ofpbuf_use_stack80,2834
ofpbuf_use_stub(struct ofpbuf *b, void *base, size_t allocated)ofpbuf_use_stub100,3735
ofpbuf_use_const(struct ofpbuf *b, const void *data, size_t size)ofpbuf_use_const113,4256
ofpbuf_init(struct ofpbuf *b, size_t size)ofpbuf_init121,4491
ofpbuf_uninit(struct ofpbuf *b)ofpbuf_uninit128,4636
ofpbuf_reinit(struct ofpbuf *b, size_t size)ofpbuf_reinit139,4841
ofpbuf_new(size_t size)ofpbuf_new148,5039
ofpbuf_new_with_headroom(size_t size, size_t headroom)ofpbuf_new_with_headroom158,5311
ofpbuf_clone(const struct ofpbuf *buffer)ofpbuf_clone169,5655
ofpbuf_clone_with_headroom(const struct ofpbuf *b, size_t headroom)ofpbuf_clone_with_headroom177,5922
ofpbuf_clone_data(const void *data, size_t size)ofpbuf_clone_data199,6626
ofpbuf_clone_data_with_headroom(const void *data, size_t size, size_t headroom)ofpbuf_clone_data_with_headroom208,6920
ofpbuf_copy__(struct ofpbuf *b, uint8_t *new_base,ofpbuf_copy__216,7127
ofpbuf_resize__(struct ofpbuf *b, size_t new_headroom, size_t new_tailroom)ofpbuf_resize__233,7788
ofpbuf_prealloc_tailroom(struct ofpbuf *b, size_t size)ofpbuf_prealloc_tailroom287,9276
ofpbuf_prealloc_headroom(struct ofpbuf *b, size_t size)ofpbuf_prealloc_headroom298,9610
ofpbuf_trim(struct ofpbuf *b)ofpbuf_trim317,10181
ofpbuf_padto(struct ofpbuf *b, size_t length)ofpbuf_padto328,10446
ofpbuf_shift(struct ofpbuf *b, int delta)ofpbuf_shift344,10973
ofpbuf_put_uninit(struct ofpbuf *b, size_t size)ofpbuf_put_uninit361,11516
ofpbuf_put_zeros(struct ofpbuf *b, size_t size)ofpbuf_put_zeros374,11880
ofpbuf_put(struct ofpbuf *b, const void *p, size_t size)ofpbuf_put385,12239
hexit_value(int c)hexit_value394,12446
ofpbuf_put_hex(struct ofpbuf *b, const char *s, size_t *n)ofpbuf_put_hex430,13208
ofpbuf_reserve(struct ofpbuf *b, size_t size)ofpbuf_reserve468,14027
ofpbuf_push_uninit(struct ofpbuf *b, size_t size)ofpbuf_push_uninit479,14411
ofpbuf_push_zeros(struct ofpbuf *b, size_t size)ofpbuf_push_zeros491,14778
ofpbuf_push(struct ofpbuf *b, const void *p, size_t size)ofpbuf_push502,15125
ofpbuf_insert(struct ofpbuf *b, size_t offset, const void *data, size_t n)ofpbuf_insert514,15449
ofpbuf_steal_data(struct ofpbuf *b)ofpbuf_steal_data531,16082
ofpbuf_list_delete(struct ovs_list *list)ofpbuf_list_delete569,17161

tc.c,2326
enum tc_offload_policy {tc_offload_policy45,1304
    TC_POLICY_NONE,TC_POLICY_NONE46,1329
    TC_POLICY_SKIP_SW,TC_POLICY_SKIP_SW47,1349
    TC_POLICY_SKIP_HWTC_POLICY_SKIP_HW48,1372
static enum tc_offload_policy tc_policy = TC_POLICY_NONE;tc_policy51,1398
tc_make_request(int ifindex, int type, unsigned int flags,tc_make_request54,1472
tc_transact(struct ofpbuf *request, struct ofpbuf **replyp)tc_transact71,1959
tc_add_del_ingress_qdisc(int ifindex, bool add)tc_add_del_ingress_qdisc94,2746
static const struct nl_policy tca_policy[] = {tca_policy122,3564
static const struct nl_policy tca_flower_policy[] = {tca_flower_policy130,3923
static const struct nl_policy tunnel_key_policy[] = {tunnel_key_policy202,8631
static const struct nl_policy gact_policy[] = {gact_policy218,9556
static const struct nl_policy mirred_policy[] = {mirred_policy227,9903
static const struct nl_policy vlan_policy[] = {vlan_policy236,10266
static const struct nl_policy act_policy[] = {act_policy245,10695
static const struct nl_policy stats_policy[] = {stats_policy252,11015
#define TCA_ACT_MIN_PRIO TCA_ACT_MIN_PRIO258,11233
tc_dump_flower_start(int ifindex, struct nl_dump *dump)tc_dump_flower_start261,11265
tc_flush(int ifindex)tc_flush278,11659
tc_del_filter(int ifindex, int prio, int handle)tc_del_filter291,11937
tc_get_tc_cls_policy(enum tc_offload_policy policy)tc_get_tc_cls_policy311,12410
nl_msg_put_act_drop(struct ofpbuf *request)nl_msg_put_act_drop323,12661
nl_msg_put_act_redirect(struct ofpbuf *request, int ifindex)nl_msg_put_act_redirect338,13029
nl_msg_put_act_cookie(struct ofpbuf *request, struct tc_cookie *ck) {nl_msg_put_act_cookie355,13540
nl_msg_put_flower_acts(struct ofpbuf *request, struct tc_flower *flower)nl_msg_put_flower_acts362,13721
nl_msg_put_masked_value(struct ofpbuf *request, uint16_t type,nl_msg_put_masked_value388,14618
#define FLOWER_PUT_MASKED_VALUE(FLOWER_PUT_MASKED_VALUE402,15060
nl_msg_put_flower_options(struct ofpbuf *request, struct tc_flower *flower)nl_msg_put_flower_options407,15277
tc_replace_flower(int ifindex, uint16_t prio, uint32_t handle,tc_replace_flower468,17854
tc_replace_flowers(int ifindex, uint16_t *prios, uint32_t handle,tc_replace_flowers511,19187
tc_set_policy(const char *policy)tc_set_policy553,20581
